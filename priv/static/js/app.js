// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"src/Main.elm":[function(require,module,exports) {
(function(scope){
'use strict';

function F(arity, fun, wrapper) {
  wrapper.a = arity;
  wrapper.f = fun;
  return wrapper;
}

function F2(fun) {
  return F(2, fun, function(a) { return function(b) { return fun(a,b); }; })
}
function F3(fun) {
  return F(3, fun, function(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  });
}
function F4(fun) {
  return F(4, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  });
}
function F5(fun) {
  return F(5, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  });
}
function F6(fun) {
  return F(6, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  });
}
function F7(fun) {
  return F(7, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  });
}
function F8(fun) {
  return F(8, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  });
}
function F9(fun) {
  return F(9, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  });
}

function A2(fun, a, b) {
  return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
}
function A3(fun, a, b, c) {
  return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
}
function A4(fun, a, b, c, d) {
  return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e) {
  return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f) {
  return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g) {
  return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h) {
  return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i) {
  return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

console.warn('Compiled in DEBUG mode. Follow the advice at https://elm-lang.org/0.19.1/optimize for better performance and smaller assets.');


// EQUALITY

function _Utils_eq(x, y)
{
	for (
		var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack);
		isEqual && (pair = stack.pop());
		isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)
		)
	{}

	return isEqual;
}

function _Utils_eqHelp(x, y, depth, stack)
{
	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object' || x === null || y === null)
	{
		typeof x === 'function' && _Debug_crash(5);
		return false;
	}

	if (depth > 100)
	{
		stack.push(_Utils_Tuple2(x,y));
		return true;
	}

	/**/
	if (x.$ === 'Set_elm_builtin')
	{
		x = $elm$core$Set$toList(x);
		y = $elm$core$Set$toList(y);
	}
	if (x.$ === 'RBNode_elm_builtin' || x.$ === 'RBEmpty_elm_builtin')
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	/**_UNUSED/
	if (x.$ < 0)
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	for (var key in x)
	{
		if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

var _Utils_equal = F2(_Utils_eq);
var _Utils_notEqual = F2(function(a, b) { return !_Utils_eq(a,b); });



// COMPARISONS

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

function _Utils_cmp(x, y, ord)
{
	if (typeof x !== 'object')
	{
		return x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;
	}

	/**/
	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? 0 : a < b ? -1 : 1;
	}
	//*/

	/**_UNUSED/
	if (typeof x.$ === 'undefined')
	//*/
	/**/
	if (x.$[0] === '#')
	//*/
	{
		return (ord = _Utils_cmp(x.a, y.a))
			? ord
			: (ord = _Utils_cmp(x.b, y.b))
				? ord
				: _Utils_cmp(x.c, y.c);
	}

	// traverse conses until end of a list or a mismatch
	for (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) {} // WHILE_CONSES
	return ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0);
}

var _Utils_lt = F2(function(a, b) { return _Utils_cmp(a, b) < 0; });
var _Utils_le = F2(function(a, b) { return _Utils_cmp(a, b) < 1; });
var _Utils_gt = F2(function(a, b) { return _Utils_cmp(a, b) > 0; });
var _Utils_ge = F2(function(a, b) { return _Utils_cmp(a, b) >= 0; });

var _Utils_compare = F2(function(x, y)
{
	var n = _Utils_cmp(x, y);
	return n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;
});


// COMMON VALUES

var _Utils_Tuple0_UNUSED = 0;
var _Utils_Tuple0 = { $: '#0' };

function _Utils_Tuple2_UNUSED(a, b) { return { a: a, b: b }; }
function _Utils_Tuple2(a, b) { return { $: '#2', a: a, b: b }; }

function _Utils_Tuple3_UNUSED(a, b, c) { return { a: a, b: b, c: c }; }
function _Utils_Tuple3(a, b, c) { return { $: '#3', a: a, b: b, c: c }; }

function _Utils_chr_UNUSED(c) { return c; }
function _Utils_chr(c) { return new String(c); }


// RECORDS

function _Utils_update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


// APPEND

var _Utils_append = F2(_Utils_ap);

function _Utils_ap(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (!xs.b)
	{
		return ys;
	}
	var root = _List_Cons(xs.a, ys);
	xs = xs.b
	for (var curr = root; xs.b; xs = xs.b) // WHILE_CONS
	{
		curr = curr.b = _List_Cons(xs.a, ys);
	}
	return root;
}



var _List_Nil_UNUSED = { $: 0 };
var _List_Nil = { $: '[]' };

function _List_Cons_UNUSED(hd, tl) { return { $: 1, a: hd, b: tl }; }
function _List_Cons(hd, tl) { return { $: '::', a: hd, b: tl }; }


var _List_cons = F2(_List_Cons);

function _List_fromArray(arr)
{
	var out = _List_Nil;
	for (var i = arr.length; i--; )
	{
		out = _List_Cons(arr[i], out);
	}
	return out;
}

function _List_toArray(xs)
{
	for (var out = []; xs.b; xs = xs.b) // WHILE_CONS
	{
		out.push(xs.a);
	}
	return out;
}

var _List_map2 = F3(function(f, xs, ys)
{
	for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) // WHILE_CONSES
	{
		arr.push(A2(f, xs.a, ys.a));
	}
	return _List_fromArray(arr);
});

var _List_map3 = F4(function(f, xs, ys, zs)
{
	for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A3(f, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map4 = F5(function(f, ws, xs, ys, zs)
{
	for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map5 = F6(function(f, vs, ws, xs, ys, zs)
{
	for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_sortBy = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		return _Utils_cmp(f(a), f(b));
	}));
});

var _List_sortWith = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		var ord = A2(f, a, b);
		return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
	}));
});



var _JsArray_empty = [];

function _JsArray_singleton(value)
{
    return [value];
}

function _JsArray_length(array)
{
    return array.length;
}

var _JsArray_initialize = F3(function(size, offset, func)
{
    var result = new Array(size);

    for (var i = 0; i < size; i++)
    {
        result[i] = func(offset + i);
    }

    return result;
});

var _JsArray_initializeFromList = F2(function (max, ls)
{
    var result = new Array(max);

    for (var i = 0; i < max && ls.b; i++)
    {
        result[i] = ls.a;
        ls = ls.b;
    }

    result.length = i;
    return _Utils_Tuple2(result, ls);
});

var _JsArray_unsafeGet = F2(function(index, array)
{
    return array[index];
});

var _JsArray_unsafeSet = F3(function(index, value, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[index] = value;
    return result;
});

var _JsArray_push = F2(function(value, array)
{
    var length = array.length;
    var result = new Array(length + 1);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[length] = value;
    return result;
});

var _JsArray_foldl = F3(function(func, acc, array)
{
    var length = array.length;

    for (var i = 0; i < length; i++)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_foldr = F3(function(func, acc, array)
{
    for (var i = array.length - 1; i >= 0; i--)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_map = F2(function(func, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = func(array[i]);
    }

    return result;
});

var _JsArray_indexedMap = F3(function(func, offset, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = A2(func, offset + i, array[i]);
    }

    return result;
});

var _JsArray_slice = F3(function(from, to, array)
{
    return array.slice(from, to);
});

var _JsArray_appendN = F3(function(n, dest, source)
{
    var destLen = dest.length;
    var itemsToCopy = n - destLen;

    if (itemsToCopy > source.length)
    {
        itemsToCopy = source.length;
    }

    var size = destLen + itemsToCopy;
    var result = new Array(size);

    for (var i = 0; i < destLen; i++)
    {
        result[i] = dest[i];
    }

    for (var i = 0; i < itemsToCopy; i++)
    {
        result[i + destLen] = source[i];
    }

    return result;
});



// LOG

var _Debug_log_UNUSED = F2(function(tag, value)
{
	return value;
});

var _Debug_log = F2(function(tag, value)
{
	console.log(tag + ': ' + _Debug_toString(value));
	return value;
});


// TODOS

function _Debug_todo(moduleName, region)
{
	return function(message) {
		_Debug_crash(8, moduleName, region, message);
	};
}

function _Debug_todoCase(moduleName, region, value)
{
	return function(message) {
		_Debug_crash(9, moduleName, region, value, message);
	};
}


// TO STRING

function _Debug_toString_UNUSED(value)
{
	return '<internals>';
}

function _Debug_toString(value)
{
	return _Debug_toAnsiString(false, value);
}

function _Debug_toAnsiString(ansi, value)
{
	if (typeof value === 'function')
	{
		return _Debug_internalColor(ansi, '<function>');
	}

	if (typeof value === 'boolean')
	{
		return _Debug_ctorColor(ansi, value ? 'True' : 'False');
	}

	if (typeof value === 'number')
	{
		return _Debug_numberColor(ansi, value + '');
	}

	if (value instanceof String)
	{
		return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
	}

	if (typeof value === 'string')
	{
		return _Debug_stringColor(ansi, '"' + _Debug_addSlashes(value, false) + '"');
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (typeof tag === 'number')
		{
			return _Debug_internalColor(ansi, '<internals>');
		}

		if (tag[0] === '#')
		{
			var output = [];
			for (var k in value)
			{
				if (k === '$') continue;
				output.push(_Debug_toAnsiString(ansi, value[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (tag === 'Set_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Set')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
		}

		if (tag === 'RBNode_elm_builtin' || tag === 'RBEmpty_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Dict')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
		}

		if (tag === 'Array_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Array')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
		}

		if (tag === '::' || tag === '[]')
		{
			var output = '[';

			value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b)

			for (; value.b; value = value.b) // WHILE_CONS
			{
				output += ',' + _Debug_toAnsiString(ansi, value.a);
			}
			return output + ']';
		}

		var output = '';
		for (var i in value)
		{
			if (i === '$') continue;
			var str = _Debug_toAnsiString(ansi, value[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '[' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return _Debug_ctorColor(ansi, tag) + output;
	}

	if (typeof DataView === 'function' && value instanceof DataView)
	{
		return _Debug_stringColor(ansi, '<' + value.byteLength + ' bytes>');
	}

	if (typeof File !== 'undefined' && value instanceof File)
	{
		return _Debug_internalColor(ansi, '<' + value.name + '>');
	}

	if (typeof value === 'object')
	{
		var output = [];
		for (var key in value)
		{
			var field = key[0] === '_' ? key.slice(1) : key;
			output.push(_Debug_fadeColor(ansi, field) + ' = ' + _Debug_toAnsiString(ansi, value[key]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return _Debug_internalColor(ansi, '<internals>');
}

function _Debug_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');

	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}

function _Debug_ctorColor(ansi, string)
{
	return ansi ? '\x1b[96m' + string + '\x1b[0m' : string;
}

function _Debug_numberColor(ansi, string)
{
	return ansi ? '\x1b[95m' + string + '\x1b[0m' : string;
}

function _Debug_stringColor(ansi, string)
{
	return ansi ? '\x1b[93m' + string + '\x1b[0m' : string;
}

function _Debug_charColor(ansi, string)
{
	return ansi ? '\x1b[92m' + string + '\x1b[0m' : string;
}

function _Debug_fadeColor(ansi, string)
{
	return ansi ? '\x1b[37m' + string + '\x1b[0m' : string;
}

function _Debug_internalColor(ansi, string)
{
	return ansi ? '\x1b[36m' + string + '\x1b[0m' : string;
}

function _Debug_toHexDigit(n)
{
	return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
}


// CRASH


function _Debug_crash_UNUSED(identifier)
{
	throw new Error('https://github.com/elm/core/blob/1.0.0/hints/' + identifier + '.md');
}


function _Debug_crash(identifier, fact1, fact2, fact3, fact4)
{
	switch(identifier)
	{
		case 0:
			throw new Error('What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById("elm-node")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.');

		case 1:
			throw new Error('Browser.application programs cannot handle URLs like this:\n\n    ' + document.location.href + '\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.');

		case 2:
			var jsonErrorString = fact1;
			throw new Error('Problem with the flags given to your Elm program on initialization.\n\n' + jsonErrorString);

		case 3:
			var portName = fact1;
			throw new Error('There can only be one port named `' + portName + '`, but your program has multiple.');

		case 4:
			var portName = fact1;
			var problem = fact2;
			throw new Error('Trying to send an unexpected type of value through port `' + portName + '`:\n' + problem);

		case 5:
			throw new Error('Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');

		case 6:
			var moduleName = fact1;
			throw new Error('Your page is loading multiple Elm scripts with a module named ' + moduleName + '. Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!');

		case 8:
			var moduleName = fact1;
			var region = fact2;
			var message = fact3;
			throw new Error('TODO in module `' + moduleName + '` ' + _Debug_regionToString(region) + '\n\n' + message);

		case 9:
			var moduleName = fact1;
			var region = fact2;
			var value = fact3;
			var message = fact4;
			throw new Error(
				'TODO in module `' + moduleName + '` from the `case` expression '
				+ _Debug_regionToString(region) + '\n\nIt received the following value:\n\n    '
				+ _Debug_toString(value).replace('\n', '\n    ')
				+ '\n\nBut the branch that handles it says:\n\n    ' + message.replace('\n', '\n    ')
			);

		case 10:
			throw new Error('Bug in https://github.com/elm/virtual-dom/issues');

		case 11:
			throw new Error('Cannot perform mod 0. Division by zero error.');
	}
}

function _Debug_regionToString(region)
{
	if (region.start.line === region.end.line)
	{
		return 'on line ' + region.start.line;
	}
	return 'on lines ' + region.start.line + ' through ' + region.end.line;
}



// MATH

var _Basics_add = F2(function(a, b) { return a + b; });
var _Basics_sub = F2(function(a, b) { return a - b; });
var _Basics_mul = F2(function(a, b) { return a * b; });
var _Basics_fdiv = F2(function(a, b) { return a / b; });
var _Basics_idiv = F2(function(a, b) { return (a / b) | 0; });
var _Basics_pow = F2(Math.pow);

var _Basics_remainderBy = F2(function(b, a) { return a % b; });

// https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf
var _Basics_modBy = F2(function(modulus, x)
{
	var answer = x % modulus;
	return modulus === 0
		? _Debug_crash(11)
		:
	((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))
		? answer + modulus
		: answer;
});


// TRIGONOMETRY

var _Basics_pi = Math.PI;
var _Basics_e = Math.E;
var _Basics_cos = Math.cos;
var _Basics_sin = Math.sin;
var _Basics_tan = Math.tan;
var _Basics_acos = Math.acos;
var _Basics_asin = Math.asin;
var _Basics_atan = Math.atan;
var _Basics_atan2 = F2(Math.atan2);


// MORE MATH

function _Basics_toFloat(x) { return x; }
function _Basics_truncate(n) { return n | 0; }
function _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }

var _Basics_ceiling = Math.ceil;
var _Basics_floor = Math.floor;
var _Basics_round = Math.round;
var _Basics_sqrt = Math.sqrt;
var _Basics_log = Math.log;
var _Basics_isNaN = isNaN;


// BOOLEANS

function _Basics_not(bool) { return !bool; }
var _Basics_and = F2(function(a, b) { return a && b; });
var _Basics_or  = F2(function(a, b) { return a || b; });
var _Basics_xor = F2(function(a, b) { return a !== b; });



var _String_cons = F2(function(chr, str)
{
	return chr + str;
});

function _String_uncons(string)
{
	var word = string.charCodeAt(0);
	return !isNaN(word)
		? $elm$core$Maybe$Just(
			0xD800 <= word && word <= 0xDBFF
				? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))
				: _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))
		)
		: $elm$core$Maybe$Nothing;
}

var _String_append = F2(function(a, b)
{
	return a + b;
});

function _String_length(str)
{
	return str.length;
}

var _String_map = F2(function(func, string)
{
	var len = string.length;
	var array = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = string.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			array[i] = func(_Utils_chr(string[i] + string[i+1]));
			i += 2;
			continue;
		}
		array[i] = func(_Utils_chr(string[i]));
		i++;
	}
	return array.join('');
});

var _String_filter = F2(function(isGood, str)
{
	var arr = [];
	var len = str.length;
	var i = 0;
	while (i < len)
	{
		var char = str[i];
		var word = str.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += str[i];
			i++;
		}

		if (isGood(_Utils_chr(char)))
		{
			arr.push(char);
		}
	}
	return arr.join('');
});

function _String_reverse(str)
{
	var len = str.length;
	var arr = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = str.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			arr[len - i] = str[i + 1];
			i++;
			arr[len - i] = str[i - 1];
			i++;
		}
		else
		{
			arr[len - i] = str[i];
			i++;
		}
	}
	return arr.join('');
}

var _String_foldl = F3(function(func, state, string)
{
	var len = string.length;
	var i = 0;
	while (i < len)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += string[i];
			i++;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_foldr = F3(function(func, state, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_split = F2(function(sep, str)
{
	return str.split(sep);
});

var _String_join = F2(function(sep, strs)
{
	return strs.join(sep);
});

var _String_slice = F3(function(start, end, str) {
	return str.slice(start, end);
});

function _String_trim(str)
{
	return str.trim();
}

function _String_trimLeft(str)
{
	return str.replace(/^\s+/, '');
}

function _String_trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function _String_words(str)
{
	return _List_fromArray(str.trim().split(/\s+/g));
}

function _String_lines(str)
{
	return _List_fromArray(str.split(/\r\n|\r|\n/g));
}

function _String_toUpper(str)
{
	return str.toUpperCase();
}

function _String_toLower(str)
{
	return str.toLowerCase();
}

var _String_any = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (isGood(_Utils_chr(char)))
		{
			return true;
		}
	}
	return false;
});

var _String_all = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (!isGood(_Utils_chr(char)))
		{
			return false;
		}
	}
	return true;
});

var _String_contains = F2(function(sub, str)
{
	return str.indexOf(sub) > -1;
});

var _String_startsWith = F2(function(sub, str)
{
	return str.indexOf(sub) === 0;
});

var _String_endsWith = F2(function(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
});

var _String_indexes = F2(function(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _List_Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _List_fromArray(is);
});


// TO STRING

function _String_fromNumber(number)
{
	return number + '';
}


// INT CONVERSIONS

function _String_toInt(str)
{
	var total = 0;
	var code0 = str.charCodeAt(0);
	var start = code0 == 0x2B /* + */ || code0 == 0x2D /* - */ ? 1 : 0;

	for (var i = start; i < str.length; ++i)
	{
		var code = str.charCodeAt(i);
		if (code < 0x30 || 0x39 < code)
		{
			return $elm$core$Maybe$Nothing;
		}
		total = 10 * total + code - 0x30;
	}

	return i == start
		? $elm$core$Maybe$Nothing
		: $elm$core$Maybe$Just(code0 == 0x2D ? -total : total);
}


// FLOAT CONVERSIONS

function _String_toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return $elm$core$Maybe$Nothing;
	}
	var n = +s;
	// faster isNaN check
	return n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;
}

function _String_fromList(chars)
{
	return _List_toArray(chars).join('');
}




function _Char_toCode(char)
{
	var code = char.charCodeAt(0);
	if (0xD800 <= code && code <= 0xDBFF)
	{
		return (code - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000
	}
	return code;
}

function _Char_fromCode(code)
{
	return _Utils_chr(
		(code < 0 || 0x10FFFF < code)
			? '\uFFFD'
			:
		(code <= 0xFFFF)
			? String.fromCharCode(code)
			:
		(code -= 0x10000,
			String.fromCharCode(Math.floor(code / 0x400) + 0xD800, code % 0x400 + 0xDC00)
		)
	);
}

function _Char_toUpper(char)
{
	return _Utils_chr(char.toUpperCase());
}

function _Char_toLower(char)
{
	return _Utils_chr(char.toLowerCase());
}

function _Char_toLocaleUpper(char)
{
	return _Utils_chr(char.toLocaleUpperCase());
}

function _Char_toLocaleLower(char)
{
	return _Utils_chr(char.toLocaleLowerCase());
}



/**/
function _Json_errorToString(error)
{
	return $elm$json$Json$Decode$errorToString(error);
}
//*/


// CORE DECODERS

function _Json_succeed(msg)
{
	return {
		$: 0,
		a: msg
	};
}

function _Json_fail(msg)
{
	return {
		$: 1,
		a: msg
	};
}

function _Json_decodePrim(decoder)
{
	return { $: 2, b: decoder };
}

var _Json_decodeInt = _Json_decodePrim(function(value) {
	return (typeof value !== 'number')
		? _Json_expecting('an INT', value)
		:
	(-2147483647 < value && value < 2147483647 && (value | 0) === value)
		? $elm$core$Result$Ok(value)
		:
	(isFinite(value) && !(value % 1))
		? $elm$core$Result$Ok(value)
		: _Json_expecting('an INT', value);
});

var _Json_decodeBool = _Json_decodePrim(function(value) {
	return (typeof value === 'boolean')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a BOOL', value);
});

var _Json_decodeFloat = _Json_decodePrim(function(value) {
	return (typeof value === 'number')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FLOAT', value);
});

var _Json_decodeValue = _Json_decodePrim(function(value) {
	return $elm$core$Result$Ok(_Json_wrap(value));
});

var _Json_decodeString = _Json_decodePrim(function(value) {
	return (typeof value === 'string')
		? $elm$core$Result$Ok(value)
		: (value instanceof String)
			? $elm$core$Result$Ok(value + '')
			: _Json_expecting('a STRING', value);
});

function _Json_decodeList(decoder) { return { $: 3, b: decoder }; }
function _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }

function _Json_decodeNull(value) { return { $: 5, c: value }; }

var _Json_decodeField = F2(function(field, decoder)
{
	return {
		$: 6,
		d: field,
		b: decoder
	};
});

var _Json_decodeIndex = F2(function(index, decoder)
{
	return {
		$: 7,
		e: index,
		b: decoder
	};
});

function _Json_decodeKeyValuePairs(decoder)
{
	return {
		$: 8,
		b: decoder
	};
}

function _Json_mapMany(f, decoders)
{
	return {
		$: 9,
		f: f,
		g: decoders
	};
}

var _Json_andThen = F2(function(callback, decoder)
{
	return {
		$: 10,
		b: decoder,
		h: callback
	};
});

function _Json_oneOf(decoders)
{
	return {
		$: 11,
		g: decoders
	};
}


// DECODING OBJECTS

var _Json_map1 = F2(function(f, d1)
{
	return _Json_mapMany(f, [d1]);
});

var _Json_map2 = F3(function(f, d1, d2)
{
	return _Json_mapMany(f, [d1, d2]);
});

var _Json_map3 = F4(function(f, d1, d2, d3)
{
	return _Json_mapMany(f, [d1, d2, d3]);
});

var _Json_map4 = F5(function(f, d1, d2, d3, d4)
{
	return _Json_mapMany(f, [d1, d2, d3, d4]);
});

var _Json_map5 = F6(function(f, d1, d2, d3, d4, d5)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
});

var _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
});

var _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
});

var _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
});


// DECODE

var _Json_runOnString = F2(function(decoder, string)
{
	try
	{
		var value = JSON.parse(string);
		return _Json_runHelp(decoder, value);
	}
	catch (e)
	{
		return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'This is not valid JSON! ' + e.message, _Json_wrap(string)));
	}
});

var _Json_run = F2(function(decoder, value)
{
	return _Json_runHelp(decoder, _Json_unwrap(value));
});

function _Json_runHelp(decoder, value)
{
	switch (decoder.$)
	{
		case 2:
			return decoder.b(value);

		case 5:
			return (value === null)
				? $elm$core$Result$Ok(decoder.c)
				: _Json_expecting('null', value);

		case 3:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('a LIST', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);

		case 4:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);

		case 6:
			var field = decoder.d;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return _Json_expecting('an OBJECT with a field named `' + field + '`', value);
			}
			var result = _Json_runHelp(decoder.b, value[field]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, field, result.a));

		case 7:
			var index = decoder.e;
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			if (index >= value.length)
			{
				return _Json_expecting('a LONGER array. Need index ' + index + ' but only see ' + value.length + ' entries', value);
			}
			var result = _Json_runHelp(decoder.b, value[index]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, index, result.a));

		case 8:
			if (typeof value !== 'object' || value === null || _Json_isArray(value))
			{
				return _Json_expecting('an OBJECT', value);
			}

			var keyValuePairs = _List_Nil;
			// TODO test perf of Object.keys and switch when support is good enough
			for (var key in value)
			{
				if (value.hasOwnProperty(key))
				{
					var result = _Json_runHelp(decoder.b, value[key]);
					if (!$elm$core$Result$isOk(result))
					{
						return $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, key, result.a));
					}
					keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
				}
			}
			return $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));

		case 9:
			var answer = decoder.f;
			var decoders = decoder.g;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = _Json_runHelp(decoders[i], value);
				if (!$elm$core$Result$isOk(result))
				{
					return result;
				}
				answer = answer(result.a);
			}
			return $elm$core$Result$Ok(answer);

		case 10:
			var result = _Json_runHelp(decoder.b, value);
			return (!$elm$core$Result$isOk(result))
				? result
				: _Json_runHelp(decoder.h(result.a), value);

		case 11:
			var errors = _List_Nil;
			for (var temp = decoder.g; temp.b; temp = temp.b) // WHILE_CONS
			{
				var result = _Json_runHelp(temp.a, value);
				if ($elm$core$Result$isOk(result))
				{
					return result;
				}
				errors = _List_Cons(result.a, errors);
			}
			return $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));

		case 1:
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));

		case 0:
			return $elm$core$Result$Ok(decoder.a);
	}
}

function _Json_runArrayDecoder(decoder, value, toElmValue)
{
	var len = value.length;
	var array = new Array(len);
	for (var i = 0; i < len; i++)
	{
		var result = _Json_runHelp(decoder, value[i]);
		if (!$elm$core$Result$isOk(result))
		{
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, i, result.a));
		}
		array[i] = result.a;
	}
	return $elm$core$Result$Ok(toElmValue(array));
}

function _Json_isArray(value)
{
	return Array.isArray(value) || (typeof FileList === 'function' && value instanceof FileList);
}

function _Json_toElmArray(array)
{
	return A2($elm$core$Array$initialize, array.length, function(i) { return array[i]; });
}

function _Json_expecting(type, value)
{
	return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'Expecting ' + type, _Json_wrap(value)));
}


// EQUALITY

function _Json_equality(x, y)
{
	if (x === y)
	{
		return true;
	}

	if (x.$ !== y.$)
	{
		return false;
	}

	switch (x.$)
	{
		case 0:
		case 1:
			return x.a === y.a;

		case 2:
			return x.b === y.b;

		case 5:
			return x.c === y.c;

		case 3:
		case 4:
		case 8:
			return _Json_equality(x.b, y.b);

		case 6:
			return x.d === y.d && _Json_equality(x.b, y.b);

		case 7:
			return x.e === y.e && _Json_equality(x.b, y.b);

		case 9:
			return x.f === y.f && _Json_listEquality(x.g, y.g);

		case 10:
			return x.h === y.h && _Json_equality(x.b, y.b);

		case 11:
			return _Json_listEquality(x.g, y.g);
	}
}

function _Json_listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!_Json_equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

var _Json_encode = F2(function(indentLevel, value)
{
	return JSON.stringify(_Json_unwrap(value), null, indentLevel) + '';
});

function _Json_wrap(value) { return { $: 0, a: value }; }
function _Json_unwrap(value) { return value.a; }

function _Json_wrap_UNUSED(value) { return value; }
function _Json_unwrap_UNUSED(value) { return value; }

function _Json_emptyArray() { return []; }
function _Json_emptyObject() { return {}; }

var _Json_addField = F3(function(key, value, object)
{
	object[key] = _Json_unwrap(value);
	return object;
});

function _Json_addEntry(func)
{
	return F2(function(entry, array)
	{
		array.push(_Json_unwrap(func(entry)));
		return array;
	});
}

var _Json_encodeNull = _Json_wrap(null);



// TASKS

function _Scheduler_succeed(value)
{
	return {
		$: 0,
		a: value
	};
}

function _Scheduler_fail(error)
{
	return {
		$: 1,
		a: error
	};
}

function _Scheduler_binding(callback)
{
	return {
		$: 2,
		b: callback,
		c: null
	};
}

var _Scheduler_andThen = F2(function(callback, task)
{
	return {
		$: 3,
		b: callback,
		d: task
	};
});

var _Scheduler_onError = F2(function(callback, task)
{
	return {
		$: 4,
		b: callback,
		d: task
	};
});

function _Scheduler_receive(callback)
{
	return {
		$: 5,
		b: callback
	};
}


// PROCESSES

var _Scheduler_guid = 0;

function _Scheduler_rawSpawn(task)
{
	var proc = {
		$: 0,
		e: _Scheduler_guid++,
		f: task,
		g: null,
		h: []
	};

	_Scheduler_enqueue(proc);

	return proc;
}

function _Scheduler_spawn(task)
{
	return _Scheduler_binding(function(callback) {
		callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
	});
}

function _Scheduler_rawSend(proc, msg)
{
	proc.h.push(msg);
	_Scheduler_enqueue(proc);
}

var _Scheduler_send = F2(function(proc, msg)
{
	return _Scheduler_binding(function(callback) {
		_Scheduler_rawSend(proc, msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});

function _Scheduler_kill(proc)
{
	return _Scheduler_binding(function(callback) {
		var task = proc.f;
		if (task.$ === 2 && task.c)
		{
			task.c();
		}

		proc.f = null;

		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


/* STEP PROCESSES

type alias Process =
  { $ : tag
  , id : unique_id
  , root : Task
  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }
  , mailbox : [msg]
  }

*/


var _Scheduler_working = false;
var _Scheduler_queue = [];


function _Scheduler_enqueue(proc)
{
	_Scheduler_queue.push(proc);
	if (_Scheduler_working)
	{
		return;
	}
	_Scheduler_working = true;
	while (proc = _Scheduler_queue.shift())
	{
		_Scheduler_step(proc);
	}
	_Scheduler_working = false;
}


function _Scheduler_step(proc)
{
	while (proc.f)
	{
		var rootTag = proc.f.$;
		if (rootTag === 0 || rootTag === 1)
		{
			while (proc.g && proc.g.$ !== rootTag)
			{
				proc.g = proc.g.i;
			}
			if (!proc.g)
			{
				return;
			}
			proc.f = proc.g.b(proc.f.a);
			proc.g = proc.g.i;
		}
		else if (rootTag === 2)
		{
			proc.f.c = proc.f.b(function(newRoot) {
				proc.f = newRoot;
				_Scheduler_enqueue(proc);
			});
			return;
		}
		else if (rootTag === 5)
		{
			if (proc.h.length === 0)
			{
				return;
			}
			proc.f = proc.f.b(proc.h.shift());
		}
		else // if (rootTag === 3 || rootTag === 4)
		{
			proc.g = {
				$: rootTag === 3 ? 0 : 1,
				b: proc.f.b,
				i: proc.g
			};
			proc.f = proc.f.d;
		}
	}
}



function _Process_sleep(time)
{
	return _Scheduler_binding(function(callback) {
		var id = setTimeout(function() {
			callback(_Scheduler_succeed(_Utils_Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}




// PROGRAMS


var _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function() { return function() {} }
	);
});



// INITIALIZE A PROGRAM


function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder)
{
	var result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args['flags'] : undefined));
	$elm$core$Result$isOk(result) || _Debug_crash(2 /**/, _Json_errorToString(result.a) /**/);
	var managers = {};
	result = init(result.a);
	var model = result.a;
	var stepper = stepperBuilder(sendToApp, model);
	var ports = _Platform_setupEffects(managers, sendToApp);

	function sendToApp(msg, viewMetadata)
	{
		result = A2(update, msg, model);
		stepper(model = result.a, viewMetadata);
		_Platform_enqueueEffects(managers, result.b, subscriptions(model));
	}

	_Platform_enqueueEffects(managers, result.b, subscriptions(model));

	return ports ? { ports: ports } : {};
}



// TRACK PRELOADS
//
// This is used by code in elm/browser and elm/http
// to register any HTTP requests that are triggered by init.
//


var _Platform_preload;


function _Platform_registerPreload(url)
{
	_Platform_preload.add(url);
}



// EFFECT MANAGERS


var _Platform_effectManagers = {};


function _Platform_setupEffects(managers, sendToApp)
{
	var ports;

	// setup all necessary effect managers
	for (var key in _Platform_effectManagers)
	{
		var manager = _Platform_effectManagers[key];

		if (manager.a)
		{
			ports = ports || {};
			ports[key] = manager.a(key, sendToApp);
		}

		managers[key] = _Platform_instantiateManager(manager, sendToApp);
	}

	return ports;
}


function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap)
{
	return {
		b: init,
		c: onEffects,
		d: onSelfMsg,
		e: cmdMap,
		f: subMap
	};
}


function _Platform_instantiateManager(info, sendToApp)
{
	var router = {
		g: sendToApp,
		h: undefined
	};

	var onEffects = info.c;
	var onSelfMsg = info.d;
	var cmdMap = info.e;
	var subMap = info.f;

	function loop(state)
	{
		return A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg)
		{
			var value = msg.a;

			if (msg.$ === 0)
			{
				return A3(onSelfMsg, router, value, state);
			}

			return cmdMap && subMap
				? A4(onEffects, router, value.i, value.j, state)
				: A3(onEffects, router, cmdMap ? value.i : value.j, state);
		}));
	}

	return router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));
}



// ROUTING


var _Platform_sendToApp = F2(function(router, msg)
{
	return _Scheduler_binding(function(callback)
	{
		router.g(msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});


var _Platform_sendToSelf = F2(function(router, msg)
{
	return A2(_Scheduler_send, router.h, {
		$: 0,
		a: msg
	});
});



// BAGS


function _Platform_leaf(home)
{
	return function(value)
	{
		return {
			$: 1,
			k: home,
			l: value
		};
	};
}


function _Platform_batch(list)
{
	return {
		$: 2,
		m: list
	};
}


var _Platform_map = F2(function(tagger, bag)
{
	return {
		$: 3,
		n: tagger,
		o: bag
	}
});



// PIPE BAGS INTO EFFECT MANAGERS
//
// Effects must be queued!
//
// Say your init contains a synchronous command, like Time.now or Time.here
//
//   - This will produce a batch of effects (FX_1)
//   - The synchronous task triggers the subsequent `update` call
//   - This will produce a batch of effects (FX_2)
//
// If we just start dispatching FX_2, subscriptions from FX_2 can be processed
// before subscriptions from FX_1. No good! Earlier versions of this code had
// this problem, leading to these reports:
//
//   https://github.com/elm/core/issues/980
//   https://github.com/elm/core/pull/981
//   https://github.com/elm/compiler/issues/1776
//
// The queue is necessary to avoid ordering issues for synchronous commands.


// Why use true/false here? Why not just check the length of the queue?
// The goal is to detect "are we currently dispatching effects?" If we
// are, we need to bail and let the ongoing while loop handle things.
//
// Now say the queue has 1 element. When we dequeue the final element,
// the queue will be empty, but we are still actively dispatching effects.
// So you could get queue jumping in a really tricky category of cases.
//
var _Platform_effectsQueue = [];
var _Platform_effectsActive = false;


function _Platform_enqueueEffects(managers, cmdBag, subBag)
{
	_Platform_effectsQueue.push({ p: managers, q: cmdBag, r: subBag });

	if (_Platform_effectsActive) return;

	_Platform_effectsActive = true;
	for (var fx; fx = _Platform_effectsQueue.shift(); )
	{
		_Platform_dispatchEffects(fx.p, fx.q, fx.r);
	}
	_Platform_effectsActive = false;
}


function _Platform_dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	_Platform_gatherEffects(true, cmdBag, effectsDict, null);
	_Platform_gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		_Scheduler_rawSend(managers[home], {
			$: 'fx',
			a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
		});
	}
}


function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.$)
	{
		case 1:
			var home = bag.k;
			var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
			effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
			return;

		case 2:
			for (var list = bag.m; list.b; list = list.b) // WHILE_CONS
			{
				_Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
			}
			return;

		case 3:
			_Platform_gatherEffects(isCmd, bag.o, effectsDict, {
				s: bag.n,
				t: taggers
			});
			return;
	}
}


function _Platform_toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		for (var temp = taggers; temp; temp = temp.t)
		{
			x = temp.s(x);
		}
		return x;
	}

	var map = isCmd
		? _Platform_effectManagers[home].e
		: _Platform_effectManagers[home].f;

	return A2(map, applyTaggers, value)
}


function _Platform_insert(isCmd, newEffect, effects)
{
	effects = effects || { i: _List_Nil, j: _List_Nil };

	isCmd
		? (effects.i = _List_Cons(newEffect, effects.i))
		: (effects.j = _List_Cons(newEffect, effects.j));

	return effects;
}



// PORTS


function _Platform_checkPortName(name)
{
	if (_Platform_effectManagers[name])
	{
		_Debug_crash(3, name)
	}
}



// OUTGOING PORTS


function _Platform_outgoingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		e: _Platform_outgoingPortMap,
		u: converter,
		a: _Platform_setupOutgoingPort
	};
	return _Platform_leaf(name);
}


var _Platform_outgoingPortMap = F2(function(tagger, value) { return value; });


function _Platform_setupOutgoingPort(name)
{
	var subs = [];
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Process_sleep(0);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, cmdList, state)
	{
		for ( ; cmdList.b; cmdList = cmdList.b) // WHILE_CONS
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = _Json_unwrap(converter(cmdList.a));
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
		}
		return init;
	});

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}



// INCOMING PORTS


function _Platform_incomingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		f: _Platform_incomingPortMap,
		u: converter,
		a: _Platform_setupIncomingPort
	};
	return _Platform_leaf(name);
}


var _Platform_incomingPortMap = F2(function(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});


function _Platform_setupIncomingPort(name, sendToApp)
{
	var subs = _List_Nil;
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Scheduler_succeed(null);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, subList, state)
	{
		subs = subList;
		return init;
	});

	// PUBLIC API

	function send(incomingValue)
	{
		var result = A2(_Json_run, converter, _Json_wrap(incomingValue));

		$elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);

		var value = result.a;
		for (var temp = subs; temp.b; temp = temp.b) // WHILE_CONS
		{
			sendToApp(temp.a(value));
		}
	}

	return { send: send };
}



// EXPORT ELM MODULES
//
// Have DEBUG and PROD versions so that we can (1) give nicer errors in
// debug mode and (2) not pay for the bits needed for that in prod mode.
//


function _Platform_export_UNUSED(exports)
{
	scope['Elm']
		? _Platform_mergeExportsProd(scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsProd(obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6)
				: _Platform_mergeExportsProd(obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}


function _Platform_export(exports)
{
	scope['Elm']
		? _Platform_mergeExportsDebug('Elm', scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsDebug(moduleName, obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6, moduleName)
				: _Platform_mergeExportsDebug(moduleName + '.' + name, obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}




// HELPERS


var _VirtualDom_divertHrefToApp;

var _VirtualDom_doc = typeof document !== 'undefined' ? document : {};


function _VirtualDom_appendChild(parent, child)
{
	parent.appendChild(child);
}

var _VirtualDom_init = F4(function(virtualNode, flagDecoder, debugMetadata, args)
{
	// NOTE: this function needs _Platform_export available to work

	/**_UNUSED/
	var node = args['node'];
	//*/
	/**/
	var node = args && args['node'] ? args['node'] : _Debug_crash(0);
	//*/

	node.parentNode.replaceChild(
		_VirtualDom_render(virtualNode, function() {}),
		node
	);

	return {};
});



// TEXT


function _VirtualDom_text(string)
{
	return {
		$: 0,
		a: string
	};
}



// NODE


var _VirtualDom_nodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 1,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_node = _VirtualDom_nodeNS(undefined);



// KEYED NODE


var _VirtualDom_keyedNodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 2,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_keyedNode = _VirtualDom_keyedNodeNS(undefined);



// CUSTOM


function _VirtualDom_custom(factList, model, render, diff)
{
	return {
		$: 3,
		d: _VirtualDom_organizeFacts(factList),
		g: model,
		h: render,
		i: diff
	};
}



// MAP


var _VirtualDom_map = F2(function(tagger, node)
{
	return {
		$: 4,
		j: tagger,
		k: node,
		b: 1 + (node.b || 0)
	};
});



// LAZY


function _VirtualDom_thunk(refs, thunk)
{
	return {
		$: 5,
		l: refs,
		m: thunk,
		k: undefined
	};
}

var _VirtualDom_lazy = F2(function(func, a)
{
	return _VirtualDom_thunk([func, a], function() {
		return func(a);
	});
});

var _VirtualDom_lazy2 = F3(function(func, a, b)
{
	return _VirtualDom_thunk([func, a, b], function() {
		return A2(func, a, b);
	});
});

var _VirtualDom_lazy3 = F4(function(func, a, b, c)
{
	return _VirtualDom_thunk([func, a, b, c], function() {
		return A3(func, a, b, c);
	});
});

var _VirtualDom_lazy4 = F5(function(func, a, b, c, d)
{
	return _VirtualDom_thunk([func, a, b, c, d], function() {
		return A4(func, a, b, c, d);
	});
});

var _VirtualDom_lazy5 = F6(function(func, a, b, c, d, e)
{
	return _VirtualDom_thunk([func, a, b, c, d, e], function() {
		return A5(func, a, b, c, d, e);
	});
});

var _VirtualDom_lazy6 = F7(function(func, a, b, c, d, e, f)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f], function() {
		return A6(func, a, b, c, d, e, f);
	});
});

var _VirtualDom_lazy7 = F8(function(func, a, b, c, d, e, f, g)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g], function() {
		return A7(func, a, b, c, d, e, f, g);
	});
});

var _VirtualDom_lazy8 = F9(function(func, a, b, c, d, e, f, g, h)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g, h], function() {
		return A8(func, a, b, c, d, e, f, g, h);
	});
});



// FACTS


var _VirtualDom_on = F2(function(key, handler)
{
	return {
		$: 'a0',
		n: key,
		o: handler
	};
});
var _VirtualDom_style = F2(function(key, value)
{
	return {
		$: 'a1',
		n: key,
		o: value
	};
});
var _VirtualDom_property = F2(function(key, value)
{
	return {
		$: 'a2',
		n: key,
		o: value
	};
});
var _VirtualDom_attribute = F2(function(key, value)
{
	return {
		$: 'a3',
		n: key,
		o: value
	};
});
var _VirtualDom_attributeNS = F3(function(namespace, key, value)
{
	return {
		$: 'a4',
		n: key,
		o: { f: namespace, o: value }
	};
});



// XSS ATTACK VECTOR CHECKS


function _VirtualDom_noScript(tag)
{
	return tag == 'script' ? 'p' : tag;
}

function _VirtualDom_noOnOrFormAction(key)
{
	return /^(on|formAction$)/i.test(key) ? 'data-' + key : key;
}

function _VirtualDom_noInnerHtmlOrFormAction(key)
{
	return key == 'innerHTML' || key == 'formAction' ? 'data-' + key : key;
}

function _VirtualDom_noJavaScriptUri_UNUSED(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,'')) ? '' : value;
}

function _VirtualDom_noJavaScriptUri(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,''))
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}

function _VirtualDom_noJavaScriptOrHtmlUri_UNUSED(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value) ? '' : value;
}

function _VirtualDom_noJavaScriptOrHtmlUri(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value)
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}



// MAP FACTS


var _VirtualDom_mapAttribute = F2(function(func, attr)
{
	return (attr.$ === 'a0')
		? A2(_VirtualDom_on, attr.n, _VirtualDom_mapHandler(func, attr.o))
		: attr;
});

function _VirtualDom_mapHandler(func, handler)
{
	var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

	// 0 = Normal
	// 1 = MayStopPropagation
	// 2 = MayPreventDefault
	// 3 = Custom

	return {
		$: handler.$,
		a:
			!tag
				? A2($elm$json$Json$Decode$map, func, handler.a)
				:
			A3($elm$json$Json$Decode$map2,
				tag < 3
					? _VirtualDom_mapEventTuple
					: _VirtualDom_mapEventRecord,
				$elm$json$Json$Decode$succeed(func),
				handler.a
			)
	};
}

var _VirtualDom_mapEventTuple = F2(function(func, tuple)
{
	return _Utils_Tuple2(func(tuple.a), tuple.b);
});

var _VirtualDom_mapEventRecord = F2(function(func, record)
{
	return {
		message: func(record.message),
		stopPropagation: record.stopPropagation,
		preventDefault: record.preventDefault
	}
});



// ORGANIZE FACTS


function _VirtualDom_organizeFacts(factList)
{
	for (var facts = {}; factList.b; factList = factList.b) // WHILE_CONS
	{
		var entry = factList.a;

		var tag = entry.$;
		var key = entry.n;
		var value = entry.o;

		if (tag === 'a2')
		{
			(key === 'className')
				? _VirtualDom_addClass(facts, key, _Json_unwrap(value))
				: facts[key] = _Json_unwrap(value);

			continue;
		}

		var subFacts = facts[tag] || (facts[tag] = {});
		(tag === 'a3' && key === 'class')
			? _VirtualDom_addClass(subFacts, key, value)
			: subFacts[key] = value;
	}

	return facts;
}

function _VirtualDom_addClass(object, key, newClass)
{
	var classes = object[key];
	object[key] = classes ? classes + ' ' + newClass : newClass;
}



// RENDER


function _VirtualDom_render(vNode, eventNode)
{
	var tag = vNode.$;

	if (tag === 5)
	{
		return _VirtualDom_render(vNode.k || (vNode.k = vNode.m()), eventNode);
	}

	if (tag === 0)
	{
		return _VirtualDom_doc.createTextNode(vNode.a);
	}

	if (tag === 4)
	{
		var subNode = vNode.k;
		var tagger = vNode.j;

		while (subNode.$ === 4)
		{
			typeof tagger !== 'object'
				? tagger = [tagger, subNode.j]
				: tagger.push(subNode.j);

			subNode = subNode.k;
		}

		var subEventRoot = { j: tagger, p: eventNode };
		var domNode = _VirtualDom_render(subNode, subEventRoot);
		domNode.elm_event_node_ref = subEventRoot;
		return domNode;
	}

	if (tag === 3)
	{
		var domNode = vNode.h(vNode.g);
		_VirtualDom_applyFacts(domNode, eventNode, vNode.d);
		return domNode;
	}

	// at this point `tag` must be 1 or 2

	var domNode = vNode.f
		? _VirtualDom_doc.createElementNS(vNode.f, vNode.c)
		: _VirtualDom_doc.createElement(vNode.c);

	if (_VirtualDom_divertHrefToApp && vNode.c == 'a')
	{
		domNode.addEventListener('click', _VirtualDom_divertHrefToApp(domNode));
	}

	_VirtualDom_applyFacts(domNode, eventNode, vNode.d);

	for (var kids = vNode.e, i = 0; i < kids.length; i++)
	{
		_VirtualDom_appendChild(domNode, _VirtualDom_render(tag === 1 ? kids[i] : kids[i].b, eventNode));
	}

	return domNode;
}



// APPLY FACTS


function _VirtualDom_applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		key === 'a1'
			? _VirtualDom_applyStyles(domNode, value)
			:
		key === 'a0'
			? _VirtualDom_applyEvents(domNode, eventNode, value)
			:
		key === 'a3'
			? _VirtualDom_applyAttrs(domNode, value)
			:
		key === 'a4'
			? _VirtualDom_applyAttrsNS(domNode, value)
			:
		((key !== 'value' && key !== 'checked') || domNode[key] !== value) && (domNode[key] = value);
	}
}



// APPLY STYLES


function _VirtualDom_applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}



// APPLY ATTRS


function _VirtualDom_applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		typeof value !== 'undefined'
			? domNode.setAttribute(key, value)
			: domNode.removeAttribute(key);
	}
}



// APPLY NAMESPACED ATTRS


function _VirtualDom_applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.f;
		var value = pair.o;

		typeof value !== 'undefined'
			? domNode.setAttributeNS(namespace, key, value)
			: domNode.removeAttributeNS(namespace, key);
	}
}



// APPLY EVENTS


function _VirtualDom_applyEvents(domNode, eventNode, events)
{
	var allCallbacks = domNode.elmFs || (domNode.elmFs = {});

	for (var key in events)
	{
		var newHandler = events[key];
		var oldCallback = allCallbacks[key];

		if (!newHandler)
		{
			domNode.removeEventListener(key, oldCallback);
			allCallbacks[key] = undefined;
			continue;
		}

		if (oldCallback)
		{
			var oldHandler = oldCallback.q;
			if (oldHandler.$ === newHandler.$)
			{
				oldCallback.q = newHandler;
				continue;
			}
			domNode.removeEventListener(key, oldCallback);
		}

		oldCallback = _VirtualDom_makeCallback(eventNode, newHandler);
		domNode.addEventListener(key, oldCallback,
			_VirtualDom_passiveSupported
			&& { passive: $elm$virtual_dom$VirtualDom$toHandlerInt(newHandler) < 2 }
		);
		allCallbacks[key] = oldCallback;
	}
}



// PASSIVE EVENTS


var _VirtualDom_passiveSupported;

try
{
	window.addEventListener('t', null, Object.defineProperty({}, 'passive', {
		get: function() { _VirtualDom_passiveSupported = true; }
	}));
}
catch(e) {}



// EVENT HANDLERS


function _VirtualDom_makeCallback(eventNode, initialHandler)
{
	function callback(event)
	{
		var handler = callback.q;
		var result = _Json_runHelp(handler.a, event);

		if (!$elm$core$Result$isOk(result))
		{
			return;
		}

		var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

		// 0 = Normal
		// 1 = MayStopPropagation
		// 2 = MayPreventDefault
		// 3 = Custom

		var value = result.a;
		var message = !tag ? value : tag < 3 ? value.a : value.message;
		var stopPropagation = tag == 1 ? value.b : tag == 3 && value.stopPropagation;
		var currentEventNode = (
			stopPropagation && event.stopPropagation(),
			(tag == 2 ? value.b : tag == 3 && value.preventDefault) && event.preventDefault(),
			eventNode
		);
		var tagger;
		var i;
		while (tagger = currentEventNode.j)
		{
			if (typeof tagger == 'function')
			{
				message = tagger(message);
			}
			else
			{
				for (var i = tagger.length; i--; )
				{
					message = tagger[i](message);
				}
			}
			currentEventNode = currentEventNode.p;
		}
		currentEventNode(message, stopPropagation); // stopPropagation implies isSync
	}

	callback.q = initialHandler;

	return callback;
}

function _VirtualDom_equalEvents(x, y)
{
	return x.$ == y.$ && _Json_equality(x.a, y.a);
}



// DIFF


// TODO: Should we do patches like in iOS?
//
// type Patch
//   = At Int Patch
//   | Batch (List Patch)
//   | Change ...
//
// How could it not be better?
//
function _VirtualDom_diff(x, y)
{
	var patches = [];
	_VirtualDom_diffHelp(x, y, patches, 0);
	return patches;
}


function _VirtualDom_pushPatch(patches, type, index, data)
{
	var patch = {
		$: type,
		r: index,
		s: data,
		t: undefined,
		u: undefined
	};
	patches.push(patch);
	return patch;
}


function _VirtualDom_diffHelp(x, y, patches, index)
{
	if (x === y)
	{
		return;
	}

	var xType = x.$;
	var yType = y.$;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (xType !== yType)
	{
		if (xType === 1 && yType === 2)
		{
			y = _VirtualDom_dekey(y);
			yType = 1;
		}
		else
		{
			_VirtualDom_pushPatch(patches, 0, index, y);
			return;
		}
	}

	// Now we know that both nodes are the same $.
	switch (yType)
	{
		case 5:
			var xRefs = x.l;
			var yRefs = y.l;
			var i = xRefs.length;
			var same = i === yRefs.length;
			while (same && i--)
			{
				same = xRefs[i] === yRefs[i];
			}
			if (same)
			{
				y.k = x.k;
				return;
			}
			y.k = y.m();
			var subPatches = [];
			_VirtualDom_diffHelp(x.k, y.k, subPatches, 0);
			subPatches.length > 0 && _VirtualDom_pushPatch(patches, 1, index, subPatches);
			return;

		case 4:
			// gather nested taggers
			var xTaggers = x.j;
			var yTaggers = y.j;
			var nesting = false;

			var xSubNode = x.k;
			while (xSubNode.$ === 4)
			{
				nesting = true;

				typeof xTaggers !== 'object'
					? xTaggers = [xTaggers, xSubNode.j]
					: xTaggers.push(xSubNode.j);

				xSubNode = xSubNode.k;
			}

			var ySubNode = y.k;
			while (ySubNode.$ === 4)
			{
				nesting = true;

				typeof yTaggers !== 'object'
					? yTaggers = [yTaggers, ySubNode.j]
					: yTaggers.push(ySubNode.j);

				ySubNode = ySubNode.k;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && xTaggers.length !== yTaggers.length)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !_VirtualDom_pairwiseRefEqual(xTaggers, yTaggers) : xTaggers !== yTaggers)
			{
				_VirtualDom_pushPatch(patches, 2, index, yTaggers);
			}

			// diff everything below the taggers
			_VirtualDom_diffHelp(xSubNode, ySubNode, patches, index + 1);
			return;

		case 0:
			if (x.a !== y.a)
			{
				_VirtualDom_pushPatch(patches, 3, index, y.a);
			}
			return;

		case 1:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKids);
			return;

		case 2:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKeyedKids);
			return;

		case 3:
			if (x.h !== y.h)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
			factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

			var patch = y.i(x.g, y.g);
			patch && _VirtualDom_pushPatch(patches, 5, index, patch);

			return;
	}
}

// assumes the incoming arrays are the same length
function _VirtualDom_pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}

function _VirtualDom_diffNodes(x, y, patches, index, diffKids)
{
	// Bail if obvious indicators have changed. Implies more serious
	// structural changes such that it's not worth it to diff.
	if (x.c !== y.c || x.f !== y.f)
	{
		_VirtualDom_pushPatch(patches, 0, index, y);
		return;
	}

	var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
	factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

	diffKids(x, y, patches, index);
}



// DIFF FACTS


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function _VirtualDom_diffFacts(x, y, category)
{
	var diff;

	// look for changes and removals
	for (var xKey in x)
	{
		if (xKey === 'a1' || xKey === 'a0' || xKey === 'a3' || xKey === 'a4')
		{
			var subDiff = _VirtualDom_diffFacts(x[xKey], y[xKey] || {}, xKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[xKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(xKey in y))
		{
			diff = diff || {};
			diff[xKey] =
				!category
					? (typeof x[xKey] === 'string' ? '' : null)
					:
				(category === 'a1')
					? ''
					:
				(category === 'a0' || category === 'a3')
					? undefined
					:
				{ f: x[xKey].f, o: undefined };

			continue;
		}

		var xValue = x[xKey];
		var yValue = y[xKey];

		// reference equal, so don't worry about it
		if (xValue === yValue && xKey !== 'value' && xKey !== 'checked'
			|| category === 'a0' && _VirtualDom_equalEvents(xValue, yValue))
		{
			continue;
		}

		diff = diff || {};
		diff[xKey] = yValue;
	}

	// add new stuff
	for (var yKey in y)
	{
		if (!(yKey in x))
		{
			diff = diff || {};
			diff[yKey] = y[yKey];
		}
	}

	return diff;
}



// DIFF KIDS


function _VirtualDom_diffKids(xParent, yParent, patches, index)
{
	var xKids = xParent.e;
	var yKids = yParent.e;

	var xLen = xKids.length;
	var yLen = yKids.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (xLen > yLen)
	{
		_VirtualDom_pushPatch(patches, 6, index, {
			v: yLen,
			i: xLen - yLen
		});
	}
	else if (xLen < yLen)
	{
		_VirtualDom_pushPatch(patches, 7, index, {
			v: xLen,
			e: yKids
		});
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	for (var minLen = xLen < yLen ? xLen : yLen, i = 0; i < minLen; i++)
	{
		var xKid = xKids[i];
		_VirtualDom_diffHelp(xKid, yKids[i], patches, ++index);
		index += xKid.b || 0;
	}
}



// KEYED DIFF


function _VirtualDom_diffKeyedKids(xParent, yParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var xKids = xParent.e;
	var yKids = yParent.e;
	var xLen = xKids.length;
	var yLen = yKids.length;
	var xIndex = 0;
	var yIndex = 0;

	var index = rootIndex;

	while (xIndex < xLen && yIndex < yLen)
	{
		var x = xKids[xIndex];
		var y = yKids[yIndex];

		var xKey = x.a;
		var yKey = y.a;
		var xNode = x.b;
		var yNode = y.b;

		var newMatch = undefined;
		var oldMatch = undefined;

		// check if keys match

		if (xKey === yKey)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNode, localPatches, index);
			index += xNode.b || 0;

			xIndex++;
			yIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var xNext = xKids[xIndex + 1];
		var yNext = yKids[yIndex + 1];

		if (xNext)
		{
			var xNextKey = xNext.a;
			var xNextNode = xNext.b;
			oldMatch = yKey === xNextKey;
		}

		if (yNext)
		{
			var yNextKey = yNext.a;
			var yNextNode = yNext.b;
			newMatch = xKey === yNextKey;
		}


		// swap x and y
		if (newMatch && oldMatch)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			_VirtualDom_insertNode(changes, localPatches, xKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNextNode, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		// insert y
		if (newMatch)
		{
			index++;
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			index += xNode.b || 0;

			xIndex += 1;
			yIndex += 2;
			continue;
		}

		// remove x
		if (oldMatch)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 1;
			continue;
		}

		// remove x, insert y
		if (xNext && xNextKey === yNextKey)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNextNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (xIndex < xLen)
	{
		index++;
		var x = xKids[xIndex];
		var xNode = x.b;
		_VirtualDom_removeNode(changes, localPatches, x.a, xNode, index);
		index += xNode.b || 0;
		xIndex++;
	}

	while (yIndex < yLen)
	{
		var endInserts = endInserts || [];
		var y = yKids[yIndex];
		_VirtualDom_insertNode(changes, localPatches, y.a, y.b, undefined, endInserts);
		yIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || endInserts)
	{
		_VirtualDom_pushPatch(patches, 8, rootIndex, {
			w: localPatches,
			x: inserts,
			y: endInserts
		});
	}
}



// CHANGES FROM KEYED DIFF


var _VirtualDom_POSTFIX = '_elmW6BL';


function _VirtualDom_insertNode(changes, localPatches, key, vnode, yIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		entry = {
			c: 0,
			z: vnode,
			r: yIndex,
			s: undefined
		};

		inserts.push({ r: yIndex, A: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.c === 1)
	{
		inserts.push({ r: yIndex, A: entry });

		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(entry.z, vnode, subPatches, entry.r);
		entry.r = yIndex;
		entry.s.s = {
			w: subPatches,
			A: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	_VirtualDom_insertNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, yIndex, inserts);
}


function _VirtualDom_removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		var patch = _VirtualDom_pushPatch(localPatches, 9, index, undefined);

		changes[key] = {
			c: 1,
			z: vnode,
			r: index,
			s: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.c === 0)
	{
		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(vnode, entry.z, subPatches, index);

		_VirtualDom_pushPatch(localPatches, 9, index, {
			w: subPatches,
			A: entry
		});

		return;
	}

	// this key has already been removed or moved, a duplicate!
	_VirtualDom_removeNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, index);
}



// ADD DOM NODES
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function _VirtualDom_addDomNodes(domNode, vNode, patches, eventNode)
{
	_VirtualDom_addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.b, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function _VirtualDom_addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.r;

	while (index === low)
	{
		var patchType = patch.$;

		if (patchType === 1)
		{
			_VirtualDom_addDomNodes(domNode, vNode.k, patch.s, eventNode);
		}
		else if (patchType === 8)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var subPatches = patch.s.w;
			if (subPatches.length > 0)
			{
				_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 9)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var data = patch.s;
			if (data)
			{
				data.A.s = domNode;
				var subPatches = data.w;
				if (subPatches.length > 0)
				{
					_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.t = domNode;
			patch.u = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.r) > high)
		{
			return i;
		}
	}

	var tag = vNode.$;

	if (tag === 4)
	{
		var subNode = vNode.k;

		while (subNode.$ === 4)
		{
			subNode = subNode.k;
		}

		return _VirtualDom_addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);
	}

	// tag must be 1 or 2 at this point

	var vKids = vNode.e;
	var childNodes = domNode.childNodes;
	for (var j = 0; j < vKids.length; j++)
	{
		low++;
		var vKid = tag === 1 ? vKids[j] : vKids[j].b;
		var nextLow = low + (vKid.b || 0);
		if (low <= index && index <= nextLow)
		{
			i = _VirtualDom_addDomNodesHelp(childNodes[j], vKid, patches, i, low, nextLow, eventNode);
			if (!(patch = patches[i]) || (index = patch.r) > high)
			{
				return i;
			}
		}
		low = nextLow;
	}
	return i;
}



// APPLY PATCHES


function _VirtualDom_applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	_VirtualDom_addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return _VirtualDom_applyPatchesHelp(rootDomNode, patches);
}

function _VirtualDom_applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.t
		var newNode = _VirtualDom_applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function _VirtualDom_applyPatch(domNode, patch)
{
	switch (patch.$)
	{
		case 0:
			return _VirtualDom_applyPatchRedraw(domNode, patch.s, patch.u);

		case 4:
			_VirtualDom_applyFacts(domNode, patch.u, patch.s);
			return domNode;

		case 3:
			domNode.replaceData(0, domNode.length, patch.s);
			return domNode;

		case 1:
			return _VirtualDom_applyPatchesHelp(domNode, patch.s);

		case 2:
			if (domNode.elm_event_node_ref)
			{
				domNode.elm_event_node_ref.j = patch.s;
			}
			else
			{
				domNode.elm_event_node_ref = { j: patch.s, p: patch.u };
			}
			return domNode;

		case 6:
			var data = patch.s;
			for (var i = 0; i < data.i; i++)
			{
				domNode.removeChild(domNode.childNodes[data.v]);
			}
			return domNode;

		case 7:
			var data = patch.s;
			var kids = data.e;
			var i = data.v;
			var theEnd = domNode.childNodes[i];
			for (; i < kids.length; i++)
			{
				domNode.insertBefore(_VirtualDom_render(kids[i], patch.u), theEnd);
			}
			return domNode;

		case 9:
			var data = patch.s;
			if (!data)
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.A;
			if (typeof entry.r !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.s = _VirtualDom_applyPatchesHelp(domNode, data.w);
			return domNode;

		case 8:
			return _VirtualDom_applyPatchReorder(domNode, patch);

		case 5:
			return patch.s(domNode);

		default:
			_Debug_crash(10); // 'Ran into an unknown patch!'
	}
}


function _VirtualDom_applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = _VirtualDom_render(vNode, eventNode);

	if (!newNode.elm_event_node_ref)
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function _VirtualDom_applyPatchReorder(domNode, patch)
{
	var data = patch.s;

	// remove end inserts
	var frag = _VirtualDom_applyPatchReorderEndInsertsHelp(data.y, patch);

	// removals
	domNode = _VirtualDom_applyPatchesHelp(domNode, data.w);

	// inserts
	var inserts = data.x;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.A;
		var node = entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u);
		domNode.insertBefore(node, domNode.childNodes[insert.r]);
	}

	// add end inserts
	if (frag)
	{
		_VirtualDom_appendChild(domNode, frag);
	}

	return domNode;
}


function _VirtualDom_applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (!endInserts)
	{
		return;
	}

	var frag = _VirtualDom_doc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.A;
		_VirtualDom_appendChild(frag, entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u)
		);
	}
	return frag;
}


function _VirtualDom_virtualize(node)
{
	// TEXT NODES

	if (node.nodeType === 3)
	{
		return _VirtualDom_text(node.textContent);
	}


	// WEIRD NODES

	if (node.nodeType !== 1)
	{
		return _VirtualDom_text('');
	}


	// ELEMENT NODES

	var attrList = _List_Nil;
	var attrs = node.attributes;
	for (var i = attrs.length; i--; )
	{
		var attr = attrs[i];
		var name = attr.name;
		var value = attr.value;
		attrList = _List_Cons( A2(_VirtualDom_attribute, name, value), attrList );
	}

	var tag = node.tagName.toLowerCase();
	var kidList = _List_Nil;
	var kids = node.childNodes;

	for (var i = kids.length; i--; )
	{
		kidList = _List_Cons(_VirtualDom_virtualize(kids[i]), kidList);
	}
	return A3(_VirtualDom_node, tag, attrList, kidList);
}

function _VirtualDom_dekey(keyedNode)
{
	var keyedKids = keyedNode.e;
	var len = keyedKids.length;
	var kids = new Array(len);
	for (var i = 0; i < len; i++)
	{
		kids[i] = keyedKids[i].b;
	}

	return {
		$: 1,
		c: keyedNode.c,
		d: keyedNode.d,
		e: kids,
		f: keyedNode.f,
		b: keyedNode.b
	};
}



var _Bitwise_and = F2(function(a, b)
{
	return a & b;
});

var _Bitwise_or = F2(function(a, b)
{
	return a | b;
});

var _Bitwise_xor = F2(function(a, b)
{
	return a ^ b;
});

function _Bitwise_complement(a)
{
	return ~a;
};

var _Bitwise_shiftLeftBy = F2(function(offset, a)
{
	return a << offset;
});

var _Bitwise_shiftRightBy = F2(function(offset, a)
{
	return a >> offset;
});

var _Bitwise_shiftRightZfBy = F2(function(offset, a)
{
	return a >>> offset;
});




// HELPERS


function _Debugger_unsafeCoerce(value)
{
	return value;
}



// PROGRAMS


var _Debugger_element = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		A3($elm$browser$Debugger$Main$wrapInit, _Json_wrap(debugMetadata), _Debugger_popout(), impl.init),
		$elm$browser$Debugger$Main$wrapUpdate(impl.update),
		$elm$browser$Debugger$Main$wrapSubs(impl.subscriptions),
		function(sendToApp, initialModel)
		{
			var view = impl.view;
			var title = _VirtualDom_doc.title;
			var domNode = args && args['node'] ? args['node'] : _Debug_crash(0);
			var currNode = _VirtualDom_virtualize(domNode);
			var currBlocker = $elm$browser$Debugger$Main$toBlockerType(initialModel);
			var currPopout;

			var cornerNode = _VirtualDom_doc.createElement('div');
			domNode.parentNode.insertBefore(cornerNode, domNode.nextSibling);
			var cornerCurr = _VirtualDom_virtualize(cornerNode);

			initialModel.popout.a = sendToApp;

			return _Browser_makeAnimator(initialModel, function(model)
			{
				var nextNode = A2(_VirtualDom_map, $elm$browser$Debugger$Main$UserMsg, view($elm$browser$Debugger$Main$getUserModel(model)));
				var patches = _VirtualDom_diff(currNode, nextNode);
				domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
				currNode = nextNode;

				// update blocker

				var nextBlocker = $elm$browser$Debugger$Main$toBlockerType(model);
				_Debugger_updateBlocker(currBlocker, nextBlocker);
				currBlocker = nextBlocker;

				// view corner

				var cornerNext = $elm$browser$Debugger$Main$cornerView(model);
				var cornerPatches = _VirtualDom_diff(cornerCurr, cornerNext);
				cornerNode = _VirtualDom_applyPatches(cornerNode, cornerCurr, cornerPatches, sendToApp);
				cornerCurr = cornerNext;

				if (!model.popout.b)
				{
					currPopout = undefined;
					return;
				}

				// view popout

				_VirtualDom_doc = model.popout.b; // SWITCH TO POPOUT DOC
				currPopout || (currPopout = _VirtualDom_virtualize(model.popout.b));
				var nextPopout = $elm$browser$Debugger$Main$popoutView(model);
				var popoutPatches = _VirtualDom_diff(currPopout, nextPopout);
				_VirtualDom_applyPatches(model.popout.b.body, currPopout, popoutPatches, sendToApp);
				currPopout = nextPopout;
				_VirtualDom_doc = document; // SWITCH BACK TO NORMAL DOC
			});
		}
	);
});


var _Debugger_document = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		A3($elm$browser$Debugger$Main$wrapInit, _Json_wrap(debugMetadata), _Debugger_popout(), impl.init),
		$elm$browser$Debugger$Main$wrapUpdate(impl.update),
		$elm$browser$Debugger$Main$wrapSubs(impl.subscriptions),
		function(sendToApp, initialModel)
		{
			var divertHrefToApp = impl.setup && impl.setup(function(x) { return sendToApp($elm$browser$Debugger$Main$UserMsg(x)); });
			var view = impl.view;
			var title = _VirtualDom_doc.title;
			var bodyNode = _VirtualDom_doc.body;
			var currNode = _VirtualDom_virtualize(bodyNode);
			var currBlocker = $elm$browser$Debugger$Main$toBlockerType(initialModel);
			var currPopout;

			initialModel.popout.a = sendToApp;

			return _Browser_makeAnimator(initialModel, function(model)
			{
				_VirtualDom_divertHrefToApp = divertHrefToApp;
				var doc = view($elm$browser$Debugger$Main$getUserModel(model));
				var nextNode = _VirtualDom_node('body')(_List_Nil)(
					_Utils_ap(
						A2($elm$core$List$map, _VirtualDom_map($elm$browser$Debugger$Main$UserMsg), doc.body),
						_List_Cons($elm$browser$Debugger$Main$cornerView(model), _List_Nil)
					)
				);
				var patches = _VirtualDom_diff(currNode, nextNode);
				bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
				currNode = nextNode;
				_VirtualDom_divertHrefToApp = 0;
				(title !== doc.title) && (_VirtualDom_doc.title = title = doc.title);

				// update blocker

				var nextBlocker = $elm$browser$Debugger$Main$toBlockerType(model);
				_Debugger_updateBlocker(currBlocker, nextBlocker);
				currBlocker = nextBlocker;

				// view popout

				if (!model.popout.b) { currPopout = undefined; return; }

				_VirtualDom_doc = model.popout.b; // SWITCH TO POPOUT DOC
				currPopout || (currPopout = _VirtualDom_virtualize(model.popout.b));
				var nextPopout = $elm$browser$Debugger$Main$popoutView(model);
				var popoutPatches = _VirtualDom_diff(currPopout, nextPopout);
				_VirtualDom_applyPatches(model.popout.b.body, currPopout, popoutPatches, sendToApp);
				currPopout = nextPopout;
				_VirtualDom_doc = document; // SWITCH BACK TO NORMAL DOC
			});
		}
	);
});


function _Debugger_popout()
{
	return {
		b: undefined,
		a: undefined
	};
}

function _Debugger_isOpen(popout)
{
	return !!popout.b;
}

function _Debugger_open(popout)
{
	return _Scheduler_binding(function(callback)
	{
		_Debugger_openWindow(popout);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}

function _Debugger_openWindow(popout)
{
	var w = $elm$browser$Debugger$Main$initialWindowWidth,
		h = $elm$browser$Debugger$Main$initialWindowHeight,
	 	x = screen.width - w,
		y = screen.height - h;

	var debuggerWindow = window.open('', '', 'width=' + w + ',height=' + h + ',left=' + x + ',top=' + y);
	var doc = debuggerWindow.document;
	doc.title = 'Elm Debugger';

	// handle arrow keys
	doc.addEventListener('keydown', function(event) {
		event.metaKey && event.which === 82 && window.location.reload();
		event.key === 'ArrowUp'   && (popout.a($elm$browser$Debugger$Main$Up  ), event.preventDefault());
		event.key === 'ArrowDown' && (popout.a($elm$browser$Debugger$Main$Down), event.preventDefault());
	});

	// handle window close
	window.addEventListener('unload', close);
	debuggerWindow.addEventListener('unload', function() {
		popout.b = undefined;
		popout.a($elm$browser$Debugger$Main$NoOp);
		window.removeEventListener('unload', close);
	});

	function close() {
		popout.b = undefined;
		popout.a($elm$browser$Debugger$Main$NoOp);
		debuggerWindow.close();
	}

	// register new window
	popout.b = doc;
}



// SCROLL


function _Debugger_scroll(popout)
{
	return _Scheduler_binding(function(callback)
	{
		if (popout.b)
		{
			var msgs = popout.b.getElementById('elm-debugger-sidebar');
			if (msgs && msgs.scrollTop !== 0)
			{
				msgs.scrollTop = 0;
			}
		}
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


var _Debugger_scrollTo = F2(function(id, popout)
{
	return _Scheduler_binding(function(callback)
	{
		if (popout.b)
		{
			var msg = popout.b.getElementById(id);
			if (msg)
			{
				msg.scrollIntoView(false);
			}
		}
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});



// UPLOAD


function _Debugger_upload(popout)
{
	return _Scheduler_binding(function(callback)
	{
		var doc = popout.b || document;
		var element = doc.createElement('input');
		element.setAttribute('type', 'file');
		element.setAttribute('accept', 'text/json');
		element.style.display = 'none';
		element.addEventListener('change', function(event)
		{
			var fileReader = new FileReader();
			fileReader.onload = function(e)
			{
				callback(_Scheduler_succeed(e.target.result));
			};
			fileReader.readAsText(event.target.files[0]);
			doc.body.removeChild(element);
		});
		doc.body.appendChild(element);
		element.click();
	});
}



// DOWNLOAD


var _Debugger_download = F2(function(historyLength, json)
{
	return _Scheduler_binding(function(callback)
	{
		var fileName = 'history-' + historyLength + '.txt';
		var jsonString = JSON.stringify(json);
		var mime = 'text/plain;charset=utf-8';
		var done = _Scheduler_succeed(_Utils_Tuple0);

		// for IE10+
		if (navigator.msSaveBlob)
		{
			navigator.msSaveBlob(new Blob([jsonString], {type: mime}), fileName);
			return callback(done);
		}

		// for HTML5
		var element = document.createElement('a');
		element.setAttribute('href', 'data:' + mime + ',' + encodeURIComponent(jsonString));
		element.setAttribute('download', fileName);
		element.style.display = 'none';
		document.body.appendChild(element);
		element.click();
		document.body.removeChild(element);
		callback(done);
	});
});



// POPOUT CONTENT


function _Debugger_messageToString(value)
{
	if (typeof value === 'boolean')
	{
		return value ? 'True' : 'False';
	}

	if (typeof value === 'number')
	{
		return value + '';
	}

	if (typeof value === 'string')
	{
		return '"' + _Debugger_addSlashes(value, false) + '"';
	}

	if (value instanceof String)
	{
		return "'" + _Debugger_addSlashes(value, true) + "'";
	}

	if (typeof value !== 'object' || value === null || !('$' in value))
	{
		return '…';
	}

	if (typeof value.$ === 'number')
	{
		return '…';
	}

	var code = value.$.charCodeAt(0);
	if (code === 0x23 /* # */ || /* a */ 0x61 <= code && code <= 0x7A /* z */)
	{
		return '…';
	}

	if (['Array_elm_builtin', 'Set_elm_builtin', 'RBNode_elm_builtin', 'RBEmpty_elm_builtin'].indexOf(value.$) >= 0)
	{
		return '…';
	}

	var keys = Object.keys(value);
	switch (keys.length)
	{
		case 1:
			return value.$;
		case 2:
			return value.$ + ' ' + _Debugger_messageToString(value.a);
		default:
			return value.$ + ' … ' + _Debugger_messageToString(value[keys[keys.length - 1]]);
	}
}


function _Debugger_init(value)
{
	if (typeof value === 'boolean')
	{
		return A3($elm$browser$Debugger$Expando$Constructor, $elm$core$Maybe$Just(value ? 'True' : 'False'), true, _List_Nil);
	}

	if (typeof value === 'number')
	{
		return $elm$browser$Debugger$Expando$Primitive(value + '');
	}

	if (typeof value === 'string')
	{
		return $elm$browser$Debugger$Expando$S('"' + _Debugger_addSlashes(value, false) + '"');
	}

	if (value instanceof String)
	{
		return $elm$browser$Debugger$Expando$S("'" + _Debugger_addSlashes(value, true) + "'");
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (tag === '::' || tag === '[]')
		{
			return A3($elm$browser$Debugger$Expando$Sequence, $elm$browser$Debugger$Expando$ListSeq, true,
				A2($elm$core$List$map, _Debugger_init, value)
			);
		}

		if (tag === 'Set_elm_builtin')
		{
			return A3($elm$browser$Debugger$Expando$Sequence, $elm$browser$Debugger$Expando$SetSeq, true,
				A3($elm$core$Set$foldr, _Debugger_initCons, _List_Nil, value)
			);
		}

		if (tag === 'RBNode_elm_builtin' || tag == 'RBEmpty_elm_builtin')
		{
			return A2($elm$browser$Debugger$Expando$Dictionary, true,
				A3($elm$core$Dict$foldr, _Debugger_initKeyValueCons, _List_Nil, value)
			);
		}

		if (tag === 'Array_elm_builtin')
		{
			return A3($elm$browser$Debugger$Expando$Sequence, $elm$browser$Debugger$Expando$ArraySeq, true,
				A3($elm$core$Array$foldr, _Debugger_initCons, _List_Nil, value)
			);
		}

		if (typeof tag === 'number')
		{
			return $elm$browser$Debugger$Expando$Primitive('<internals>');
		}

		var char = tag.charCodeAt(0);
		if (char === 35 || 65 <= char && char <= 90)
		{
			var list = _List_Nil;
			for (var i in value)
			{
				if (i === '$') continue;
				list = _List_Cons(_Debugger_init(value[i]), list);
			}
			return A3($elm$browser$Debugger$Expando$Constructor, char === 35 ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(tag), true, $elm$core$List$reverse(list));
		}

		return $elm$browser$Debugger$Expando$Primitive('<internals>');
	}

	if (typeof value === 'object')
	{
		var dict = $elm$core$Dict$empty;
		for (var i in value)
		{
			dict = A3($elm$core$Dict$insert, i, _Debugger_init(value[i]), dict);
		}
		return A2($elm$browser$Debugger$Expando$Record, true, dict);
	}

	return $elm$browser$Debugger$Expando$Primitive('<internals>');
}

var _Debugger_initCons = F2(function initConsHelp(value, list)
{
	return _List_Cons(_Debugger_init(value), list);
});

var _Debugger_initKeyValueCons = F3(function(key, value, list)
{
	return _List_Cons(
		_Utils_Tuple2(_Debugger_init(key), _Debugger_init(value)),
		list
	);
});

function _Debugger_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');
	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}



// BLOCK EVENTS


function _Debugger_updateBlocker(oldBlocker, newBlocker)
{
	if (oldBlocker === newBlocker) return;

	var oldEvents = _Debugger_blockerToEvents(oldBlocker);
	var newEvents = _Debugger_blockerToEvents(newBlocker);

	// remove old blockers
	for (var i = 0; i < oldEvents.length; i++)
	{
		document.removeEventListener(oldEvents[i], _Debugger_blocker, true);
	}

	// add new blockers
	for (var i = 0; i < newEvents.length; i++)
	{
		document.addEventListener(newEvents[i], _Debugger_blocker, true);
	}
}


function _Debugger_blocker(event)
{
	if (event.type === 'keydown' && event.metaKey && event.which === 82)
	{
		return;
	}

	var isScroll = event.type === 'scroll' || event.type === 'wheel';
	for (var node = event.target; node; node = node.parentNode)
	{
		if (isScroll ? node.id === 'elm-debugger-details' : node.id === 'elm-debugger-overlay')
		{
			return;
		}
	}

	event.stopPropagation();
	event.preventDefault();
}

function _Debugger_blockerToEvents(blocker)
{
	return blocker === $elm$browser$Debugger$Overlay$BlockNone
		? []
		: blocker === $elm$browser$Debugger$Overlay$BlockMost
			? _Debugger_mostEvents
			: _Debugger_allEvents;
}

var _Debugger_mostEvents = [
	'click', 'dblclick', 'mousemove',
	'mouseup', 'mousedown', 'mouseenter', 'mouseleave',
	'touchstart', 'touchend', 'touchcancel', 'touchmove',
	'pointerdown', 'pointerup', 'pointerover', 'pointerout',
	'pointerenter', 'pointerleave', 'pointermove', 'pointercancel',
	'dragstart', 'drag', 'dragend', 'dragenter', 'dragover', 'dragleave', 'drop',
	'keyup', 'keydown', 'keypress',
	'input', 'change',
	'focus', 'blur'
];

var _Debugger_allEvents = _Debugger_mostEvents.concat('wheel', 'scroll');




// ELEMENT


var _Debugger_element;

var _Browser_element = _Debugger_element || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var view = impl.view;
			/**_UNUSED/
			var domNode = args['node'];
			//*/
			/**/
			var domNode = args && args['node'] ? args['node'] : _Debug_crash(0);
			//*/
			var currNode = _VirtualDom_virtualize(domNode);

			return _Browser_makeAnimator(initialModel, function(model)
			{
				var nextNode = view(model);
				var patches = _VirtualDom_diff(currNode, nextNode);
				domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
				currNode = nextNode;
			});
		}
	);
});



// DOCUMENT


var _Debugger_document;

var _Browser_document = _Debugger_document || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var divertHrefToApp = impl.setup && impl.setup(sendToApp)
			var view = impl.view;
			var title = _VirtualDom_doc.title;
			var bodyNode = _VirtualDom_doc.body;
			var currNode = _VirtualDom_virtualize(bodyNode);
			return _Browser_makeAnimator(initialModel, function(model)
			{
				_VirtualDom_divertHrefToApp = divertHrefToApp;
				var doc = view(model);
				var nextNode = _VirtualDom_node('body')(_List_Nil)(doc.body);
				var patches = _VirtualDom_diff(currNode, nextNode);
				bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
				currNode = nextNode;
				_VirtualDom_divertHrefToApp = 0;
				(title !== doc.title) && (_VirtualDom_doc.title = title = doc.title);
			});
		}
	);
});



// ANIMATION


var _Browser_cancelAnimationFrame =
	typeof cancelAnimationFrame !== 'undefined'
		? cancelAnimationFrame
		: function(id) { clearTimeout(id); };

var _Browser_requestAnimationFrame =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { return setTimeout(callback, 1000 / 60); };


function _Browser_makeAnimator(model, draw)
{
	draw(model);

	var state = 0;

	function updateIfNeeded()
	{
		state = state === 1
			? 0
			: ( _Browser_requestAnimationFrame(updateIfNeeded), draw(model), 1 );
	}

	return function(nextModel, isSync)
	{
		model = nextModel;

		isSync
			? ( draw(model),
				state === 2 && (state = 1)
				)
			: ( state === 0 && _Browser_requestAnimationFrame(updateIfNeeded),
				state = 2
				);
	};
}



// APPLICATION


function _Browser_application(impl)
{
	var onUrlChange = impl.onUrlChange;
	var onUrlRequest = impl.onUrlRequest;
	var key = function() { key.a(onUrlChange(_Browser_getUrl())); };
key['elm-hot-nav-key'] = true

	return _Browser_document({
		setup: function(sendToApp)
		{
			key.a = sendToApp;
			_Browser_window.addEventListener('popstate', key);
			_Browser_window.navigator.userAgent.indexOf('Trident') < 0 || _Browser_window.addEventListener('hashchange', key);

			return F2(function(domNode, event)
			{
				if (!event.ctrlKey && !event.metaKey && !event.shiftKey && event.button < 1 && !domNode.target && !domNode.hasAttribute('download'))
				{
					event.preventDefault();
					var href = domNode.href;
					var curr = _Browser_getUrl();
					var next = $elm$url$Url$fromString(href).a;
					sendToApp(onUrlRequest(
						(next
							&& curr.protocol === next.protocol
							&& curr.host === next.host
							&& curr.port_.a === next.port_.a
						)
							? $elm$browser$Browser$Internal(next)
							: $elm$browser$Browser$External(href)
					));
				}
			});
		},
		init: function(flags)
		{
			return A3(impl.init, flags, _Browser_getUrl(), key);
		},
		view: impl.view,
		update: impl.update,
		subscriptions: impl.subscriptions
	});
}

function _Browser_getUrl()
{
	return $elm$url$Url$fromString(_VirtualDom_doc.location.href).a || _Debug_crash(1);
}

var _Browser_go = F2(function(key, n)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		n && history.go(n);
		key();
	}));
});

var _Browser_pushUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.pushState({}, '', url);
		key();
	}));
});

var _Browser_replaceUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.replaceState({}, '', url);
		key();
	}));
});



// GLOBAL EVENTS


var _Browser_fakeNode = { addEventListener: function() {}, removeEventListener: function() {} };
var _Browser_doc = typeof document !== 'undefined' ? document : _Browser_fakeNode;
var _Browser_window = typeof window !== 'undefined' ? window : _Browser_fakeNode;

var _Browser_on = F3(function(node, eventName, sendToSelf)
{
	return _Scheduler_spawn(_Scheduler_binding(function(callback)
	{
		function handler(event)	{ _Scheduler_rawSpawn(sendToSelf(event)); }
		node.addEventListener(eventName, handler, _VirtualDom_passiveSupported && { passive: true });
		return function() { node.removeEventListener(eventName, handler); };
	}));
});

var _Browser_decodeEvent = F2(function(decoder, event)
{
	var result = _Json_runHelp(decoder, event);
	return $elm$core$Result$isOk(result) ? $elm$core$Maybe$Just(result.a) : $elm$core$Maybe$Nothing;
});



// PAGE VISIBILITY


function _Browser_visibilityInfo()
{
	return (typeof _VirtualDom_doc.hidden !== 'undefined')
		? { hidden: 'hidden', change: 'visibilitychange' }
		:
	(typeof _VirtualDom_doc.mozHidden !== 'undefined')
		? { hidden: 'mozHidden', change: 'mozvisibilitychange' }
		:
	(typeof _VirtualDom_doc.msHidden !== 'undefined')
		? { hidden: 'msHidden', change: 'msvisibilitychange' }
		:
	(typeof _VirtualDom_doc.webkitHidden !== 'undefined')
		? { hidden: 'webkitHidden', change: 'webkitvisibilitychange' }
		: { hidden: 'hidden', change: 'visibilitychange' };
}



// ANIMATION FRAMES


function _Browser_rAF()
{
	return _Scheduler_binding(function(callback)
	{
		var id = _Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(Date.now()));
		});

		return function() {
			_Browser_cancelAnimationFrame(id);
		};
	});
}


function _Browser_now()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(Date.now()));
	});
}



// DOM STUFF


function _Browser_withNode(id, doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			var node = document.getElementById(id);
			callback(node
				? _Scheduler_succeed(doStuff(node))
				: _Scheduler_fail($elm$browser$Browser$Dom$NotFound(id))
			);
		});
	});
}


function _Browser_withWindow(doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(doStuff()));
		});
	});
}


// FOCUS and BLUR


var _Browser_call = F2(function(functionName, id)
{
	return _Browser_withNode(id, function(node) {
		node[functionName]();
		return _Utils_Tuple0;
	});
});



// WINDOW VIEWPORT


function _Browser_getViewport()
{
	return {
		scene: _Browser_getScene(),
		viewport: {
			x: _Browser_window.pageXOffset,
			y: _Browser_window.pageYOffset,
			width: _Browser_doc.documentElement.clientWidth,
			height: _Browser_doc.documentElement.clientHeight
		}
	};
}

function _Browser_getScene()
{
	var body = _Browser_doc.body;
	var elem = _Browser_doc.documentElement;
	return {
		width: Math.max(body.scrollWidth, body.offsetWidth, elem.scrollWidth, elem.offsetWidth, elem.clientWidth),
		height: Math.max(body.scrollHeight, body.offsetHeight, elem.scrollHeight, elem.offsetHeight, elem.clientHeight)
	};
}

var _Browser_setViewport = F2(function(x, y)
{
	return _Browser_withWindow(function()
	{
		_Browser_window.scroll(x, y);
		return _Utils_Tuple0;
	});
});



// ELEMENT VIEWPORT


function _Browser_getViewportOf(id)
{
	return _Browser_withNode(id, function(node)
	{
		return {
			scene: {
				width: node.scrollWidth,
				height: node.scrollHeight
			},
			viewport: {
				x: node.scrollLeft,
				y: node.scrollTop,
				width: node.clientWidth,
				height: node.clientHeight
			}
		};
	});
}


var _Browser_setViewportOf = F3(function(id, x, y)
{
	return _Browser_withNode(id, function(node)
	{
		node.scrollLeft = x;
		node.scrollTop = y;
		return _Utils_Tuple0;
	});
});



// ELEMENT


function _Browser_getElement(id)
{
	return _Browser_withNode(id, function(node)
	{
		var rect = node.getBoundingClientRect();
		var x = _Browser_window.pageXOffset;
		var y = _Browser_window.pageYOffset;
		return {
			scene: _Browser_getScene(),
			viewport: {
				x: x,
				y: y,
				width: _Browser_doc.documentElement.clientWidth,
				height: _Browser_doc.documentElement.clientHeight
			},
			element: {
				x: x + rect.left,
				y: y + rect.top,
				width: rect.width,
				height: rect.height
			}
		};
	});
}



// LOAD and RELOAD


function _Browser_reload(skipCache)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		_VirtualDom_doc.location.reload(skipCache);
	}));
}

function _Browser_load(url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		try
		{
			_Browser_window.location = url;
		}
		catch(err)
		{
			// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
			// Other browsers reload the page, so let's be consistent about that.
			_VirtualDom_doc.location.reload(false);
		}
	}));
}



// SEND REQUEST

var _Http_toTask = F2(function(request, maybeProgress)
{
	return _Scheduler_binding(function(callback)
	{
		var xhr = new XMLHttpRequest();

		_Http_configureProgress(xhr, maybeProgress);

		xhr.addEventListener('error', function() {
			callback(_Scheduler_fail($elm$http$Http$NetworkError));
		});
		xhr.addEventListener('timeout', function() {
			callback(_Scheduler_fail($elm$http$Http$Timeout));
		});
		xhr.addEventListener('load', function() {
			callback(_Http_handleResponse(xhr, request.expect.a));
		});

		try
		{
			xhr.open(request.method, request.url, true);
		}
		catch (e)
		{
			return callback(_Scheduler_fail($elm$http$Http$BadUrl(request.url)));
		}

		_Http_configureRequest(xhr, request);

		var body = request.body;
		xhr.send($elm$http$Http$Internal$isStringBody(body)
			? (xhr.setRequestHeader('Content-Type', body.a), body.b)
			: body.a
		);

		return function() { xhr.abort(); };
	});
});

function _Http_configureProgress(xhr, maybeProgress)
{
	if (!$elm$core$Maybe$isJust(maybeProgress))
	{
		return;
	}

	xhr.addEventListener('progress', function(event) {
		if (!event.lengthComputable)
		{
			return;
		}
		_Scheduler_rawSpawn(maybeProgress.a({
			bytes: event.loaded,
			bytesExpected: event.total
		}));
	});
}

function _Http_configureRequest(xhr, request)
{
	for (var headers = request.headers; headers.b; headers = headers.b) // WHILE_CONS
	{
		xhr.setRequestHeader(headers.a.a, headers.a.b);
	}

	xhr.responseType = request.expect.b;
	xhr.withCredentials = request.withCredentials;

	$elm$core$Maybe$isJust(request.timeout) && (xhr.timeout = request.timeout.a);
}


// RESPONSES

function _Http_handleResponse(xhr, responseToResult)
{
	var response = _Http_toResponse(xhr);

	if (xhr.status < 200 || 300 <= xhr.status)
	{
		response.body = xhr.responseText;
		return _Scheduler_fail($elm$http$Http$BadStatus(response));
	}

	var result = responseToResult(response);

	if ($elm$core$Result$isOk(result))
	{
		return _Scheduler_succeed(result.a);
	}
	else
	{
		response.body = xhr.responseText;
		return _Scheduler_fail(A2($elm$http$Http$BadPayload, result.a, response));
	}
}

function _Http_toResponse(xhr)
{
	return {
		url: xhr.responseURL,
		status: { code: xhr.status, message: xhr.statusText },
		headers: _Http_parseHeaders(xhr.getAllResponseHeaders()),
		body: xhr.response
	};
}

function _Http_parseHeaders(rawHeaders)
{
	var headers = $elm$core$Dict$empty;

	if (!rawHeaders)
	{
		return headers;
	}

	var headerPairs = rawHeaders.split('\u000d\u000a');
	for (var i = headerPairs.length; i--; )
	{
		var headerPair = headerPairs[i];
		var index = headerPair.indexOf('\u003a\u0020');
		if (index > 0)
		{
			var key = headerPair.substring(0, index);
			var value = headerPair.substring(index + 2);

			headers = A3($elm$core$Dict$update, key, function(oldValue) {
				return $elm$core$Maybe$Just($elm$core$Maybe$isJust(oldValue)
					? value + ', ' + oldValue.a
					: value
				);
			}, headers);
		}
	}

	return headers;
}


// EXPECTORS

function _Http_expectStringResponse(responseToResult)
{
	return {
		$: 0,
		b: 'text',
		a: responseToResult
	};
}

var _Http_mapExpect = F2(function(func, expect)
{
	return {
		$: 0,
		b: expect.b,
		a: function(response) {
			var convertedResponse = expect.a(response);
			return A2($elm$core$Result$map, func, convertedResponse);
		}
	};
});


// BODY

function _Http_multipart(parts)
{


	for (var formData = new FormData(); parts.b; parts = parts.b) // WHILE_CONS
	{
		var part = parts.a;
		formData.append(part.a, part.b);
	}

	return $elm$http$Http$Internal$FormDataBody(formData);
}




// STRINGS


var _Parser_isSubString = F5(function(smallString, offset, row, col, bigString)
{
	var smallLength = smallString.length;
	var isGood = offset + smallLength <= bigString.length;

	for (var i = 0; isGood && i < smallLength; )
	{
		var code = bigString.charCodeAt(offset);
		isGood =
			smallString[i++] === bigString[offset++]
			&& (
				code === 0x000A /* \n */
					? ( row++, col=1 )
					: ( col++, (code & 0xF800) === 0xD800 ? smallString[i++] === bigString[offset++] : 1 )
			)
	}

	return _Utils_Tuple3(isGood ? offset : -1, row, col);
});



// CHARS


var _Parser_isSubChar = F3(function(predicate, offset, string)
{
	return (
		string.length <= offset
			? -1
			:
		(string.charCodeAt(offset) & 0xF800) === 0xD800
			? (predicate(_Utils_chr(string.substr(offset, 2))) ? offset + 2 : -1)
			:
		(predicate(_Utils_chr(string[offset]))
			? ((string[offset] === '\n') ? -2 : (offset + 1))
			: -1
		)
	);
});


var _Parser_isAsciiCode = F3(function(code, offset, string)
{
	return string.charCodeAt(offset) === code;
});



// NUMBERS


var _Parser_chompBase10 = F2(function(offset, string)
{
	for (; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (code < 0x30 || 0x39 < code)
		{
			return offset;
		}
	}
	return offset;
});


var _Parser_consumeBase = F3(function(base, offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var digit = string.charCodeAt(offset) - 0x30;
		if (digit < 0 || base <= digit) break;
		total = base * total + digit;
	}
	return _Utils_Tuple2(offset, total);
});


var _Parser_consumeBase16 = F2(function(offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (0x30 <= code && code <= 0x39)
		{
			total = 16 * total + code - 0x30;
		}
		else if (0x41 <= code && code <= 0x46)
		{
			total = 16 * total + code - 55;
		}
		else if (0x61 <= code && code <= 0x66)
		{
			total = 16 * total + code - 87;
		}
		else
		{
			break;
		}
	}
	return _Utils_Tuple2(offset, total);
});



// FIND STRING


var _Parser_findSubString = F5(function(smallString, offset, row, col, bigString)
{
	var newOffset = bigString.indexOf(smallString, offset);
	var target = newOffset < 0 ? bigString.length : newOffset + smallString.length;

	while (offset < target)
	{
		var code = bigString.charCodeAt(offset++);
		code === 0x000A /* \n */
			? ( col=1, row++ )
			: ( col++, (code & 0xF800) === 0xD800 && offset++ )
	}

	return _Utils_Tuple3(newOffset, row, col);
});


function _Url_percentEncode(string)
{
	return encodeURIComponent(string);
}

function _Url_percentDecode(string)
{
	try
	{
		return $elm$core$Maybe$Just(decodeURIComponent(string));
	}
	catch (e)
	{
		return $elm$core$Maybe$Nothing;
	}
}


function _Time_now(millisToPosix)
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(millisToPosix(Date.now())));
	});
}

var _Time_setInterval = F2(function(interval, task)
{
	return _Scheduler_binding(function(callback)
	{
		var id = setInterval(function() { _Scheduler_rawSpawn(task); }, interval);
		return function() { clearInterval(id); };
	});
});

function _Time_here()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(
			A2($elm$time$Time$customZone, -(new Date().getTimezoneOffset()), _List_Nil)
		));
	});
}


function _Time_getZoneName()
{
	return _Scheduler_binding(function(callback)
	{
		try
		{
			var name = $elm$time$Time$Name(Intl.DateTimeFormat().resolvedOptions().timeZone);
		}
		catch (e)
		{
			var name = $elm$time$Time$Offset(new Date().getTimezoneOffset());
		}
		callback(_Scheduler_succeed(name));
	});
}


// CREATE

var _Regex_never = /.^/;

var _Regex_fromStringWith = F2(function(options, string)
{
	var flags = 'g';
	if (options.multiline) { flags += 'm'; }
	if (options.caseInsensitive) { flags += 'i'; }

	try
	{
		return $elm$core$Maybe$Just(new RegExp(string, flags));
	}
	catch(error)
	{
		return $elm$core$Maybe$Nothing;
	}
});


// USE

var _Regex_contains = F2(function(re, string)
{
	return string.match(re) !== null;
});


var _Regex_findAtMost = F3(function(n, re, str)
{
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex == re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		out.push(A4($elm$regex$Regex$Match, result[0], result.index, number, _List_fromArray(subs)));
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _List_fromArray(out);
});


var _Regex_replaceAtMost = F4(function(n, re, replacer, string)
{
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		return replacer(A4($elm$regex$Regex$Match, match, arguments[arguments.length - 2], count, _List_fromArray(submatches)));
	}
	return string.replace(re, jsReplacer);
});

var _Regex_splitAtMost = F3(function(n, re, str)
{
	var string = str;
	var out = [];
	var start = re.lastIndex;
	var restoreLastIndex = re.lastIndex;
	while (n--)
	{
		var result = re.exec(string);
		if (!result) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	re.lastIndex = restoreLastIndex;
	return _List_fromArray(out);
});

var _Regex_infinity = Infinity;
var $elm$core$Maybe$Just = function (a) {
	return {$: 'Just', a: a};
};
var $elm$core$Maybe$Nothing = {$: 'Nothing'};
var $author$project$Main$UrlChanged = function (a) {
	return {$: 'UrlChanged', a: a};
};
var $author$project$Main$UrlRequested = function (a) {
	return {$: 'UrlRequested', a: a};
};
var $elm$core$Basics$EQ = {$: 'EQ'};
var $elm$core$Basics$GT = {$: 'GT'};
var $elm$core$Basics$LT = {$: 'LT'};
var $elm$core$List$cons = _List_cons;
var $elm$core$Dict$foldr = F3(
	function (func, acc, t) {
		foldr:
		while (true) {
			if (t.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = t.b;
				var value = t.c;
				var left = t.d;
				var right = t.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldr, func, acc, right)),
					$temp$t = left;
				func = $temp$func;
				acc = $temp$acc;
				t = $temp$t;
				continue foldr;
			}
		}
	});
var $elm$core$Dict$toList = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return A2(
					$elm$core$List$cons,
					_Utils_Tuple2(key, value),
					list);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Dict$keys = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return A2($elm$core$List$cons, key, keyList);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Set$toList = function (_v0) {
	var dict = _v0.a;
	return $elm$core$Dict$keys(dict);
};
var $elm$core$Elm$JsArray$foldr = _JsArray_foldr;
var $elm$core$Array$foldr = F3(
	function (func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(
			function (node, acc) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldr, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldr,
			helper,
			A3($elm$core$Elm$JsArray$foldr, func, baseCase, tail),
			tree);
	});
var $elm$core$Array$toList = function (array) {
	return A3($elm$core$Array$foldr, $elm$core$List$cons, _List_Nil, array);
};
var $elm$core$Result$Err = function (a) {
	return {$: 'Err', a: a};
};
var $elm$json$Json$Decode$Failure = F2(
	function (a, b) {
		return {$: 'Failure', a: a, b: b};
	});
var $elm$json$Json$Decode$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $elm$json$Json$Decode$Index = F2(
	function (a, b) {
		return {$: 'Index', a: a, b: b};
	});
var $elm$core$Result$Ok = function (a) {
	return {$: 'Ok', a: a};
};
var $elm$json$Json$Decode$OneOf = function (a) {
	return {$: 'OneOf', a: a};
};
var $elm$core$Basics$False = {$: 'False'};
var $elm$core$Basics$add = _Basics_add;
var $elm$core$String$all = _String_all;
var $elm$core$Basics$and = _Basics_and;
var $elm$core$Basics$append = _Utils_append;
var $elm$json$Json$Encode$encode = _Json_encode;
var $elm$core$String$fromInt = _String_fromNumber;
var $elm$core$String$join = F2(
	function (sep, chunks) {
		return A2(
			_String_join,
			sep,
			_List_toArray(chunks));
	});
var $elm$core$String$split = F2(
	function (sep, string) {
		return _List_fromArray(
			A2(_String_split, sep, string));
	});
var $elm$json$Json$Decode$indent = function (str) {
	return A2(
		$elm$core$String$join,
		'\n    ',
		A2($elm$core$String$split, '\n', str));
};
var $elm$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var x = list.a;
				var xs = list.b;
				var $temp$func = func,
					$temp$acc = A2(func, x, acc),
					$temp$list = xs;
				func = $temp$func;
				acc = $temp$acc;
				list = $temp$list;
				continue foldl;
			}
		}
	});
var $elm$core$List$length = function (xs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, i) {
				return i + 1;
			}),
		0,
		xs);
};
var $elm$core$List$map2 = _List_map2;
var $elm$core$Basics$le = _Utils_le;
var $elm$core$Basics$sub = _Basics_sub;
var $elm$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_Utils_cmp(lo, hi) < 1) {
				var $temp$lo = lo,
					$temp$hi = hi - 1,
					$temp$list = A2($elm$core$List$cons, hi, list);
				lo = $temp$lo;
				hi = $temp$hi;
				list = $temp$list;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var $elm$core$List$range = F2(
	function (lo, hi) {
		return A3($elm$core$List$rangeHelp, lo, hi, _List_Nil);
	});
var $elm$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$map2,
			f,
			A2(
				$elm$core$List$range,
				0,
				$elm$core$List$length(xs) - 1),
			xs);
	});
var $elm$core$Char$toCode = _Char_toCode;
var $elm$core$Char$isLower = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (97 <= code) && (code <= 122);
};
var $elm$core$Char$isUpper = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 90) && (65 <= code);
};
var $elm$core$Basics$or = _Basics_or;
var $elm$core$Char$isAlpha = function (_char) {
	return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);
};
var $elm$core$Char$isDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 57) && (48 <= code);
};
var $elm$core$Char$isAlphaNum = function (_char) {
	return $elm$core$Char$isLower(_char) || ($elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char));
};
var $elm$core$List$reverse = function (list) {
	return A3($elm$core$List$foldl, $elm$core$List$cons, _List_Nil, list);
};
var $elm$core$String$uncons = _String_uncons;
var $elm$json$Json$Decode$errorOneOf = F2(
	function (i, error) {
		return '\n\n(' + ($elm$core$String$fromInt(i + 1) + (') ' + $elm$json$Json$Decode$indent(
			$elm$json$Json$Decode$errorToString(error))));
	});
var $elm$json$Json$Decode$errorToString = function (error) {
	return A2($elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);
};
var $elm$json$Json$Decode$errorToStringHelp = F2(
	function (error, context) {
		errorToStringHelp:
		while (true) {
			switch (error.$) {
				case 'Field':
					var f = error.a;
					var err = error.b;
					var isSimple = function () {
						var _v1 = $elm$core$String$uncons(f);
						if (_v1.$ === 'Nothing') {
							return false;
						} else {
							var _v2 = _v1.a;
							var _char = _v2.a;
							var rest = _v2.b;
							return $elm$core$Char$isAlpha(_char) && A2($elm$core$String$all, $elm$core$Char$isAlphaNum, rest);
						}
					}();
					var fieldName = isSimple ? ('.' + f) : ('[\'' + (f + '\']'));
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, fieldName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'Index':
					var i = error.a;
					var err = error.b;
					var indexName = '[' + ($elm$core$String$fromInt(i) + ']');
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, indexName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'OneOf':
					var errors = error.a;
					if (!errors.b) {
						return 'Ran into a Json.Decode.oneOf with no possibilities' + function () {
							if (!context.b) {
								return '!';
							} else {
								return ' at json' + A2(
									$elm$core$String$join,
									'',
									$elm$core$List$reverse(context));
							}
						}();
					} else {
						if (!errors.b.b) {
							var err = errors.a;
							var $temp$error = err,
								$temp$context = context;
							error = $temp$error;
							context = $temp$context;
							continue errorToStringHelp;
						} else {
							var starter = function () {
								if (!context.b) {
									return 'Json.Decode.oneOf';
								} else {
									return 'The Json.Decode.oneOf at json' + A2(
										$elm$core$String$join,
										'',
										$elm$core$List$reverse(context));
								}
							}();
							var introduction = starter + (' failed in the following ' + ($elm$core$String$fromInt(
								$elm$core$List$length(errors)) + ' ways:'));
							return A2(
								$elm$core$String$join,
								'\n\n',
								A2(
									$elm$core$List$cons,
									introduction,
									A2($elm$core$List$indexedMap, $elm$json$Json$Decode$errorOneOf, errors)));
						}
					}
				default:
					var msg = error.a;
					var json = error.b;
					var introduction = function () {
						if (!context.b) {
							return 'Problem with the given value:\n\n';
						} else {
							return 'Problem with the value at json' + (A2(
								$elm$core$String$join,
								'',
								$elm$core$List$reverse(context)) + ':\n\n    ');
						}
					}();
					return introduction + ($elm$json$Json$Decode$indent(
						A2($elm$json$Json$Encode$encode, 4, json)) + ('\n\n' + msg));
			}
		}
	});
var $elm$core$Array$branchFactor = 32;
var $elm$core$Array$Array_elm_builtin = F4(
	function (a, b, c, d) {
		return {$: 'Array_elm_builtin', a: a, b: b, c: c, d: d};
	});
var $elm$core$Elm$JsArray$empty = _JsArray_empty;
var $elm$core$Basics$ceiling = _Basics_ceiling;
var $elm$core$Basics$fdiv = _Basics_fdiv;
var $elm$core$Basics$logBase = F2(
	function (base, number) {
		return _Basics_log(number) / _Basics_log(base);
	});
var $elm$core$Basics$toFloat = _Basics_toFloat;
var $elm$core$Array$shiftStep = $elm$core$Basics$ceiling(
	A2($elm$core$Basics$logBase, 2, $elm$core$Array$branchFactor));
var $elm$core$Array$empty = A4($elm$core$Array$Array_elm_builtin, 0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);
var $elm$core$Elm$JsArray$initialize = _JsArray_initialize;
var $elm$core$Array$Leaf = function (a) {
	return {$: 'Leaf', a: a};
};
var $elm$core$Basics$apL = F2(
	function (f, x) {
		return f(x);
	});
var $elm$core$Basics$apR = F2(
	function (x, f) {
		return f(x);
	});
var $elm$core$Basics$eq = _Utils_equal;
var $elm$core$Basics$floor = _Basics_floor;
var $elm$core$Elm$JsArray$length = _JsArray_length;
var $elm$core$Basics$gt = _Utils_gt;
var $elm$core$Basics$max = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) > 0) ? x : y;
	});
var $elm$core$Basics$mul = _Basics_mul;
var $elm$core$Array$SubTree = function (a) {
	return {$: 'SubTree', a: a};
};
var $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
var $elm$core$Array$compressNodes = F2(
	function (nodes, acc) {
		compressNodes:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodes);
			var node = _v0.a;
			var remainingNodes = _v0.b;
			var newAcc = A2(
				$elm$core$List$cons,
				$elm$core$Array$SubTree(node),
				acc);
			if (!remainingNodes.b) {
				return $elm$core$List$reverse(newAcc);
			} else {
				var $temp$nodes = remainingNodes,
					$temp$acc = newAcc;
				nodes = $temp$nodes;
				acc = $temp$acc;
				continue compressNodes;
			}
		}
	});
var $elm$core$Tuple$first = function (_v0) {
	var x = _v0.a;
	return x;
};
var $elm$core$Array$treeFromBuilder = F2(
	function (nodeList, nodeListSize) {
		treeFromBuilder:
		while (true) {
			var newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);
			if (newNodeSize === 1) {
				return A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodeList).a;
			} else {
				var $temp$nodeList = A2($elm$core$Array$compressNodes, nodeList, _List_Nil),
					$temp$nodeListSize = newNodeSize;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue treeFromBuilder;
			}
		}
	});
var $elm$core$Array$builderToArray = F2(
	function (reverseNodeList, builder) {
		if (!builder.nodeListSize) {
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail),
				$elm$core$Array$shiftStep,
				$elm$core$Elm$JsArray$empty,
				builder.tail);
		} else {
			var treeLen = builder.nodeListSize * $elm$core$Array$branchFactor;
			var depth = $elm$core$Basics$floor(
				A2($elm$core$Basics$logBase, $elm$core$Array$branchFactor, treeLen - 1));
			var correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.nodeList) : builder.nodeList;
			var tree = A2($elm$core$Array$treeFromBuilder, correctNodeList, builder.nodeListSize);
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail) + treeLen,
				A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep),
				tree,
				builder.tail);
		}
	});
var $elm$core$Basics$idiv = _Basics_idiv;
var $elm$core$Basics$lt = _Utils_lt;
var $elm$core$Array$initializeHelp = F5(
	function (fn, fromIndex, len, nodeList, tail) {
		initializeHelp:
		while (true) {
			if (fromIndex < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					false,
					{nodeList: nodeList, nodeListSize: (len / $elm$core$Array$branchFactor) | 0, tail: tail});
			} else {
				var leaf = $elm$core$Array$Leaf(
					A3($elm$core$Elm$JsArray$initialize, $elm$core$Array$branchFactor, fromIndex, fn));
				var $temp$fn = fn,
					$temp$fromIndex = fromIndex - $elm$core$Array$branchFactor,
					$temp$len = len,
					$temp$nodeList = A2($elm$core$List$cons, leaf, nodeList),
					$temp$tail = tail;
				fn = $temp$fn;
				fromIndex = $temp$fromIndex;
				len = $temp$len;
				nodeList = $temp$nodeList;
				tail = $temp$tail;
				continue initializeHelp;
			}
		}
	});
var $elm$core$Basics$remainderBy = _Basics_remainderBy;
var $elm$core$Array$initialize = F2(
	function (len, fn) {
		if (len <= 0) {
			return $elm$core$Array$empty;
		} else {
			var tailLen = len % $elm$core$Array$branchFactor;
			var tail = A3($elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);
			var initialFromIndex = (len - tailLen) - $elm$core$Array$branchFactor;
			return A5($elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);
		}
	});
var $elm$core$Basics$True = {$: 'True'};
var $elm$core$Result$isOk = function (result) {
	if (result.$ === 'Ok') {
		return true;
	} else {
		return false;
	}
};
var $elm$json$Json$Decode$map = _Json_map1;
var $elm$json$Json$Decode$map2 = _Json_map2;
var $elm$json$Json$Decode$succeed = _Json_succeed;
var $elm$virtual_dom$VirtualDom$toHandlerInt = function (handler) {
	switch (handler.$) {
		case 'Normal':
			return 0;
		case 'MayStopPropagation':
			return 1;
		case 'MayPreventDefault':
			return 2;
		default:
			return 3;
	}
};
var $elm$browser$Debugger$Expando$ArraySeq = {$: 'ArraySeq'};
var $elm$browser$Debugger$Overlay$BlockMost = {$: 'BlockMost'};
var $elm$browser$Debugger$Overlay$BlockNone = {$: 'BlockNone'};
var $elm$browser$Debugger$Expando$Constructor = F3(
	function (a, b, c) {
		return {$: 'Constructor', a: a, b: b, c: c};
	});
var $elm$browser$Debugger$Expando$Dictionary = F2(
	function (a, b) {
		return {$: 'Dictionary', a: a, b: b};
	});
var $elm$browser$Debugger$Main$Down = {$: 'Down'};
var $elm$browser$Debugger$Expando$ListSeq = {$: 'ListSeq'};
var $elm$browser$Debugger$Main$NoOp = {$: 'NoOp'};
var $elm$browser$Debugger$Expando$Primitive = function (a) {
	return {$: 'Primitive', a: a};
};
var $elm$browser$Debugger$Expando$Record = F2(
	function (a, b) {
		return {$: 'Record', a: a, b: b};
	});
var $elm$browser$Debugger$Expando$S = function (a) {
	return {$: 'S', a: a};
};
var $elm$browser$Debugger$Expando$Sequence = F3(
	function (a, b, c) {
		return {$: 'Sequence', a: a, b: b, c: c};
	});
var $elm$browser$Debugger$Expando$SetSeq = {$: 'SetSeq'};
var $elm$browser$Debugger$Main$Up = {$: 'Up'};
var $elm$browser$Debugger$Main$UserMsg = function (a) {
	return {$: 'UserMsg', a: a};
};
var $elm$browser$Debugger$Main$Export = {$: 'Export'};
var $elm$browser$Debugger$Main$Import = {$: 'Import'};
var $elm$browser$Debugger$Main$Open = {$: 'Open'};
var $elm$browser$Debugger$Main$OverlayMsg = function (a) {
	return {$: 'OverlayMsg', a: a};
};
var $elm$browser$Debugger$Main$Resume = {$: 'Resume'};
var $elm$browser$Debugger$Main$isPaused = function (state) {
	if (state.$ === 'Running') {
		return false;
	} else {
		return true;
	}
};
var $elm$browser$Debugger$History$size = function (history) {
	return history.numMessages;
};
var $elm$browser$Debugger$Overlay$Accept = function (a) {
	return {$: 'Accept', a: a};
};
var $elm$browser$Debugger$Overlay$Choose = F2(
	function (a, b) {
		return {$: 'Choose', a: a, b: b};
	});
var $elm$html$Html$div = _VirtualDom_node('div');
var $elm$json$Json$Encode$string = _Json_wrap;
var $elm$html$Html$Attributes$stringProperty = F2(
	function (key, string) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$string(string));
	});
var $elm$html$Html$Attributes$id = $elm$html$Html$Attributes$stringProperty('id');
var $elm$virtual_dom$VirtualDom$Normal = function (a) {
	return {$: 'Normal', a: a};
};
var $elm$virtual_dom$VirtualDom$on = _VirtualDom_on;
var $elm$html$Html$Events$on = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$Normal(decoder));
	});
var $elm$html$Html$Events$onClick = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'click',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$html$Html$span = _VirtualDom_node('span');
var $elm$virtual_dom$VirtualDom$style = _VirtualDom_style;
var $elm$html$Html$Attributes$style = $elm$virtual_dom$VirtualDom$style;
var $elm$virtual_dom$VirtualDom$text = _VirtualDom_text;
var $elm$html$Html$text = $elm$virtual_dom$VirtualDom$text;
var $elm$html$Html$a = _VirtualDom_node('a');
var $elm$browser$Debugger$Overlay$goodNews1 = '\nThe good news is that having values like this in your message type is not\nso great in the long run. You are better off using simpler data, like\n';
var $elm$browser$Debugger$Overlay$goodNews2 = '\nfunction can pattern match on that data and call whatever functions, JSON\ndecoders, etc. you need. This makes the code much more explicit and easy to\nfollow for other readers (or you in a few months!)\n';
var $elm$html$Html$Attributes$href = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'href',
		_VirtualDom_noJavaScriptUri(url));
};
var $elm$core$List$foldrHelper = F4(
	function (fn, acc, ctr, ls) {
		if (!ls.b) {
			return acc;
		} else {
			var a = ls.a;
			var r1 = ls.b;
			if (!r1.b) {
				return A2(fn, a, acc);
			} else {
				var b = r1.a;
				var r2 = r1.b;
				if (!r2.b) {
					return A2(
						fn,
						a,
						A2(fn, b, acc));
				} else {
					var c = r2.a;
					var r3 = r2.b;
					if (!r3.b) {
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(fn, c, acc)));
					} else {
						var d = r3.a;
						var r4 = r3.b;
						var res = (ctr > 500) ? A3(
							$elm$core$List$foldl,
							fn,
							acc,
							$elm$core$List$reverse(r4)) : A4($elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(
									fn,
									c,
									A2(fn, d, res))));
					}
				}
			}
		}
	});
var $elm$core$List$foldr = F3(
	function (fn, acc, ls) {
		return A4($elm$core$List$foldrHelper, fn, acc, 0, ls);
	});
var $elm$core$List$map = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, acc) {
					return A2(
						$elm$core$List$cons,
						f(x),
						acc);
				}),
			_List_Nil,
			xs);
	});
var $elm$html$Html$p = _VirtualDom_node('p');
var $elm$html$Html$ul = _VirtualDom_node('ul');
var $elm$html$Html$code = _VirtualDom_node('code');
var $elm$browser$Debugger$Overlay$viewCode = function (name) {
	return A2(
		$elm$html$Html$code,
		_List_Nil,
		_List_fromArray(
			[
				$elm$html$Html$text(name)
			]));
};
var $elm$browser$Debugger$Overlay$addCommas = function (items) {
	if (!items.b) {
		return '';
	} else {
		if (!items.b.b) {
			var item = items.a;
			return item;
		} else {
			if (!items.b.b.b) {
				var item1 = items.a;
				var _v1 = items.b;
				var item2 = _v1.a;
				return item1 + (' and ' + item2);
			} else {
				var lastItem = items.a;
				var otherItems = items.b;
				return A2(
					$elm$core$String$join,
					', ',
					_Utils_ap(
						otherItems,
						_List_fromArray(
							[' and ' + lastItem])));
			}
		}
	}
};
var $elm$html$Html$li = _VirtualDom_node('li');
var $elm$browser$Debugger$Overlay$problemToString = function (problem) {
	switch (problem.$) {
		case 'Function':
			return 'functions';
		case 'Decoder':
			return 'JSON decoders';
		case 'Task':
			return 'tasks';
		case 'Process':
			return 'processes';
		case 'Socket':
			return 'web sockets';
		case 'Request':
			return 'HTTP requests';
		case 'Program':
			return 'programs';
		default:
			return 'virtual DOM values';
	}
};
var $elm$browser$Debugger$Overlay$viewProblemType = function (_v0) {
	var name = _v0.name;
	var problems = _v0.problems;
	return A2(
		$elm$html$Html$li,
		_List_Nil,
		_List_fromArray(
			[
				$elm$browser$Debugger$Overlay$viewCode(name),
				$elm$html$Html$text(
				' can contain ' + ($elm$browser$Debugger$Overlay$addCommas(
					A2($elm$core$List$map, $elm$browser$Debugger$Overlay$problemToString, problems)) + '.'))
			]));
};
var $elm$browser$Debugger$Overlay$viewBadMetadata = function (_v0) {
	var message = _v0.message;
	var problems = _v0.problems;
	return _List_fromArray(
		[
			A2(
			$elm$html$Html$p,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text('The '),
					$elm$browser$Debugger$Overlay$viewCode(message),
					$elm$html$Html$text(' type of your program cannot be reliably serialized for history files.')
				])),
			A2(
			$elm$html$Html$p,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text('Functions cannot be serialized, nor can values that contain functions. This is a problem in these places:')
				])),
			A2(
			$elm$html$Html$ul,
			_List_Nil,
			A2($elm$core$List$map, $elm$browser$Debugger$Overlay$viewProblemType, problems)),
			A2(
			$elm$html$Html$p,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text($elm$browser$Debugger$Overlay$goodNews1),
					A2(
					$elm$html$Html$a,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$href('https://guide.elm-lang.org/types/custom_types.html')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('custom types')
						])),
					$elm$html$Html$text(', in your messages. From there, your '),
					$elm$browser$Debugger$Overlay$viewCode('update'),
					$elm$html$Html$text($elm$browser$Debugger$Overlay$goodNews2)
				]))
		]);
};
var $elm$virtual_dom$VirtualDom$map = _VirtualDom_map;
var $elm$html$Html$map = $elm$virtual_dom$VirtualDom$map;
var $elm$browser$Debugger$Overlay$Cancel = {$: 'Cancel'};
var $elm$browser$Debugger$Overlay$Proceed = {$: 'Proceed'};
var $elm$html$Html$button = _VirtualDom_node('button');
var $elm$browser$Debugger$Overlay$viewButtons = function (buttons) {
	var btn = F2(
		function (msg, string) {
			return A2(
				$elm$html$Html$button,
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'margin-right', '20px'),
						$elm$html$Html$Events$onClick(msg)
					]),
				_List_fromArray(
					[
						$elm$html$Html$text(string)
					]));
		});
	var buttonNodes = function () {
		if (buttons.$ === 'Accept') {
			var proceed = buttons.a;
			return _List_fromArray(
				[
					A2(btn, $elm$browser$Debugger$Overlay$Proceed, proceed)
				]);
		} else {
			var cancel = buttons.a;
			var proceed = buttons.b;
			return _List_fromArray(
				[
					A2(btn, $elm$browser$Debugger$Overlay$Cancel, cancel),
					A2(btn, $elm$browser$Debugger$Overlay$Proceed, proceed)
				]);
		}
	}();
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'height', '60px'),
				A2($elm$html$Html$Attributes$style, 'line-height', '60px'),
				A2($elm$html$Html$Attributes$style, 'text-align', 'right'),
				A2($elm$html$Html$Attributes$style, 'background-color', 'rgb(50, 50, 50)')
			]),
		buttonNodes);
};
var $elm$browser$Debugger$Overlay$viewMessage = F4(
	function (config, title, details, buttons) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$id('elm-debugger-overlay'),
					A2($elm$html$Html$Attributes$style, 'position', 'fixed'),
					A2($elm$html$Html$Attributes$style, 'top', '0'),
					A2($elm$html$Html$Attributes$style, 'left', '0'),
					A2($elm$html$Html$Attributes$style, 'width', '100vw'),
					A2($elm$html$Html$Attributes$style, 'height', '100vh'),
					A2($elm$html$Html$Attributes$style, 'color', 'white'),
					A2($elm$html$Html$Attributes$style, 'pointer-events', 'none'),
					A2($elm$html$Html$Attributes$style, 'font-family', '\'Trebuchet MS\', \'Lucida Grande\', \'Bitstream Vera Sans\', \'Helvetica Neue\', sans-serif'),
					A2($elm$html$Html$Attributes$style, 'z-index', '2147483647')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'position', 'absolute'),
							A2($elm$html$Html$Attributes$style, 'width', '600px'),
							A2($elm$html$Html$Attributes$style, 'height', '100vh'),
							A2($elm$html$Html$Attributes$style, 'padding-left', 'calc(50% - 300px)'),
							A2($elm$html$Html$Attributes$style, 'padding-right', 'calc(50% - 300px)'),
							A2($elm$html$Html$Attributes$style, 'background-color', 'rgba(200, 200, 200, 0.7)'),
							A2($elm$html$Html$Attributes$style, 'pointer-events', 'auto')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									A2($elm$html$Html$Attributes$style, 'font-size', '36px'),
									A2($elm$html$Html$Attributes$style, 'height', '80px'),
									A2($elm$html$Html$Attributes$style, 'background-color', 'rgb(50, 50, 50)'),
									A2($elm$html$Html$Attributes$style, 'padding-left', '22px'),
									A2($elm$html$Html$Attributes$style, 'vertical-align', 'middle'),
									A2($elm$html$Html$Attributes$style, 'line-height', '80px')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(title)
								])),
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$id('elm-debugger-details'),
									A2($elm$html$Html$Attributes$style, 'padding', ' 8px 20px'),
									A2($elm$html$Html$Attributes$style, 'overflow-y', 'auto'),
									A2($elm$html$Html$Attributes$style, 'max-height', 'calc(100vh - 156px)'),
									A2($elm$html$Html$Attributes$style, 'background-color', 'rgb(61, 61, 61)')
								]),
							details),
							A2(
							$elm$html$Html$map,
							config.wrap,
							$elm$browser$Debugger$Overlay$viewButtons(buttons))
						]))
				]));
	});
var $elm$virtual_dom$VirtualDom$attribute = F2(
	function (key, value) {
		return A2(
			_VirtualDom_attribute,
			_VirtualDom_noOnOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $elm$core$Basics$negate = function (n) {
	return -n;
};
var $elm$virtual_dom$VirtualDom$nodeNS = function (tag) {
	return _VirtualDom_nodeNS(
		_VirtualDom_noScript(tag));
};
var $elm$core$String$fromFloat = _String_fromNumber;
var $elm$browser$Debugger$Overlay$viewShape = F4(
	function (x, y, angle, coordinates) {
		return A4(
			$elm$virtual_dom$VirtualDom$nodeNS,
			'http://www.w3.org/2000/svg',
			'polygon',
			_List_fromArray(
				[
					A2($elm$virtual_dom$VirtualDom$attribute, 'points', coordinates),
					A2(
					$elm$virtual_dom$VirtualDom$attribute,
					'transform',
					'translate(' + ($elm$core$String$fromFloat(x) + (' ' + ($elm$core$String$fromFloat(y) + (') rotate(' + ($elm$core$String$fromFloat(-angle) + ')'))))))
				]),
			_List_Nil);
	});
var $elm$browser$Debugger$Overlay$elmLogo = A4(
	$elm$virtual_dom$VirtualDom$nodeNS,
	'http://www.w3.org/2000/svg',
	'svg',
	_List_fromArray(
		[
			A2($elm$virtual_dom$VirtualDom$attribute, 'viewBox', '-300 -300 600 600'),
			A2($elm$virtual_dom$VirtualDom$attribute, 'xmlns', 'http://www.w3.org/2000/svg'),
			A2($elm$virtual_dom$VirtualDom$attribute, 'fill', 'currentColor'),
			A2($elm$virtual_dom$VirtualDom$attribute, 'width', '24px'),
			A2($elm$virtual_dom$VirtualDom$attribute, 'height', '24px')
		]),
	_List_fromArray(
		[
			A4(
			$elm$virtual_dom$VirtualDom$nodeNS,
			'http://www.w3.org/2000/svg',
			'g',
			_List_fromArray(
				[
					A2($elm$virtual_dom$VirtualDom$attribute, 'transform', 'scale(1 -1)')
				]),
			_List_fromArray(
				[
					A4($elm$browser$Debugger$Overlay$viewShape, 0, -210, 0, '-280,-90 0,190 280,-90'),
					A4($elm$browser$Debugger$Overlay$viewShape, -210, 0, 90, '-280,-90 0,190 280,-90'),
					A4($elm$browser$Debugger$Overlay$viewShape, 207, 207, 45, '-198,-66 0,132 198,-66'),
					A4($elm$browser$Debugger$Overlay$viewShape, 150, 0, 0, '-130,0 0,-130 130,0 0,130'),
					A4($elm$browser$Debugger$Overlay$viewShape, -89, 239, 0, '-191,61 69,61 191,-61 -69,-61'),
					A4($elm$browser$Debugger$Overlay$viewShape, 0, 106, 180, '-130,-44 0,86  130,-44'),
					A4($elm$browser$Debugger$Overlay$viewShape, 256, -150, 270, '-130,-44 0,86  130,-44')
				]))
		]));
var $elm$core$String$length = _String_length;
var $elm$browser$Debugger$Overlay$viewMiniControls = F2(
	function (config, numMsgs) {
		var string = $elm$core$String$fromInt(numMsgs);
		var width = $elm$core$String$fromInt(
			2 + $elm$core$String$length(string));
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'position', 'fixed'),
					A2($elm$html$Html$Attributes$style, 'bottom', '2em'),
					A2($elm$html$Html$Attributes$style, 'right', '2em'),
					A2($elm$html$Html$Attributes$style, 'width', 'calc(42px + ' + (width + 'ch)')),
					A2($elm$html$Html$Attributes$style, 'height', '36px'),
					A2($elm$html$Html$Attributes$style, 'background-color', '#1293D8'),
					A2($elm$html$Html$Attributes$style, 'color', 'white'),
					A2($elm$html$Html$Attributes$style, 'font-family', 'monospace'),
					A2($elm$html$Html$Attributes$style, 'pointer-events', 'auto'),
					A2($elm$html$Html$Attributes$style, 'z-index', '2147483647'),
					A2($elm$html$Html$Attributes$style, 'display', 'flex'),
					A2($elm$html$Html$Attributes$style, 'justify-content', 'center'),
					A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
					A2($elm$html$Html$Attributes$style, 'cursor', 'pointer'),
					$elm$html$Html$Events$onClick(config.open)
				]),
			_List_fromArray(
				[
					$elm$browser$Debugger$Overlay$elmLogo,
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'padding-left', 'calc(1ch + 6px)'),
							A2($elm$html$Html$Attributes$style, 'padding-right', '1ch')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(string)
						]))
				]));
	});
var $elm$browser$Debugger$Overlay$explanationBad = '\nThe messages in this history do not match the messages handled by your\nprogram. I noticed changes in the following types:\n';
var $elm$browser$Debugger$Overlay$explanationRisky = '\nThis history seems old. It will work with this program, but some\nmessages have been added since the history was created:\n';
var $elm$core$List$intersperse = F2(
	function (sep, xs) {
		if (!xs.b) {
			return _List_Nil;
		} else {
			var hd = xs.a;
			var tl = xs.b;
			var step = F2(
				function (x, rest) {
					return A2(
						$elm$core$List$cons,
						sep,
						A2($elm$core$List$cons, x, rest));
				});
			var spersed = A3($elm$core$List$foldr, step, _List_Nil, tl);
			return A2($elm$core$List$cons, hd, spersed);
		}
	});
var $elm$browser$Debugger$Overlay$viewMention = F2(
	function (tags, verbed) {
		var _v0 = A2(
			$elm$core$List$map,
			$elm$browser$Debugger$Overlay$viewCode,
			$elm$core$List$reverse(tags));
		if (!_v0.b) {
			return $elm$html$Html$text('');
		} else {
			if (!_v0.b.b) {
				var tag = _v0.a;
				return A2(
					$elm$html$Html$li,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(verbed),
							tag,
							$elm$html$Html$text('.')
						]));
			} else {
				if (!_v0.b.b.b) {
					var tag2 = _v0.a;
					var _v1 = _v0.b;
					var tag1 = _v1.a;
					return A2(
						$elm$html$Html$li,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text(verbed),
								tag1,
								$elm$html$Html$text(' and '),
								tag2,
								$elm$html$Html$text('.')
							]));
				} else {
					var lastTag = _v0.a;
					var otherTags = _v0.b;
					return A2(
						$elm$html$Html$li,
						_List_Nil,
						A2(
							$elm$core$List$cons,
							$elm$html$Html$text(verbed),
							_Utils_ap(
								A2(
									$elm$core$List$intersperse,
									$elm$html$Html$text(', '),
									$elm$core$List$reverse(otherTags)),
								_List_fromArray(
									[
										$elm$html$Html$text(', and '),
										lastTag,
										$elm$html$Html$text('.')
									]))));
				}
			}
		}
	});
var $elm$browser$Debugger$Overlay$viewChange = function (change) {
	return A2(
		$elm$html$Html$li,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'margin', '8px 0')
			]),
		function () {
			if (change.$ === 'AliasChange') {
				var name = change.a;
				return _List_fromArray(
					[
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'font-size', '1.5em')
							]),
						_List_fromArray(
							[
								$elm$browser$Debugger$Overlay$viewCode(name)
							]))
					]);
			} else {
				var name = change.a;
				var removed = change.b.removed;
				var changed = change.b.changed;
				var added = change.b.added;
				var argsMatch = change.b.argsMatch;
				return _List_fromArray(
					[
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'font-size', '1.5em')
							]),
						_List_fromArray(
							[
								$elm$browser$Debugger$Overlay$viewCode(name)
							])),
						A2(
						$elm$html$Html$ul,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'list-style-type', 'disc'),
								A2($elm$html$Html$Attributes$style, 'padding-left', '2em')
							]),
						_List_fromArray(
							[
								A2($elm$browser$Debugger$Overlay$viewMention, removed, 'Removed '),
								A2($elm$browser$Debugger$Overlay$viewMention, changed, 'Changed '),
								A2($elm$browser$Debugger$Overlay$viewMention, added, 'Added ')
							])),
						argsMatch ? $elm$html$Html$text('') : $elm$html$Html$text('This may be due to the fact that the type variable names changed.')
					]);
			}
		}());
};
var $elm$browser$Debugger$Overlay$viewReport = F2(
	function (isBad, report) {
		switch (report.$) {
			case 'CorruptHistory':
				return _List_fromArray(
					[
						$elm$html$Html$text('Looks like this history file is corrupt. I cannot understand it.')
					]);
			case 'VersionChanged':
				var old = report.a;
				var _new = report.b;
				return _List_fromArray(
					[
						$elm$html$Html$text('This history was created with Elm ' + (old + (', but you are using Elm ' + (_new + ' right now.'))))
					]);
			case 'MessageChanged':
				var old = report.a;
				var _new = report.b;
				return _List_fromArray(
					[
						$elm$html$Html$text('To import some other history, the overall message type must' + ' be the same. The old history has '),
						$elm$browser$Debugger$Overlay$viewCode(old),
						$elm$html$Html$text(' messages, but the new program works with '),
						$elm$browser$Debugger$Overlay$viewCode(_new),
						$elm$html$Html$text(' messages.')
					]);
			default:
				var changes = report.a;
				return _List_fromArray(
					[
						A2(
						$elm$html$Html$p,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text(
								isBad ? $elm$browser$Debugger$Overlay$explanationBad : $elm$browser$Debugger$Overlay$explanationRisky)
							])),
						A2(
						$elm$html$Html$ul,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'list-style-type', 'none'),
								A2($elm$html$Html$Attributes$style, 'padding-left', '20px')
							]),
						A2($elm$core$List$map, $elm$browser$Debugger$Overlay$viewChange, changes))
					]);
		}
	});
var $elm$browser$Debugger$Overlay$view = F5(
	function (config, isPaused, isOpen, numMsgs, state) {
		switch (state.$) {
			case 'None':
				return isOpen ? $elm$html$Html$text('') : (isPaused ? A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$id('elm-debugger-overlay'),
							A2($elm$html$Html$Attributes$style, 'position', 'fixed'),
							A2($elm$html$Html$Attributes$style, 'top', '0'),
							A2($elm$html$Html$Attributes$style, 'left', '0'),
							A2($elm$html$Html$Attributes$style, 'width', '100vw'),
							A2($elm$html$Html$Attributes$style, 'height', '100vh'),
							A2($elm$html$Html$Attributes$style, 'cursor', 'pointer'),
							A2($elm$html$Html$Attributes$style, 'display', 'flex'),
							A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
							A2($elm$html$Html$Attributes$style, 'justify-content', 'center'),
							A2($elm$html$Html$Attributes$style, 'pointer-events', 'auto'),
							A2($elm$html$Html$Attributes$style, 'background-color', 'rgba(200, 200, 200, 0.7)'),
							A2($elm$html$Html$Attributes$style, 'color', 'white'),
							A2($elm$html$Html$Attributes$style, 'font-family', '\'Trebuchet MS\', \'Lucida Grande\', \'Bitstream Vera Sans\', \'Helvetica Neue\', sans-serif'),
							A2($elm$html$Html$Attributes$style, 'z-index', '2147483646'),
							$elm$html$Html$Events$onClick(config.resume)
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									A2($elm$html$Html$Attributes$style, 'font-size', '80px')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('Click to Resume')
								])),
							A2($elm$browser$Debugger$Overlay$viewMiniControls, config, numMsgs)
						])) : A2($elm$browser$Debugger$Overlay$viewMiniControls, config, numMsgs));
			case 'BadMetadata':
				var badMetadata_ = state.a;
				return A4(
					$elm$browser$Debugger$Overlay$viewMessage,
					config,
					'Cannot use Import or Export',
					$elm$browser$Debugger$Overlay$viewBadMetadata(badMetadata_),
					$elm$browser$Debugger$Overlay$Accept('Ok'));
			case 'BadImport':
				var report = state.a;
				return A4(
					$elm$browser$Debugger$Overlay$viewMessage,
					config,
					'Cannot Import History',
					A2($elm$browser$Debugger$Overlay$viewReport, true, report),
					$elm$browser$Debugger$Overlay$Accept('Ok'));
			default:
				var report = state.a;
				return A4(
					$elm$browser$Debugger$Overlay$viewMessage,
					config,
					'Warning',
					A2($elm$browser$Debugger$Overlay$viewReport, false, report),
					A2($elm$browser$Debugger$Overlay$Choose, 'Cancel', 'Import Anyway'));
		}
	});
var $elm$browser$Debugger$Main$cornerView = function (model) {
	return A5(
		$elm$browser$Debugger$Overlay$view,
		{exportHistory: $elm$browser$Debugger$Main$Export, importHistory: $elm$browser$Debugger$Main$Import, open: $elm$browser$Debugger$Main$Open, resume: $elm$browser$Debugger$Main$Resume, wrap: $elm$browser$Debugger$Main$OverlayMsg},
		$elm$browser$Debugger$Main$isPaused(model.state),
		_Debugger_isOpen(model.popout),
		$elm$browser$Debugger$History$size(model.history),
		model.overlay);
};
var $elm$core$Dict$RBEmpty_elm_builtin = {$: 'RBEmpty_elm_builtin'};
var $elm$core$Dict$empty = $elm$core$Dict$RBEmpty_elm_builtin;
var $elm$core$Set$foldr = F3(
	function (func, initialState, _v0) {
		var dict = _v0.a;
		return A3(
			$elm$core$Dict$foldr,
			F3(
				function (key, _v1, state) {
					return A2(func, key, state);
				}),
			initialState,
			dict);
	});
var $elm$browser$Debugger$Main$getCurrentModel = function (state) {
	if (state.$ === 'Running') {
		var model = state.a;
		return model;
	} else {
		var model = state.b;
		return model;
	}
};
var $elm$browser$Debugger$Main$getUserModel = function (model) {
	return $elm$browser$Debugger$Main$getCurrentModel(model.state);
};
var $elm$browser$Debugger$Main$initialWindowHeight = 420;
var $elm$browser$Debugger$Main$initialWindowWidth = 900;
var $elm$core$Dict$Black = {$: 'Black'};
var $elm$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {$: 'RBNode_elm_builtin', a: a, b: b, c: c, d: d, e: e};
	});
var $elm$core$Dict$Red = {$: 'Red'};
var $elm$core$Dict$balance = F5(
	function (color, key, value, left, right) {
		if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Red')) {
			var _v1 = right.a;
			var rK = right.b;
			var rV = right.c;
			var rLeft = right.d;
			var rRight = right.e;
			if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
				var _v3 = left.a;
				var lK = left.b;
				var lV = left.c;
				var lLeft = left.d;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					key,
					value,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					rK,
					rV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, left, rLeft),
					rRight);
			}
		} else {
			if ((((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) && (left.d.$ === 'RBNode_elm_builtin')) && (left.d.a.$ === 'Red')) {
				var _v5 = left.a;
				var lK = left.b;
				var lV = left.c;
				var _v6 = left.d;
				var _v7 = _v6.a;
				var llK = _v6.b;
				var llV = _v6.c;
				var llLeft = _v6.d;
				var llRight = _v6.e;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					lK,
					lV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, key, value, lRight, right));
			} else {
				return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);
			}
		}
	});
var $elm$core$Basics$compare = _Utils_compare;
var $elm$core$Dict$insertHelp = F3(
	function (key, value, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
		} else {
			var nColor = dict.a;
			var nKey = dict.b;
			var nValue = dict.c;
			var nLeft = dict.d;
			var nRight = dict.e;
			var _v1 = A2($elm$core$Basics$compare, key, nKey);
			switch (_v1.$) {
				case 'LT':
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						A3($elm$core$Dict$insertHelp, key, value, nLeft),
						nRight);
				case 'EQ':
					return A5($elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);
				default:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						nLeft,
						A3($elm$core$Dict$insertHelp, key, value, nRight));
			}
		}
	});
var $elm$core$Dict$insert = F3(
	function (key, value, dict) {
		var _v0 = A3($elm$core$Dict$insertHelp, key, value, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$browser$Debugger$Main$cachedHistory = function (model) {
	var _v0 = model.state;
	if (_v0.$ === 'Running') {
		return model.history;
	} else {
		var history = _v0.e;
		return history;
	}
};
var $elm$virtual_dom$VirtualDom$node = function (tag) {
	return _VirtualDom_node(
		_VirtualDom_noScript(tag));
};
var $elm$html$Html$node = $elm$virtual_dom$VirtualDom$node;
var $elm$browser$Debugger$Main$DragEnd = {$: 'DragEnd'};
var $elm$browser$Debugger$Main$getDragStatus = function (layout) {
	if (layout.$ === 'Horizontal') {
		var status = layout.a;
		return status;
	} else {
		var status = layout.a;
		return status;
	}
};
var $elm$browser$Debugger$Main$Drag = function (a) {
	return {$: 'Drag', a: a};
};
var $elm$browser$Debugger$Main$DragInfo = F5(
	function (x, y, down, width, height) {
		return {down: down, height: height, width: width, x: x, y: y};
	});
var $elm$json$Json$Decode$field = _Json_decodeField;
var $elm$json$Json$Decode$at = F2(
	function (fields, decoder) {
		return A3($elm$core$List$foldr, $elm$json$Json$Decode$field, decoder, fields);
	});
var $elm$json$Json$Decode$float = _Json_decodeFloat;
var $elm$browser$Debugger$Main$decodeDimension = function (field) {
	return A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['currentTarget', 'ownerDocument', 'defaultView', field]),
		$elm$json$Json$Decode$float);
};
var $elm$json$Json$Decode$int = _Json_decodeInt;
var $elm$json$Json$Decode$map5 = _Json_map5;
var $elm$browser$Debugger$Main$onMouseMove = A2(
	$elm$html$Html$Events$on,
	'mousemove',
	A2(
		$elm$json$Json$Decode$map,
		$elm$browser$Debugger$Main$Drag,
		A6(
			$elm$json$Json$Decode$map5,
			$elm$browser$Debugger$Main$DragInfo,
			A2($elm$json$Json$Decode$field, 'pageX', $elm$json$Json$Decode$float),
			A2($elm$json$Json$Decode$field, 'pageY', $elm$json$Json$Decode$float),
			A2(
				$elm$json$Json$Decode$field,
				'buttons',
				A2(
					$elm$json$Json$Decode$map,
					function (v) {
						return v === 1;
					},
					$elm$json$Json$Decode$int)),
			$elm$browser$Debugger$Main$decodeDimension('innerWidth'),
			$elm$browser$Debugger$Main$decodeDimension('innerHeight'))));
var $elm$html$Html$Events$onMouseUp = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mouseup',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$browser$Debugger$Main$toDragListeners = function (layout) {
	var _v0 = $elm$browser$Debugger$Main$getDragStatus(layout);
	if (_v0.$ === 'Static') {
		return _List_Nil;
	} else {
		return _List_fromArray(
			[
				$elm$browser$Debugger$Main$onMouseMove,
				$elm$html$Html$Events$onMouseUp($elm$browser$Debugger$Main$DragEnd)
			]);
	}
};
var $elm$browser$Debugger$Main$toFlexDirection = function (layout) {
	if (layout.$ === 'Horizontal') {
		return 'row';
	} else {
		return 'column-reverse';
	}
};
var $elm$browser$Debugger$Main$DragStart = {$: 'DragStart'};
var $elm$html$Html$Events$onMouseDown = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mousedown',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$browser$Debugger$Main$toPercent = function (fraction) {
	return $elm$core$String$fromFloat(100 * fraction) + '%';
};
var $elm$browser$Debugger$Main$viewDragZone = function (layout) {
	if (layout.$ === 'Horizontal') {
		var x = layout.b;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'position', 'absolute'),
					A2($elm$html$Html$Attributes$style, 'top', '0'),
					A2(
					$elm$html$Html$Attributes$style,
					'left',
					$elm$browser$Debugger$Main$toPercent(x)),
					A2($elm$html$Html$Attributes$style, 'margin-left', '-5px'),
					A2($elm$html$Html$Attributes$style, 'width', '10px'),
					A2($elm$html$Html$Attributes$style, 'height', '100%'),
					A2($elm$html$Html$Attributes$style, 'cursor', 'col-resize'),
					$elm$html$Html$Events$onMouseDown($elm$browser$Debugger$Main$DragStart)
				]),
			_List_Nil);
	} else {
		var y = layout.c;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'position', 'absolute'),
					A2(
					$elm$html$Html$Attributes$style,
					'top',
					$elm$browser$Debugger$Main$toPercent(y)),
					A2($elm$html$Html$Attributes$style, 'left', '0'),
					A2($elm$html$Html$Attributes$style, 'margin-top', '-5px'),
					A2($elm$html$Html$Attributes$style, 'width', '100%'),
					A2($elm$html$Html$Attributes$style, 'height', '10px'),
					A2($elm$html$Html$Attributes$style, 'cursor', 'row-resize'),
					$elm$html$Html$Events$onMouseDown($elm$browser$Debugger$Main$DragStart)
				]),
			_List_Nil);
	}
};
var $elm$browser$Debugger$Main$TweakExpandoModel = function (a) {
	return {$: 'TweakExpandoModel', a: a};
};
var $elm$browser$Debugger$Main$TweakExpandoMsg = function (a) {
	return {$: 'TweakExpandoMsg', a: a};
};
var $elm$browser$Debugger$Main$toExpandoPercents = function (layout) {
	if (layout.$ === 'Horizontal') {
		var x = layout.b;
		return _Utils_Tuple2(
			$elm$browser$Debugger$Main$toPercent(1 - x),
			'100%');
	} else {
		var y = layout.c;
		return _Utils_Tuple2(
			'100%',
			$elm$browser$Debugger$Main$toPercent(y));
	}
};
var $elm$browser$Debugger$Main$toMouseBlocker = function (layout) {
	var _v0 = $elm$browser$Debugger$Main$getDragStatus(layout);
	if (_v0.$ === 'Static') {
		return 'auto';
	} else {
		return 'none';
	}
};
var $elm$browser$Debugger$Expando$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $elm$browser$Debugger$Expando$Index = F3(
	function (a, b, c) {
		return {$: 'Index', a: a, b: b, c: c};
	});
var $elm$browser$Debugger$Expando$Key = {$: 'Key'};
var $elm$browser$Debugger$Expando$None = {$: 'None'};
var $elm$browser$Debugger$Expando$Toggle = {$: 'Toggle'};
var $elm$browser$Debugger$Expando$Value = {$: 'Value'};
var $elm$browser$Debugger$Expando$blue = A2($elm$html$Html$Attributes$style, 'color', 'rgb(28, 0, 207)');
var $elm$core$Basics$composeL = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var $elm$browser$Debugger$Expando$leftPad = function (maybeKey) {
	if (maybeKey.$ === 'Nothing') {
		return _List_Nil;
	} else {
		return _List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'padding-left', '4ch')
			]);
	}
};
var $elm$browser$Debugger$Expando$makeArrow = function (arrow) {
	return A2(
		$elm$html$Html$span,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'color', '#777'),
				A2($elm$html$Html$Attributes$style, 'padding-left', '2ch'),
				A2($elm$html$Html$Attributes$style, 'width', '2ch'),
				A2($elm$html$Html$Attributes$style, 'display', 'inline-block')
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(arrow)
			]));
};
var $elm$browser$Debugger$Expando$purple = A2($elm$html$Html$Attributes$style, 'color', 'rgb(136, 19, 145)');
var $elm$browser$Debugger$Expando$lineStarter = F3(
	function (maybeKey, maybeIsClosed, description) {
		var arrow = function () {
			if (maybeIsClosed.$ === 'Nothing') {
				return $elm$browser$Debugger$Expando$makeArrow('');
			} else {
				if (maybeIsClosed.a) {
					return $elm$browser$Debugger$Expando$makeArrow('▸');
				} else {
					return $elm$browser$Debugger$Expando$makeArrow('▾');
				}
			}
		}();
		if (maybeKey.$ === 'Nothing') {
			return A2($elm$core$List$cons, arrow, description);
		} else {
			var key = maybeKey.a;
			return A2(
				$elm$core$List$cons,
				arrow,
				A2(
					$elm$core$List$cons,
					A2(
						$elm$html$Html$span,
						_List_fromArray(
							[$elm$browser$Debugger$Expando$purple]),
						_List_fromArray(
							[
								$elm$html$Html$text(key)
							])),
					A2(
						$elm$core$List$cons,
						$elm$html$Html$text(' = '),
						description)));
		}
	});
var $elm$browser$Debugger$Expando$red = A2($elm$html$Html$Attributes$style, 'color', 'rgb(196, 26, 22)');
var $elm$core$Tuple$second = function (_v0) {
	var y = _v0.b;
	return y;
};
var $elm$browser$Debugger$Expando$seqTypeToString = F2(
	function (n, seqType) {
		switch (seqType.$) {
			case 'ListSeq':
				return 'List(' + ($elm$core$String$fromInt(n) + ')');
			case 'SetSeq':
				return 'Set(' + ($elm$core$String$fromInt(n) + ')');
			default:
				return 'Array(' + ($elm$core$String$fromInt(n) + ')');
		}
	});
var $elm$core$String$slice = _String_slice;
var $elm$core$String$left = F2(
	function (n, string) {
		return (n < 1) ? '' : A3($elm$core$String$slice, 0, n, string);
	});
var $elm$core$String$right = F2(
	function (n, string) {
		return (n < 1) ? '' : A3(
			$elm$core$String$slice,
			-n,
			$elm$core$String$length(string),
			string);
	});
var $elm$browser$Debugger$Expando$elideMiddle = function (str) {
	return ($elm$core$String$length(str) <= 18) ? str : (A2($elm$core$String$left, 8, str) + ('...' + A2($elm$core$String$right, 8, str)));
};
var $elm$core$Dict$isEmpty = function (dict) {
	if (dict.$ === 'RBEmpty_elm_builtin') {
		return true;
	} else {
		return false;
	}
};
var $elm$browser$Debugger$Expando$viewExtraTinyRecord = F3(
	function (length, starter, entries) {
		if (!entries.b) {
			return _Utils_Tuple2(
				length + 1,
				_List_fromArray(
					[
						$elm$html$Html$text('}')
					]));
		} else {
			var field = entries.a;
			var rest = entries.b;
			var nextLength = (length + $elm$core$String$length(field)) + 1;
			if (nextLength > 18) {
				return _Utils_Tuple2(
					length + 2,
					_List_fromArray(
						[
							$elm$html$Html$text('…}')
						]));
			} else {
				var _v1 = A3($elm$browser$Debugger$Expando$viewExtraTinyRecord, nextLength, ',', rest);
				var finalLength = _v1.a;
				var otherHtmls = _v1.b;
				return _Utils_Tuple2(
					finalLength,
					A2(
						$elm$core$List$cons,
						$elm$html$Html$text(starter),
						A2(
							$elm$core$List$cons,
							A2(
								$elm$html$Html$span,
								_List_fromArray(
									[$elm$browser$Debugger$Expando$purple]),
								_List_fromArray(
									[
										$elm$html$Html$text(field)
									])),
							otherHtmls)));
			}
		}
	});
var $elm$browser$Debugger$Expando$viewTinyHelp = function (str) {
	return _Utils_Tuple2(
		$elm$core$String$length(str),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $elm$core$Maybe$withDefault = F2(
	function (_default, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return value;
		} else {
			return _default;
		}
	});
var $elm$browser$Debugger$Expando$viewExtraTiny = function (value) {
	if (value.$ === 'Record') {
		var record = value.b;
		return A3(
			$elm$browser$Debugger$Expando$viewExtraTinyRecord,
			0,
			'{',
			$elm$core$Dict$keys(record));
	} else {
		return $elm$browser$Debugger$Expando$viewTiny(value);
	}
};
var $elm$browser$Debugger$Expando$viewTiny = function (value) {
	switch (value.$) {
		case 'S':
			var stringRep = value.a;
			var str = $elm$browser$Debugger$Expando$elideMiddle(stringRep);
			return _Utils_Tuple2(
				$elm$core$String$length(str),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[$elm$browser$Debugger$Expando$red]),
						_List_fromArray(
							[
								$elm$html$Html$text(str)
							]))
					]));
		case 'Primitive':
			var stringRep = value.a;
			return _Utils_Tuple2(
				$elm$core$String$length(stringRep),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[$elm$browser$Debugger$Expando$blue]),
						_List_fromArray(
							[
								$elm$html$Html$text(stringRep)
							]))
					]));
		case 'Sequence':
			var seqType = value.a;
			var valueList = value.c;
			return $elm$browser$Debugger$Expando$viewTinyHelp(
				A2(
					$elm$browser$Debugger$Expando$seqTypeToString,
					$elm$core$List$length(valueList),
					seqType));
		case 'Dictionary':
			var keyValuePairs = value.b;
			return $elm$browser$Debugger$Expando$viewTinyHelp(
				'Dict(' + ($elm$core$String$fromInt(
					$elm$core$List$length(keyValuePairs)) + ')'));
		case 'Record':
			var record = value.b;
			return $elm$browser$Debugger$Expando$viewTinyRecord(record);
		default:
			if (!value.c.b) {
				var maybeName = value.a;
				return $elm$browser$Debugger$Expando$viewTinyHelp(
					A2($elm$core$Maybe$withDefault, 'Unit', maybeName));
			} else {
				var maybeName = value.a;
				var valueList = value.c;
				return $elm$browser$Debugger$Expando$viewTinyHelp(
					function () {
						if (maybeName.$ === 'Nothing') {
							return 'Tuple(' + ($elm$core$String$fromInt(
								$elm$core$List$length(valueList)) + ')');
						} else {
							var name = maybeName.a;
							return name + ' …';
						}
					}());
			}
	}
};
var $elm$browser$Debugger$Expando$viewTinyRecord = function (record) {
	return $elm$core$Dict$isEmpty(record) ? _Utils_Tuple2(
		2,
		_List_fromArray(
			[
				$elm$html$Html$text('{}')
			])) : A3(
		$elm$browser$Debugger$Expando$viewTinyRecordHelp,
		0,
		'{ ',
		$elm$core$Dict$toList(record));
};
var $elm$browser$Debugger$Expando$viewTinyRecordHelp = F3(
	function (length, starter, entries) {
		if (!entries.b) {
			return _Utils_Tuple2(
				length + 2,
				_List_fromArray(
					[
						$elm$html$Html$text(' }')
					]));
		} else {
			var _v1 = entries.a;
			var field = _v1.a;
			var value = _v1.b;
			var rest = entries.b;
			var fieldLen = $elm$core$String$length(field);
			var _v2 = $elm$browser$Debugger$Expando$viewExtraTiny(value);
			var valueLen = _v2.a;
			var valueHtmls = _v2.b;
			var newLength = ((length + fieldLen) + valueLen) + 5;
			if (newLength > 60) {
				return _Utils_Tuple2(
					length + 4,
					_List_fromArray(
						[
							$elm$html$Html$text(', … }')
						]));
			} else {
				var _v3 = A3($elm$browser$Debugger$Expando$viewTinyRecordHelp, newLength, ', ', rest);
				var finalLength = _v3.a;
				var otherHtmls = _v3.b;
				return _Utils_Tuple2(
					finalLength,
					A2(
						$elm$core$List$cons,
						$elm$html$Html$text(starter),
						A2(
							$elm$core$List$cons,
							A2(
								$elm$html$Html$span,
								_List_fromArray(
									[$elm$browser$Debugger$Expando$purple]),
								_List_fromArray(
									[
										$elm$html$Html$text(field)
									])),
							A2(
								$elm$core$List$cons,
								$elm$html$Html$text(' = '),
								A2(
									$elm$core$List$cons,
									A2($elm$html$Html$span, _List_Nil, valueHtmls),
									otherHtmls)))));
			}
		}
	});
var $elm$browser$Debugger$Expando$view = F2(
	function (maybeKey, expando) {
		switch (expando.$) {
			case 'S':
				var stringRep = expando.a;
				return A2(
					$elm$html$Html$div,
					$elm$browser$Debugger$Expando$leftPad(maybeKey),
					A3(
						$elm$browser$Debugger$Expando$lineStarter,
						maybeKey,
						$elm$core$Maybe$Nothing,
						_List_fromArray(
							[
								A2(
								$elm$html$Html$span,
								_List_fromArray(
									[$elm$browser$Debugger$Expando$red]),
								_List_fromArray(
									[
										$elm$html$Html$text(stringRep)
									]))
							])));
			case 'Primitive':
				var stringRep = expando.a;
				return A2(
					$elm$html$Html$div,
					$elm$browser$Debugger$Expando$leftPad(maybeKey),
					A3(
						$elm$browser$Debugger$Expando$lineStarter,
						maybeKey,
						$elm$core$Maybe$Nothing,
						_List_fromArray(
							[
								A2(
								$elm$html$Html$span,
								_List_fromArray(
									[$elm$browser$Debugger$Expando$blue]),
								_List_fromArray(
									[
										$elm$html$Html$text(stringRep)
									]))
							])));
			case 'Sequence':
				var seqType = expando.a;
				var isClosed = expando.b;
				var valueList = expando.c;
				return A4($elm$browser$Debugger$Expando$viewSequence, maybeKey, seqType, isClosed, valueList);
			case 'Dictionary':
				var isClosed = expando.a;
				var keyValuePairs = expando.b;
				return A3($elm$browser$Debugger$Expando$viewDictionary, maybeKey, isClosed, keyValuePairs);
			case 'Record':
				var isClosed = expando.a;
				var valueDict = expando.b;
				return A3($elm$browser$Debugger$Expando$viewRecord, maybeKey, isClosed, valueDict);
			default:
				var maybeName = expando.a;
				var isClosed = expando.b;
				var valueList = expando.c;
				return A4($elm$browser$Debugger$Expando$viewConstructor, maybeKey, maybeName, isClosed, valueList);
		}
	});
var $elm$browser$Debugger$Expando$viewConstructor = F4(
	function (maybeKey, maybeName, isClosed, valueList) {
		var tinyArgs = A2(
			$elm$core$List$map,
			A2($elm$core$Basics$composeL, $elm$core$Tuple$second, $elm$browser$Debugger$Expando$viewExtraTiny),
			valueList);
		var description = function () {
			var _v7 = _Utils_Tuple2(maybeName, tinyArgs);
			if (_v7.a.$ === 'Nothing') {
				if (!_v7.b.b) {
					var _v8 = _v7.a;
					return _List_fromArray(
						[
							$elm$html$Html$text('()')
						]);
				} else {
					var _v9 = _v7.a;
					var _v10 = _v7.b;
					var x = _v10.a;
					var xs = _v10.b;
					return A2(
						$elm$core$List$cons,
						$elm$html$Html$text('( '),
						A2(
							$elm$core$List$cons,
							A2($elm$html$Html$span, _List_Nil, x),
							A3(
								$elm$core$List$foldr,
								F2(
									function (args, rest) {
										return A2(
											$elm$core$List$cons,
											$elm$html$Html$text(', '),
											A2(
												$elm$core$List$cons,
												A2($elm$html$Html$span, _List_Nil, args),
												rest));
									}),
								_List_fromArray(
									[
										$elm$html$Html$text(' )')
									]),
								xs)));
				}
			} else {
				if (!_v7.b.b) {
					var name = _v7.a.a;
					return _List_fromArray(
						[
							$elm$html$Html$text(name)
						]);
				} else {
					var name = _v7.a.a;
					var _v11 = _v7.b;
					var x = _v11.a;
					var xs = _v11.b;
					return A2(
						$elm$core$List$cons,
						$elm$html$Html$text(name + ' '),
						A2(
							$elm$core$List$cons,
							A2($elm$html$Html$span, _List_Nil, x),
							A3(
								$elm$core$List$foldr,
								F2(
									function (args, rest) {
										return A2(
											$elm$core$List$cons,
											$elm$html$Html$text(' '),
											A2(
												$elm$core$List$cons,
												A2($elm$html$Html$span, _List_Nil, args),
												rest));
									}),
								_List_Nil,
								xs)));
				}
			}
		}();
		var _v4 = function () {
			if (!valueList.b) {
				return _Utils_Tuple2(
					$elm$core$Maybe$Nothing,
					A2($elm$html$Html$div, _List_Nil, _List_Nil));
			} else {
				if (!valueList.b.b) {
					var entry = valueList.a;
					switch (entry.$) {
						case 'S':
							return _Utils_Tuple2(
								$elm$core$Maybe$Nothing,
								A2($elm$html$Html$div, _List_Nil, _List_Nil));
						case 'Primitive':
							return _Utils_Tuple2(
								$elm$core$Maybe$Nothing,
								A2($elm$html$Html$div, _List_Nil, _List_Nil));
						case 'Sequence':
							var subValueList = entry.c;
							return _Utils_Tuple2(
								$elm$core$Maybe$Just(isClosed),
								isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : A2(
									$elm$html$Html$map,
									A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, 0),
									$elm$browser$Debugger$Expando$viewSequenceOpen(subValueList)));
						case 'Dictionary':
							var keyValuePairs = entry.b;
							return _Utils_Tuple2(
								$elm$core$Maybe$Just(isClosed),
								isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : A2(
									$elm$html$Html$map,
									A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, 0),
									$elm$browser$Debugger$Expando$viewDictionaryOpen(keyValuePairs)));
						case 'Record':
							var record = entry.b;
							return _Utils_Tuple2(
								$elm$core$Maybe$Just(isClosed),
								isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : A2(
									$elm$html$Html$map,
									A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, 0),
									$elm$browser$Debugger$Expando$viewRecordOpen(record)));
						default:
							var subValueList = entry.c;
							return _Utils_Tuple2(
								$elm$core$Maybe$Just(isClosed),
								isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : A2(
									$elm$html$Html$map,
									A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, 0),
									$elm$browser$Debugger$Expando$viewConstructorOpen(subValueList)));
					}
				} else {
					return _Utils_Tuple2(
						$elm$core$Maybe$Just(isClosed),
						isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : $elm$browser$Debugger$Expando$viewConstructorOpen(valueList));
				}
			}
		}();
		var maybeIsClosed = _v4.a;
		var openHtml = _v4.b;
		return A2(
			$elm$html$Html$div,
			$elm$browser$Debugger$Expando$leftPad(maybeKey),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Events$onClick($elm$browser$Debugger$Expando$Toggle)
						]),
					A3($elm$browser$Debugger$Expando$lineStarter, maybeKey, maybeIsClosed, description)),
					openHtml
				]));
	});
var $elm$browser$Debugger$Expando$viewConstructorEntry = F2(
	function (index, value) {
		return A2(
			$elm$html$Html$map,
			A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, index),
			A2(
				$elm$browser$Debugger$Expando$view,
				$elm$core$Maybe$Just(
					$elm$core$String$fromInt(index)),
				value));
	});
var $elm$browser$Debugger$Expando$viewConstructorOpen = function (valueList) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		A2($elm$core$List$indexedMap, $elm$browser$Debugger$Expando$viewConstructorEntry, valueList));
};
var $elm$browser$Debugger$Expando$viewDictionary = F3(
	function (maybeKey, isClosed, keyValuePairs) {
		var starter = 'Dict(' + ($elm$core$String$fromInt(
			$elm$core$List$length(keyValuePairs)) + ')');
		return A2(
			$elm$html$Html$div,
			$elm$browser$Debugger$Expando$leftPad(maybeKey),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Events$onClick($elm$browser$Debugger$Expando$Toggle)
						]),
					A3(
						$elm$browser$Debugger$Expando$lineStarter,
						maybeKey,
						$elm$core$Maybe$Just(isClosed),
						_List_fromArray(
							[
								$elm$html$Html$text(starter)
							]))),
					isClosed ? $elm$html$Html$text('') : $elm$browser$Debugger$Expando$viewDictionaryOpen(keyValuePairs)
				]));
	});
var $elm$browser$Debugger$Expando$viewDictionaryEntry = F2(
	function (index, _v2) {
		var key = _v2.a;
		var value = _v2.b;
		switch (key.$) {
			case 'S':
				var stringRep = key.a;
				return A2(
					$elm$html$Html$map,
					A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$Value, index),
					A2(
						$elm$browser$Debugger$Expando$view,
						$elm$core$Maybe$Just(stringRep),
						value));
			case 'Primitive':
				var stringRep = key.a;
				return A2(
					$elm$html$Html$map,
					A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$Value, index),
					A2(
						$elm$browser$Debugger$Expando$view,
						$elm$core$Maybe$Just(stringRep),
						value));
			default:
				return A2(
					$elm$html$Html$div,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							$elm$html$Html$map,
							A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$Key, index),
							A2(
								$elm$browser$Debugger$Expando$view,
								$elm$core$Maybe$Just('key'),
								key)),
							A2(
							$elm$html$Html$map,
							A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$Value, index),
							A2(
								$elm$browser$Debugger$Expando$view,
								$elm$core$Maybe$Just('value'),
								value))
						]));
		}
	});
var $elm$browser$Debugger$Expando$viewDictionaryOpen = function (keyValuePairs) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		A2($elm$core$List$indexedMap, $elm$browser$Debugger$Expando$viewDictionaryEntry, keyValuePairs));
};
var $elm$browser$Debugger$Expando$viewRecord = F3(
	function (maybeKey, isClosed, record) {
		var _v1 = isClosed ? _Utils_Tuple3(
			$elm$browser$Debugger$Expando$viewTinyRecord(record).b,
			$elm$html$Html$text(''),
			$elm$html$Html$text('')) : _Utils_Tuple3(
			_List_fromArray(
				[
					$elm$html$Html$text('{')
				]),
			$elm$browser$Debugger$Expando$viewRecordOpen(record),
			A2(
				$elm$html$Html$div,
				$elm$browser$Debugger$Expando$leftPad(
					$elm$core$Maybe$Just(_Utils_Tuple0)),
				_List_fromArray(
					[
						$elm$html$Html$text('}')
					])));
		var start = _v1.a;
		var middle = _v1.b;
		var end = _v1.c;
		return A2(
			$elm$html$Html$div,
			$elm$browser$Debugger$Expando$leftPad(maybeKey),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Events$onClick($elm$browser$Debugger$Expando$Toggle)
						]),
					A3(
						$elm$browser$Debugger$Expando$lineStarter,
						maybeKey,
						$elm$core$Maybe$Just(isClosed),
						start)),
					middle,
					end
				]));
	});
var $elm$browser$Debugger$Expando$viewRecordEntry = function (_v0) {
	var field = _v0.a;
	var value = _v0.b;
	return A2(
		$elm$html$Html$map,
		$elm$browser$Debugger$Expando$Field(field),
		A2(
			$elm$browser$Debugger$Expando$view,
			$elm$core$Maybe$Just(field),
			value));
};
var $elm$browser$Debugger$Expando$viewRecordOpen = function (record) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		A2(
			$elm$core$List$map,
			$elm$browser$Debugger$Expando$viewRecordEntry,
			$elm$core$Dict$toList(record)));
};
var $elm$browser$Debugger$Expando$viewSequence = F4(
	function (maybeKey, seqType, isClosed, valueList) {
		var starter = A2(
			$elm$browser$Debugger$Expando$seqTypeToString,
			$elm$core$List$length(valueList),
			seqType);
		return A2(
			$elm$html$Html$div,
			$elm$browser$Debugger$Expando$leftPad(maybeKey),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Events$onClick($elm$browser$Debugger$Expando$Toggle)
						]),
					A3(
						$elm$browser$Debugger$Expando$lineStarter,
						maybeKey,
						$elm$core$Maybe$Just(isClosed),
						_List_fromArray(
							[
								$elm$html$Html$text(starter)
							]))),
					isClosed ? $elm$html$Html$text('') : $elm$browser$Debugger$Expando$viewSequenceOpen(valueList)
				]));
	});
var $elm$browser$Debugger$Expando$viewSequenceOpen = function (values) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		A2($elm$core$List$indexedMap, $elm$browser$Debugger$Expando$viewConstructorEntry, values));
};
var $elm$browser$Debugger$Main$viewExpando = F3(
	function (expandoMsg, expandoModel, layout) {
		var block = $elm$browser$Debugger$Main$toMouseBlocker(layout);
		var _v0 = $elm$browser$Debugger$Main$toExpandoPercents(layout);
		var w = _v0.a;
		var h = _v0.b;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'display', 'block'),
					A2($elm$html$Html$Attributes$style, 'width', 'calc(' + (w + ' - 4em)')),
					A2($elm$html$Html$Attributes$style, 'height', 'calc(' + (h + ' - 4em)')),
					A2($elm$html$Html$Attributes$style, 'padding', '2em'),
					A2($elm$html$Html$Attributes$style, 'margin', '0'),
					A2($elm$html$Html$Attributes$style, 'overflow', 'auto'),
					A2($elm$html$Html$Attributes$style, 'pointer-events', block),
					A2($elm$html$Html$Attributes$style, '-webkit-user-select', block),
					A2($elm$html$Html$Attributes$style, '-moz-user-select', block),
					A2($elm$html$Html$Attributes$style, '-ms-user-select', block),
					A2($elm$html$Html$Attributes$style, 'user-select', block)
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'color', '#ccc'),
							A2($elm$html$Html$Attributes$style, 'padding', '0 0 1em 0')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('-- MESSAGE')
						])),
					A2(
					$elm$html$Html$map,
					$elm$browser$Debugger$Main$TweakExpandoMsg,
					A2($elm$browser$Debugger$Expando$view, $elm$core$Maybe$Nothing, expandoMsg)),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'color', '#ccc'),
							A2($elm$html$Html$Attributes$style, 'padding', '1em 0')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('-- MODEL')
						])),
					A2(
					$elm$html$Html$map,
					$elm$browser$Debugger$Main$TweakExpandoModel,
					A2($elm$browser$Debugger$Expando$view, $elm$core$Maybe$Nothing, expandoModel))
				]));
	});
var $elm$browser$Debugger$Main$Jump = function (a) {
	return {$: 'Jump', a: a};
};
var $elm$virtual_dom$VirtualDom$lazy = _VirtualDom_lazy;
var $elm$html$Html$Lazy$lazy = $elm$virtual_dom$VirtualDom$lazy;
var $elm$browser$Debugger$Main$toHistoryPercents = function (layout) {
	if (layout.$ === 'Horizontal') {
		var x = layout.b;
		return _Utils_Tuple2(
			$elm$browser$Debugger$Main$toPercent(x),
			'100%');
	} else {
		var y = layout.c;
		return _Utils_Tuple2(
			'100%',
			$elm$browser$Debugger$Main$toPercent(1 - y));
	}
};
var $elm$virtual_dom$VirtualDom$lazy3 = _VirtualDom_lazy3;
var $elm$html$Html$Lazy$lazy3 = $elm$virtual_dom$VirtualDom$lazy3;
var $elm$html$Html$Attributes$class = $elm$html$Html$Attributes$stringProperty('className');
var $elm$browser$Debugger$History$idForMessageIndex = function (index) {
	return 'msg-' + $elm$core$String$fromInt(index);
};
var $elm$html$Html$Attributes$title = $elm$html$Html$Attributes$stringProperty('title');
var $elm$browser$Debugger$History$viewMessage = F3(
	function (currentIndex, index, msg) {
		var messageName = _Debugger_messageToString(msg);
		var className = _Utils_eq(currentIndex, index) ? 'elm-debugger-entry elm-debugger-entry-selected' : 'elm-debugger-entry';
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$id(
					$elm$browser$Debugger$History$idForMessageIndex(index)),
					$elm$html$Html$Attributes$class(className),
					$elm$html$Html$Events$onClick(index)
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$title(messageName),
							$elm$html$Html$Attributes$class('elm-debugger-entry-content')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(messageName)
						])),
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('elm-debugger-entry-index')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(
							$elm$core$String$fromInt(index))
						]))
				]));
	});
var $elm$browser$Debugger$History$consMsg = F3(
	function (currentIndex, msg, _v0) {
		var index = _v0.a;
		var rest = _v0.b;
		return _Utils_Tuple2(
			index + 1,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$elm$core$String$fromInt(index),
					A4($elm$html$Html$Lazy$lazy3, $elm$browser$Debugger$History$viewMessage, currentIndex, index, msg)),
				rest));
	});
var $elm$core$Array$length = function (_v0) {
	var len = _v0.a;
	return len;
};
var $elm$core$Basics$neq = _Utils_notEqual;
var $elm$virtual_dom$VirtualDom$keyedNode = function (tag) {
	return _VirtualDom_keyedNode(
		_VirtualDom_noScript(tag));
};
var $elm$html$Html$Keyed$node = $elm$virtual_dom$VirtualDom$keyedNode;
var $elm$browser$Debugger$History$maxSnapshotSize = 31;
var $elm$browser$Debugger$History$showMoreButton = function (numMessages) {
	var nextIndex = (numMessages - 1) - ($elm$browser$Debugger$History$maxSnapshotSize * 2);
	var labelText = 'View more messages';
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('elm-debugger-entry'),
				$elm$html$Html$Events$onClick(nextIndex)
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$span,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$title(labelText),
						$elm$html$Html$Attributes$class('elm-debugger-entry-content')
					]),
				_List_fromArray(
					[
						$elm$html$Html$text(labelText)
					])),
				A2(
				$elm$html$Html$span,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('elm-debugger-entry-index')
					]),
				_List_Nil)
			]));
};
var $elm$browser$Debugger$History$styles = A3(
	$elm$html$Html$node,
	'style',
	_List_Nil,
	_List_fromArray(
		[
			$elm$html$Html$text('\n\n.elm-debugger-entry {\n  cursor: pointer;\n  width: 100%;\n  box-sizing: border-box;\n  padding: 8px;\n}\n\n.elm-debugger-entry:hover {\n  background-color: rgb(41, 41, 41);\n}\n\n.elm-debugger-entry-selected, .elm-debugger-entry-selected:hover {\n  background-color: rgb(10, 10, 10);\n}\n\n.elm-debugger-entry-content {\n  width: calc(100% - 40px);\n  padding: 0 5px;\n  box-sizing: border-box;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  display: inline-block;\n}\n\n.elm-debugger-entry-index {\n  color: #666;\n  width: 40px;\n  text-align: right;\n  display: block;\n  float: right;\n}\n\n')
		]));
var $elm$core$Basics$ge = _Utils_ge;
var $elm$browser$Debugger$History$viewSnapshot = F3(
	function (selectedIndex, index, _v0) {
		var messages = _v0.messages;
		return A3(
			$elm$html$Html$Keyed$node,
			'div',
			_List_Nil,
			A3(
				$elm$core$Array$foldr,
				$elm$browser$Debugger$History$consMsg(selectedIndex),
				_Utils_Tuple2(index, _List_Nil),
				messages).b);
	});
var $elm$browser$Debugger$History$consSnapshot = F3(
	function (selectedIndex, snapshot, _v0) {
		var index = _v0.a;
		var rest = _v0.b;
		var nextIndex = index + $elm$core$Array$length(snapshot.messages);
		var selectedIndexHelp = ((_Utils_cmp(nextIndex, selectedIndex) > 0) && (_Utils_cmp(selectedIndex, index) > -1)) ? selectedIndex : (-1);
		return _Utils_Tuple2(
			nextIndex,
			A2(
				$elm$core$List$cons,
				A4($elm$html$Html$Lazy$lazy3, $elm$browser$Debugger$History$viewSnapshot, selectedIndexHelp, index, snapshot),
				rest));
	});
var $elm$core$Elm$JsArray$foldl = _JsArray_foldl;
var $elm$core$Array$foldl = F3(
	function (func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(
			function (node, acc) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldl, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldl, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldl,
			func,
			A3($elm$core$Elm$JsArray$foldl, helper, baseCase, tree),
			tail);
	});
var $elm$browser$Debugger$History$viewAllSnapshots = F3(
	function (selectedIndex, startIndex, snapshots) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			A3(
				$elm$core$Array$foldl,
				$elm$browser$Debugger$History$consSnapshot(selectedIndex),
				_Utils_Tuple2(startIndex, _List_Nil),
				snapshots).b);
	});
var $elm$core$Array$fromListHelp = F3(
	function (list, nodeList, nodeListSize) {
		fromListHelp:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, list);
			var jsArray = _v0.a;
			var remainingItems = _v0.b;
			if (_Utils_cmp(
				$elm$core$Elm$JsArray$length(jsArray),
				$elm$core$Array$branchFactor) < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					true,
					{nodeList: nodeList, nodeListSize: nodeListSize, tail: jsArray});
			} else {
				var $temp$list = remainingItems,
					$temp$nodeList = A2(
					$elm$core$List$cons,
					$elm$core$Array$Leaf(jsArray),
					nodeList),
					$temp$nodeListSize = nodeListSize + 1;
				list = $temp$list;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue fromListHelp;
			}
		}
	});
var $elm$core$Array$fromList = function (list) {
	if (!list.b) {
		return $elm$core$Array$empty;
	} else {
		return A3($elm$core$Array$fromListHelp, list, _List_Nil, 0);
	}
};
var $elm$core$Bitwise$and = _Bitwise_and;
var $elm$core$Bitwise$shiftRightZfBy = _Bitwise_shiftRightZfBy;
var $elm$core$Array$bitMask = 4294967295 >>> (32 - $elm$core$Array$shiftStep);
var $elm$core$Elm$JsArray$unsafeGet = _JsArray_unsafeGet;
var $elm$core$Array$getHelp = F3(
	function (shift, index, tree) {
		getHelp:
		while (true) {
			var pos = $elm$core$Array$bitMask & (index >>> shift);
			var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (_v0.$ === 'SubTree') {
				var subTree = _v0.a;
				var $temp$shift = shift - $elm$core$Array$shiftStep,
					$temp$index = index,
					$temp$tree = subTree;
				shift = $temp$shift;
				index = $temp$index;
				tree = $temp$tree;
				continue getHelp;
			} else {
				var values = _v0.a;
				return A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, values);
			}
		}
	});
var $elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
var $elm$core$Array$tailIndex = function (len) {
	return (len >>> 5) << 5;
};
var $elm$core$Array$get = F2(
	function (index, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? $elm$core$Maybe$Nothing : ((_Utils_cmp(
			index,
			$elm$core$Array$tailIndex(len)) > -1) ? $elm$core$Maybe$Just(
			A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, tail)) : $elm$core$Maybe$Just(
			A3($elm$core$Array$getHelp, startShift, index, tree)));
	});
var $elm$core$Elm$JsArray$appendN = _JsArray_appendN;
var $elm$core$Elm$JsArray$slice = _JsArray_slice;
var $elm$core$Array$appendHelpBuilder = F2(
	function (tail, builder) {
		var tailLen = $elm$core$Elm$JsArray$length(tail);
		var notAppended = ($elm$core$Array$branchFactor - $elm$core$Elm$JsArray$length(builder.tail)) - tailLen;
		var appended = A3($elm$core$Elm$JsArray$appendN, $elm$core$Array$branchFactor, builder.tail, tail);
		return (notAppended < 0) ? {
			nodeList: A2(
				$elm$core$List$cons,
				$elm$core$Array$Leaf(appended),
				builder.nodeList),
			nodeListSize: builder.nodeListSize + 1,
			tail: A3($elm$core$Elm$JsArray$slice, notAppended, tailLen, tail)
		} : ((!notAppended) ? {
			nodeList: A2(
				$elm$core$List$cons,
				$elm$core$Array$Leaf(appended),
				builder.nodeList),
			nodeListSize: builder.nodeListSize + 1,
			tail: $elm$core$Elm$JsArray$empty
		} : {nodeList: builder.nodeList, nodeListSize: builder.nodeListSize, tail: appended});
	});
var $elm$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (n <= 0) {
				return list;
			} else {
				if (!list.b) {
					return list;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs;
					n = $temp$n;
					list = $temp$list;
					continue drop;
				}
			}
		}
	});
var $elm$core$Array$sliceLeft = F2(
	function (from, array) {
		var len = array.a;
		var tree = array.c;
		var tail = array.d;
		if (!from) {
			return array;
		} else {
			if (_Utils_cmp(
				from,
				$elm$core$Array$tailIndex(len)) > -1) {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					len - from,
					$elm$core$Array$shiftStep,
					$elm$core$Elm$JsArray$empty,
					A3(
						$elm$core$Elm$JsArray$slice,
						from - $elm$core$Array$tailIndex(len),
						$elm$core$Elm$JsArray$length(tail),
						tail));
			} else {
				var skipNodes = (from / $elm$core$Array$branchFactor) | 0;
				var helper = F2(
					function (node, acc) {
						if (node.$ === 'SubTree') {
							var subTree = node.a;
							return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
						} else {
							var leaf = node.a;
							return A2($elm$core$List$cons, leaf, acc);
						}
					});
				var leafNodes = A3(
					$elm$core$Elm$JsArray$foldr,
					helper,
					_List_fromArray(
						[tail]),
					tree);
				var nodesToInsert = A2($elm$core$List$drop, skipNodes, leafNodes);
				if (!nodesToInsert.b) {
					return $elm$core$Array$empty;
				} else {
					var head = nodesToInsert.a;
					var rest = nodesToInsert.b;
					var firstSlice = from - (skipNodes * $elm$core$Array$branchFactor);
					var initialBuilder = {
						nodeList: _List_Nil,
						nodeListSize: 0,
						tail: A3(
							$elm$core$Elm$JsArray$slice,
							firstSlice,
							$elm$core$Elm$JsArray$length(head),
							head)
					};
					return A2(
						$elm$core$Array$builderToArray,
						true,
						A3($elm$core$List$foldl, $elm$core$Array$appendHelpBuilder, initialBuilder, rest));
				}
			}
		}
	});
var $elm$core$Array$fetchNewTail = F4(
	function (shift, end, treeEnd, tree) {
		fetchNewTail:
		while (true) {
			var pos = $elm$core$Array$bitMask & (treeEnd >>> shift);
			var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (_v0.$ === 'SubTree') {
				var sub = _v0.a;
				var $temp$shift = shift - $elm$core$Array$shiftStep,
					$temp$end = end,
					$temp$treeEnd = treeEnd,
					$temp$tree = sub;
				shift = $temp$shift;
				end = $temp$end;
				treeEnd = $temp$treeEnd;
				tree = $temp$tree;
				continue fetchNewTail;
			} else {
				var values = _v0.a;
				return A3($elm$core$Elm$JsArray$slice, 0, $elm$core$Array$bitMask & end, values);
			}
		}
	});
var $elm$core$Array$hoistTree = F3(
	function (oldShift, newShift, tree) {
		hoistTree:
		while (true) {
			if ((_Utils_cmp(oldShift, newShift) < 1) || (!$elm$core$Elm$JsArray$length(tree))) {
				return tree;
			} else {
				var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, 0, tree);
				if (_v0.$ === 'SubTree') {
					var sub = _v0.a;
					var $temp$oldShift = oldShift - $elm$core$Array$shiftStep,
						$temp$newShift = newShift,
						$temp$tree = sub;
					oldShift = $temp$oldShift;
					newShift = $temp$newShift;
					tree = $temp$tree;
					continue hoistTree;
				} else {
					return tree;
				}
			}
		}
	});
var $elm$core$Elm$JsArray$unsafeSet = _JsArray_unsafeSet;
var $elm$core$Array$sliceTree = F3(
	function (shift, endIdx, tree) {
		var lastPos = $elm$core$Array$bitMask & (endIdx >>> shift);
		var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, lastPos, tree);
		if (_v0.$ === 'SubTree') {
			var sub = _v0.a;
			var newSub = A3($elm$core$Array$sliceTree, shift - $elm$core$Array$shiftStep, endIdx, sub);
			return (!$elm$core$Elm$JsArray$length(newSub)) ? A3($elm$core$Elm$JsArray$slice, 0, lastPos, tree) : A3(
				$elm$core$Elm$JsArray$unsafeSet,
				lastPos,
				$elm$core$Array$SubTree(newSub),
				A3($elm$core$Elm$JsArray$slice, 0, lastPos + 1, tree));
		} else {
			return A3($elm$core$Elm$JsArray$slice, 0, lastPos, tree);
		}
	});
var $elm$core$Array$sliceRight = F2(
	function (end, array) {
		var len = array.a;
		var startShift = array.b;
		var tree = array.c;
		var tail = array.d;
		if (_Utils_eq(end, len)) {
			return array;
		} else {
			if (_Utils_cmp(
				end,
				$elm$core$Array$tailIndex(len)) > -1) {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					end,
					startShift,
					tree,
					A3($elm$core$Elm$JsArray$slice, 0, $elm$core$Array$bitMask & end, tail));
			} else {
				var endIdx = $elm$core$Array$tailIndex(end);
				var depth = $elm$core$Basics$floor(
					A2(
						$elm$core$Basics$logBase,
						$elm$core$Array$branchFactor,
						A2($elm$core$Basics$max, 1, endIdx - 1)));
				var newShift = A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep);
				return A4(
					$elm$core$Array$Array_elm_builtin,
					end,
					newShift,
					A3(
						$elm$core$Array$hoistTree,
						startShift,
						newShift,
						A3($elm$core$Array$sliceTree, startShift, endIdx, tree)),
					A4($elm$core$Array$fetchNewTail, startShift, end, endIdx, tree));
			}
		}
	});
var $elm$core$Array$translateIndex = F2(
	function (index, _v0) {
		var len = _v0.a;
		var posIndex = (index < 0) ? (len + index) : index;
		return (posIndex < 0) ? 0 : ((_Utils_cmp(posIndex, len) > 0) ? len : posIndex);
	});
var $elm$core$Array$slice = F3(
	function (from, to, array) {
		var correctTo = A2($elm$core$Array$translateIndex, to, array);
		var correctFrom = A2($elm$core$Array$translateIndex, from, array);
		return (_Utils_cmp(correctFrom, correctTo) > 0) ? $elm$core$Array$empty : A2(
			$elm$core$Array$sliceLeft,
			correctFrom,
			A2($elm$core$Array$sliceRight, correctTo, array));
	});
var $elm$browser$Debugger$History$viewRecentSnapshots = F3(
	function (selectedIndex, recentMessagesNum, snapshots) {
		var messagesToFill = $elm$browser$Debugger$History$maxSnapshotSize - recentMessagesNum;
		var arrayLength = $elm$core$Array$length(snapshots);
		var snapshotsToRender = function () {
			var _v0 = _Utils_Tuple2(
				A2($elm$core$Array$get, arrayLength - 2, snapshots),
				A2($elm$core$Array$get, arrayLength - 1, snapshots));
			if ((_v0.a.$ === 'Just') && (_v0.b.$ === 'Just')) {
				var fillerSnapshot = _v0.a.a;
				var recentSnapshot = _v0.b.a;
				return $elm$core$Array$fromList(
					_List_fromArray(
						[
							{
							messages: A3($elm$core$Array$slice, 0, messagesToFill, fillerSnapshot.messages),
							model: fillerSnapshot.model
						},
							recentSnapshot
						]));
			} else {
				return snapshots;
			}
		}();
		var startingIndex = ((arrayLength * $elm$browser$Debugger$History$maxSnapshotSize) - $elm$browser$Debugger$History$maxSnapshotSize) - messagesToFill;
		return A3($elm$browser$Debugger$History$viewAllSnapshots, selectedIndex, startingIndex, snapshotsToRender);
	});
var $elm$browser$Debugger$History$view = F2(
	function (maybeIndex, _v0) {
		var snapshots = _v0.snapshots;
		var recent = _v0.recent;
		var numMessages = _v0.numMessages;
		var recentMessageStartIndex = numMessages - recent.numMessages;
		var index = A2($elm$core$Maybe$withDefault, -1, maybeIndex);
		var newStuff = A3(
			$elm$html$Html$Keyed$node,
			'div',
			_List_Nil,
			A3(
				$elm$core$List$foldr,
				$elm$browser$Debugger$History$consMsg(index),
				_Utils_Tuple2(recentMessageStartIndex, _List_Nil),
				recent.messages).b);
		var onlyRenderRecentMessages = (!_Utils_eq(index, -1)) || ($elm$core$Array$length(snapshots) < 2);
		var oldStuff = onlyRenderRecentMessages ? A4($elm$html$Html$Lazy$lazy3, $elm$browser$Debugger$History$viewAllSnapshots, index, 0, snapshots) : A4($elm$html$Html$Lazy$lazy3, $elm$browser$Debugger$History$viewRecentSnapshots, index, recent.numMessages, snapshots);
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$id('elm-debugger-sidebar'),
					A2($elm$html$Html$Attributes$style, 'width', '100%'),
					A2($elm$html$Html$Attributes$style, 'overflow-y', 'auto'),
					A2($elm$html$Html$Attributes$style, 'height', 'calc(100% - 72px)')
				]),
			A2(
				$elm$core$List$cons,
				$elm$browser$Debugger$History$styles,
				A2(
					$elm$core$List$cons,
					newStuff,
					A2(
						$elm$core$List$cons,
						oldStuff,
						onlyRenderRecentMessages ? _List_Nil : _List_fromArray(
							[
								$elm$browser$Debugger$History$showMoreButton(numMessages)
							])))));
	});
var $elm$browser$Debugger$Main$SwapLayout = {$: 'SwapLayout'};
var $elm$browser$Debugger$Main$toHistoryIcon = function (layout) {
	if (layout.$ === 'Horizontal') {
		return 'M13 1a3 3 0 0 1 3 3v8a3 3 0 0 1-3 3h-10a3 3 0 0 1-3-3v-8a3 3 0 0 1 3-3z M13 3h-10a1 1 0 0 0-1 1v5h12v-5a1 1 0 0 0-1-1z M14 10h-12v2a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1z';
	} else {
		return 'M0 4a3 3 0 0 1 3-3h10a3 3 0 0 1 3 3v8a3 3 0 0 1-3 3h-10a3 3 0 0 1-3-3z M2 4v8a1 1 0 0 0 1 1h2v-10h-2a1 1 0 0 0-1 1z M6 3v10h7a1 1 0 0 0 1-1v-8a1 1 0 0 0-1-1z';
	}
};
var $elm$browser$Debugger$Main$icon = function (path) {
	return A4(
		$elm$virtual_dom$VirtualDom$nodeNS,
		'http://www.w3.org/2000/svg',
		'svg',
		_List_fromArray(
			[
				A2($elm$virtual_dom$VirtualDom$attribute, 'viewBox', '0 0 16 16'),
				A2($elm$virtual_dom$VirtualDom$attribute, 'xmlns', 'http://www.w3.org/2000/svg'),
				A2($elm$virtual_dom$VirtualDom$attribute, 'fill', 'currentColor'),
				A2($elm$virtual_dom$VirtualDom$attribute, 'width', '16px'),
				A2($elm$virtual_dom$VirtualDom$attribute, 'height', '16px')
			]),
		_List_fromArray(
			[
				A4(
				$elm$virtual_dom$VirtualDom$nodeNS,
				'http://www.w3.org/2000/svg',
				'path',
				_List_fromArray(
					[
						A2($elm$virtual_dom$VirtualDom$attribute, 'd', path)
					]),
				_List_Nil)
			]));
};
var $elm$browser$Debugger$Main$viewHistoryButton = F3(
	function (label, msg, path) {
		return A2(
			$elm$html$Html$button,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'display', 'flex'),
					A2($elm$html$Html$Attributes$style, 'flex-direction', 'row'),
					A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
					A2($elm$html$Html$Attributes$style, 'background', 'none'),
					A2($elm$html$Html$Attributes$style, 'border', 'none'),
					A2($elm$html$Html$Attributes$style, 'color', 'inherit'),
					A2($elm$html$Html$Attributes$style, 'cursor', 'pointer'),
					$elm$html$Html$Events$onClick(msg)
				]),
			_List_fromArray(
				[
					$elm$browser$Debugger$Main$icon(path),
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'padding-left', '6px')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(label)
						]))
				]));
	});
var $elm$browser$Debugger$Main$viewHistoryOptions = function (layout) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'width', '100%'),
				A2($elm$html$Html$Attributes$style, 'height', '36px'),
				A2($elm$html$Html$Attributes$style, 'display', 'flex'),
				A2($elm$html$Html$Attributes$style, 'flex-direction', 'row'),
				A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
				A2($elm$html$Html$Attributes$style, 'justify-content', 'space-between'),
				A2($elm$html$Html$Attributes$style, 'background-color', 'rgb(50, 50, 50)')
			]),
		_List_fromArray(
			[
				A3(
				$elm$browser$Debugger$Main$viewHistoryButton,
				'Swap Layout',
				$elm$browser$Debugger$Main$SwapLayout,
				$elm$browser$Debugger$Main$toHistoryIcon(layout)),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'display', 'flex'),
						A2($elm$html$Html$Attributes$style, 'flex-direction', 'row'),
						A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
						A2($elm$html$Html$Attributes$style, 'justify-content', 'space-between')
					]),
				_List_fromArray(
					[
						A3($elm$browser$Debugger$Main$viewHistoryButton, 'Import', $elm$browser$Debugger$Main$Import, 'M5 1a1 1 0 0 1 0 2h-2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1a1 1 0 0 1 2 0a3 3 0 0 1-3 3h-10a3 3 0 0 1-3-3v-8a3 3 0 0 1 3-3z M10 2a1 1 0 0 0 -2 0v6a1 1 0 0 0 1 1h6a1 1 0 0 0 0-2h-3.586l4.293-4.293a1 1 0 0 0-1.414-1.414l-4.293 4.293z'),
						A3($elm$browser$Debugger$Main$viewHistoryButton, 'Export', $elm$browser$Debugger$Main$Export, 'M5 1a1 1 0 0 1 0 2h-2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1 a1 1 0 0 1 2 0a3 3 0 0 1-3 3h-10a3 3 0 0 1-3-3v-8a3 3 0 0 1 3-3z M9 3a1 1 0 1 1 0-2h6a1 1 0 0 1 1 1v6a1 1 0 1 1-2 0v-3.586l-5.293 5.293 a1 1 0 0 1-1.414-1.414l5.293 -5.293z')
					]))
			]));
};
var $elm$browser$Debugger$Main$SliderJump = function (a) {
	return {$: 'SliderJump', a: a};
};
var $elm$core$Basics$composeR = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var $elm$html$Html$input = _VirtualDom_node('input');
var $elm$browser$Debugger$Main$isPlaying = function (maybeIndex) {
	if (maybeIndex.$ === 'Nothing') {
		return true;
	} else {
		return false;
	}
};
var $elm$html$Html$Attributes$max = $elm$html$Html$Attributes$stringProperty('max');
var $elm$html$Html$Attributes$min = $elm$html$Html$Attributes$stringProperty('min');
var $elm$html$Html$Events$alwaysStop = function (x) {
	return _Utils_Tuple2(x, true);
};
var $elm$virtual_dom$VirtualDom$MayStopPropagation = function (a) {
	return {$: 'MayStopPropagation', a: a};
};
var $elm$html$Html$Events$stopPropagationOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayStopPropagation(decoder));
	});
var $elm$json$Json$Decode$string = _Json_decodeString;
var $elm$html$Html$Events$targetValue = A2(
	$elm$json$Json$Decode$at,
	_List_fromArray(
		['target', 'value']),
	$elm$json$Json$Decode$string);
var $elm$html$Html$Events$onInput = function (tagger) {
	return A2(
		$elm$html$Html$Events$stopPropagationOn,
		'input',
		A2(
			$elm$json$Json$Decode$map,
			$elm$html$Html$Events$alwaysStop,
			A2($elm$json$Json$Decode$map, tagger, $elm$html$Html$Events$targetValue)));
};
var $elm$core$String$toInt = _String_toInt;
var $elm$html$Html$Attributes$type_ = $elm$html$Html$Attributes$stringProperty('type');
var $elm$html$Html$Attributes$value = $elm$html$Html$Attributes$stringProperty('value');
var $elm$browser$Debugger$Main$viewPlayButton = function (playing) {
	return A2(
		$elm$html$Html$button,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'background', '#1293D8'),
				A2($elm$html$Html$Attributes$style, 'border', 'none'),
				A2($elm$html$Html$Attributes$style, 'color', 'white'),
				A2($elm$html$Html$Attributes$style, 'cursor', 'pointer'),
				A2($elm$html$Html$Attributes$style, 'width', '36px'),
				A2($elm$html$Html$Attributes$style, 'height', '36px'),
				$elm$html$Html$Events$onClick($elm$browser$Debugger$Main$Resume)
			]),
		_List_fromArray(
			[
				playing ? $elm$browser$Debugger$Main$icon('M2 2h4v12h-4v-12z M10 2h4v12h-4v-12z') : $elm$browser$Debugger$Main$icon('M2 2l12 7l-12 7z')
			]));
};
var $elm$browser$Debugger$Main$viewHistorySlider = F2(
	function (history, maybeIndex) {
		var lastIndex = $elm$browser$Debugger$History$size(history) - 1;
		var selectedIndex = A2($elm$core$Maybe$withDefault, lastIndex, maybeIndex);
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'display', 'flex'),
					A2($elm$html$Html$Attributes$style, 'flex-direction', 'row'),
					A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
					A2($elm$html$Html$Attributes$style, 'width', '100%'),
					A2($elm$html$Html$Attributes$style, 'height', '36px'),
					A2($elm$html$Html$Attributes$style, 'background-color', 'rgb(50, 50, 50)')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$Lazy$lazy,
					$elm$browser$Debugger$Main$viewPlayButton,
					$elm$browser$Debugger$Main$isPlaying(maybeIndex)),
					A2(
					$elm$html$Html$input,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$type_('range'),
							A2($elm$html$Html$Attributes$style, 'width', 'calc(100% - 56px)'),
							A2($elm$html$Html$Attributes$style, 'height', '36px'),
							A2($elm$html$Html$Attributes$style, 'margin', '0 10px'),
							$elm$html$Html$Attributes$min('0'),
							$elm$html$Html$Attributes$max(
							$elm$core$String$fromInt(lastIndex)),
							$elm$html$Html$Attributes$value(
							$elm$core$String$fromInt(selectedIndex)),
							$elm$html$Html$Events$onInput(
							A2(
								$elm$core$Basics$composeR,
								$elm$core$String$toInt,
								A2(
									$elm$core$Basics$composeR,
									$elm$core$Maybe$withDefault(lastIndex),
									$elm$browser$Debugger$Main$SliderJump)))
						]),
					_List_Nil)
				]));
	});
var $elm$browser$Debugger$Main$viewHistory = F3(
	function (maybeIndex, history, layout) {
		var block = $elm$browser$Debugger$Main$toMouseBlocker(layout);
		var _v0 = $elm$browser$Debugger$Main$toHistoryPercents(layout);
		var w = _v0.a;
		var h = _v0.b;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'width', w),
					A2($elm$html$Html$Attributes$style, 'height', h),
					A2($elm$html$Html$Attributes$style, 'display', 'flex'),
					A2($elm$html$Html$Attributes$style, 'flex-direction', 'column'),
					A2($elm$html$Html$Attributes$style, 'color', '#DDDDDD'),
					A2($elm$html$Html$Attributes$style, 'background-color', 'rgb(61, 61, 61)'),
					A2($elm$html$Html$Attributes$style, 'pointer-events', block),
					A2($elm$html$Html$Attributes$style, 'user-select', block)
				]),
			_List_fromArray(
				[
					A2($elm$browser$Debugger$Main$viewHistorySlider, history, maybeIndex),
					A2(
					$elm$html$Html$map,
					$elm$browser$Debugger$Main$Jump,
					A2($elm$browser$Debugger$History$view, maybeIndex, history)),
					A2($elm$html$Html$Lazy$lazy, $elm$browser$Debugger$Main$viewHistoryOptions, layout)
				]));
	});
var $elm$browser$Debugger$Main$popoutView = function (model) {
	var maybeIndex = function () {
		var _v0 = model.state;
		if (_v0.$ === 'Running') {
			return $elm$core$Maybe$Nothing;
		} else {
			var index = _v0.a;
			return $elm$core$Maybe$Just(index);
		}
	}();
	var historyToRender = $elm$browser$Debugger$Main$cachedHistory(model);
	return A3(
		$elm$html$Html$node,
		'body',
		_Utils_ap(
			$elm$browser$Debugger$Main$toDragListeners(model.layout),
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'margin', '0'),
					A2($elm$html$Html$Attributes$style, 'padding', '0'),
					A2($elm$html$Html$Attributes$style, 'width', '100%'),
					A2($elm$html$Html$Attributes$style, 'height', '100%'),
					A2($elm$html$Html$Attributes$style, 'font-family', 'monospace'),
					A2($elm$html$Html$Attributes$style, 'display', 'flex'),
					A2(
					$elm$html$Html$Attributes$style,
					'flex-direction',
					$elm$browser$Debugger$Main$toFlexDirection(model.layout))
				])),
		_List_fromArray(
			[
				A3($elm$browser$Debugger$Main$viewHistory, maybeIndex, historyToRender, model.layout),
				$elm$browser$Debugger$Main$viewDragZone(model.layout),
				A3($elm$browser$Debugger$Main$viewExpando, model.expandoMsg, model.expandoModel, model.layout)
			]));
};
var $elm$browser$Debugger$Overlay$BlockAll = {$: 'BlockAll'};
var $elm$browser$Debugger$Overlay$toBlockerType = F2(
	function (isPaused, state) {
		switch (state.$) {
			case 'None':
				return isPaused ? $elm$browser$Debugger$Overlay$BlockAll : $elm$browser$Debugger$Overlay$BlockNone;
			case 'BadMetadata':
				return $elm$browser$Debugger$Overlay$BlockMost;
			case 'BadImport':
				return $elm$browser$Debugger$Overlay$BlockMost;
			default:
				return $elm$browser$Debugger$Overlay$BlockMost;
		}
	});
var $elm$browser$Debugger$Main$toBlockerType = function (model) {
	return A2(
		$elm$browser$Debugger$Overlay$toBlockerType,
		$elm$browser$Debugger$Main$isPaused(model.state),
		model.overlay);
};
var $elm$browser$Debugger$Main$Horizontal = F3(
	function (a, b, c) {
		return {$: 'Horizontal', a: a, b: b, c: c};
	});
var $elm$browser$Debugger$Main$Running = function (a) {
	return {$: 'Running', a: a};
};
var $elm$browser$Debugger$Main$Static = {$: 'Static'};
var $elm$browser$Debugger$Metadata$Error = F2(
	function (message, problems) {
		return {message: message, problems: problems};
	});
var $elm$json$Json$Decode$decodeValue = _Json_run;
var $elm$browser$Debugger$Metadata$Metadata = F2(
	function (versions, types) {
		return {types: types, versions: versions};
	});
var $elm$browser$Debugger$Metadata$Types = F3(
	function (message, aliases, unions) {
		return {aliases: aliases, message: message, unions: unions};
	});
var $elm$browser$Debugger$Metadata$Alias = F2(
	function (args, tipe) {
		return {args: args, tipe: tipe};
	});
var $elm$json$Json$Decode$list = _Json_decodeList;
var $elm$browser$Debugger$Metadata$decodeAlias = A3(
	$elm$json$Json$Decode$map2,
	$elm$browser$Debugger$Metadata$Alias,
	A2(
		$elm$json$Json$Decode$field,
		'args',
		$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
	A2($elm$json$Json$Decode$field, 'type', $elm$json$Json$Decode$string));
var $elm$browser$Debugger$Metadata$Union = F2(
	function (args, tags) {
		return {args: args, tags: tags};
	});
var $elm$core$Dict$fromList = function (assocs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, dict) {
				var key = _v0.a;
				var value = _v0.b;
				return A3($elm$core$Dict$insert, key, value, dict);
			}),
		$elm$core$Dict$empty,
		assocs);
};
var $elm$json$Json$Decode$keyValuePairs = _Json_decodeKeyValuePairs;
var $elm$json$Json$Decode$dict = function (decoder) {
	return A2(
		$elm$json$Json$Decode$map,
		$elm$core$Dict$fromList,
		$elm$json$Json$Decode$keyValuePairs(decoder));
};
var $elm$browser$Debugger$Metadata$decodeUnion = A3(
	$elm$json$Json$Decode$map2,
	$elm$browser$Debugger$Metadata$Union,
	A2(
		$elm$json$Json$Decode$field,
		'args',
		$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
	A2(
		$elm$json$Json$Decode$field,
		'tags',
		$elm$json$Json$Decode$dict(
			$elm$json$Json$Decode$list($elm$json$Json$Decode$string))));
var $elm$json$Json$Decode$map3 = _Json_map3;
var $elm$browser$Debugger$Metadata$decodeTypes = A4(
	$elm$json$Json$Decode$map3,
	$elm$browser$Debugger$Metadata$Types,
	A2($elm$json$Json$Decode$field, 'message', $elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$field,
		'aliases',
		$elm$json$Json$Decode$dict($elm$browser$Debugger$Metadata$decodeAlias)),
	A2(
		$elm$json$Json$Decode$field,
		'unions',
		$elm$json$Json$Decode$dict($elm$browser$Debugger$Metadata$decodeUnion)));
var $elm$browser$Debugger$Metadata$Versions = function (elm) {
	return {elm: elm};
};
var $elm$browser$Debugger$Metadata$decodeVersions = A2(
	$elm$json$Json$Decode$map,
	$elm$browser$Debugger$Metadata$Versions,
	A2($elm$json$Json$Decode$field, 'elm', $elm$json$Json$Decode$string));
var $elm$browser$Debugger$Metadata$decoder = A3(
	$elm$json$Json$Decode$map2,
	$elm$browser$Debugger$Metadata$Metadata,
	A2($elm$json$Json$Decode$field, 'versions', $elm$browser$Debugger$Metadata$decodeVersions),
	A2($elm$json$Json$Decode$field, 'types', $elm$browser$Debugger$Metadata$decodeTypes));
var $elm$browser$Debugger$Metadata$ProblemType = F2(
	function (name, problems) {
		return {name: name, problems: problems};
	});
var $elm$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _v0 = f(mx);
		if (_v0.$ === 'Just') {
			var x = _v0.a;
			return A2($elm$core$List$cons, x, xs);
		} else {
			return xs;
		}
	});
var $elm$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			$elm$core$List$maybeCons(f),
			_List_Nil,
			xs);
	});
var $elm$core$String$contains = _String_contains;
var $elm$browser$Debugger$Metadata$hasProblem = F2(
	function (tipe, _v0) {
		var problem = _v0.a;
		var token = _v0.b;
		return A2($elm$core$String$contains, token, tipe) ? $elm$core$Maybe$Just(problem) : $elm$core$Maybe$Nothing;
	});
var $elm$browser$Debugger$Metadata$Decoder = {$: 'Decoder'};
var $elm$browser$Debugger$Metadata$Function = {$: 'Function'};
var $elm$browser$Debugger$Metadata$Process = {$: 'Process'};
var $elm$browser$Debugger$Metadata$Program = {$: 'Program'};
var $elm$browser$Debugger$Metadata$Request = {$: 'Request'};
var $elm$browser$Debugger$Metadata$Socket = {$: 'Socket'};
var $elm$browser$Debugger$Metadata$Task = {$: 'Task'};
var $elm$browser$Debugger$Metadata$VirtualDom = {$: 'VirtualDom'};
var $elm$browser$Debugger$Metadata$problemTable = _List_fromArray(
	[
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Function, '->'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Decoder, 'Json.Decode.Decoder'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Task, 'Task.Task'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Process, 'Process.Id'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Socket, 'WebSocket.LowLevel.WebSocket'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Request, 'Http.Request'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Program, 'Platform.Program'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$VirtualDom, 'VirtualDom.Node'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$VirtualDom, 'VirtualDom.Attribute')
	]);
var $elm$browser$Debugger$Metadata$findProblems = function (tipe) {
	return A2(
		$elm$core$List$filterMap,
		$elm$browser$Debugger$Metadata$hasProblem(tipe),
		$elm$browser$Debugger$Metadata$problemTable);
};
var $elm$browser$Debugger$Metadata$collectBadAliases = F3(
	function (name, _v0, list) {
		var tipe = _v0.tipe;
		var _v1 = $elm$browser$Debugger$Metadata$findProblems(tipe);
		if (!_v1.b) {
			return list;
		} else {
			var problems = _v1;
			return A2(
				$elm$core$List$cons,
				A2($elm$browser$Debugger$Metadata$ProblemType, name, problems),
				list);
		}
	});
var $elm$core$List$append = F2(
	function (xs, ys) {
		if (!ys.b) {
			return xs;
		} else {
			return A3($elm$core$List$foldr, $elm$core$List$cons, ys, xs);
		}
	});
var $elm$core$List$concat = function (lists) {
	return A3($elm$core$List$foldr, $elm$core$List$append, _List_Nil, lists);
};
var $elm$core$List$concatMap = F2(
	function (f, list) {
		return $elm$core$List$concat(
			A2($elm$core$List$map, f, list));
	});
var $elm$core$Dict$values = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, valueList) {
				return A2($elm$core$List$cons, value, valueList);
			}),
		_List_Nil,
		dict);
};
var $elm$browser$Debugger$Metadata$collectBadUnions = F3(
	function (name, _v0, list) {
		var tags = _v0.tags;
		var _v1 = A2(
			$elm$core$List$concatMap,
			$elm$browser$Debugger$Metadata$findProblems,
			$elm$core$List$concat(
				$elm$core$Dict$values(tags)));
		if (!_v1.b) {
			return list;
		} else {
			var problems = _v1;
			return A2(
				$elm$core$List$cons,
				A2($elm$browser$Debugger$Metadata$ProblemType, name, problems),
				list);
		}
	});
var $elm$core$Dict$foldl = F3(
	function (func, acc, dict) {
		foldl:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldl, func, acc, left)),
					$temp$dict = right;
				func = $temp$func;
				acc = $temp$acc;
				dict = $temp$dict;
				continue foldl;
			}
		}
	});
var $elm$browser$Debugger$Metadata$isPortable = function (_v0) {
	var types = _v0.types;
	var badAliases = A3($elm$core$Dict$foldl, $elm$browser$Debugger$Metadata$collectBadAliases, _List_Nil, types.aliases);
	var _v1 = A3($elm$core$Dict$foldl, $elm$browser$Debugger$Metadata$collectBadUnions, badAliases, types.unions);
	if (!_v1.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var problems = _v1;
		return $elm$core$Maybe$Just(
			A2($elm$browser$Debugger$Metadata$Error, types.message, problems));
	}
};
var $elm$browser$Debugger$Metadata$decode = function (value) {
	var _v0 = A2($elm$json$Json$Decode$decodeValue, $elm$browser$Debugger$Metadata$decoder, value);
	if (_v0.$ === 'Err') {
		return $elm$core$Result$Err(
			A2($elm$browser$Debugger$Metadata$Error, 'The compiler is generating bad metadata. This is a compiler bug!', _List_Nil));
	} else {
		var metadata = _v0.a;
		var _v1 = $elm$browser$Debugger$Metadata$isPortable(metadata);
		if (_v1.$ === 'Nothing') {
			return $elm$core$Result$Ok(metadata);
		} else {
			var error = _v1.a;
			return $elm$core$Result$Err(error);
		}
	}
};
var $elm$browser$Debugger$History$History = F3(
	function (snapshots, recent, numMessages) {
		return {numMessages: numMessages, recent: recent, snapshots: snapshots};
	});
var $elm$browser$Debugger$History$RecentHistory = F3(
	function (model, messages, numMessages) {
		return {messages: messages, model: model, numMessages: numMessages};
	});
var $elm$browser$Debugger$History$empty = function (model) {
	return A3(
		$elm$browser$Debugger$History$History,
		$elm$core$Array$empty,
		A3($elm$browser$Debugger$History$RecentHistory, model, _List_Nil, 0),
		0);
};
var $elm$core$Dict$map = F2(
	function (func, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				A2(func, key, value),
				A2($elm$core$Dict$map, func, left),
				A2($elm$core$Dict$map, func, right));
		}
	});
var $elm$core$Dict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return n;
			} else {
				var left = dict.d;
				var right = dict.e;
				var $temp$n = A2($elm$core$Dict$sizeHelp, n + 1, right),
					$temp$dict = left;
				n = $temp$n;
				dict = $temp$dict;
				continue sizeHelp;
			}
		}
	});
var $elm$core$Dict$size = function (dict) {
	return A2($elm$core$Dict$sizeHelp, 0, dict);
};
var $elm$browser$Debugger$Expando$initHelp = F2(
	function (isOuter, expando) {
		switch (expando.$) {
			case 'S':
				return expando;
			case 'Primitive':
				return expando;
			case 'Sequence':
				var seqType = expando.a;
				var isClosed = expando.b;
				var items = expando.c;
				return isOuter ? A3(
					$elm$browser$Debugger$Expando$Sequence,
					seqType,
					false,
					A2(
						$elm$core$List$map,
						$elm$browser$Debugger$Expando$initHelp(false),
						items)) : (($elm$core$List$length(items) <= 8) ? A3($elm$browser$Debugger$Expando$Sequence, seqType, false, items) : expando);
			case 'Dictionary':
				var isClosed = expando.a;
				var keyValuePairs = expando.b;
				return isOuter ? A2(
					$elm$browser$Debugger$Expando$Dictionary,
					false,
					A2(
						$elm$core$List$map,
						function (_v1) {
							var k = _v1.a;
							var v = _v1.b;
							return _Utils_Tuple2(
								k,
								A2($elm$browser$Debugger$Expando$initHelp, false, v));
						},
						keyValuePairs)) : (($elm$core$List$length(keyValuePairs) <= 8) ? A2($elm$browser$Debugger$Expando$Dictionary, false, keyValuePairs) : expando);
			case 'Record':
				var isClosed = expando.a;
				var entries = expando.b;
				return isOuter ? A2(
					$elm$browser$Debugger$Expando$Record,
					false,
					A2(
						$elm$core$Dict$map,
						F2(
							function (_v2, v) {
								return A2($elm$browser$Debugger$Expando$initHelp, false, v);
							}),
						entries)) : (($elm$core$Dict$size(entries) <= 4) ? A2($elm$browser$Debugger$Expando$Record, false, entries) : expando);
			default:
				var maybeName = expando.a;
				var isClosed = expando.b;
				var args = expando.c;
				return isOuter ? A3(
					$elm$browser$Debugger$Expando$Constructor,
					maybeName,
					false,
					A2(
						$elm$core$List$map,
						$elm$browser$Debugger$Expando$initHelp(false),
						args)) : (($elm$core$List$length(args) <= 4) ? A3($elm$browser$Debugger$Expando$Constructor, maybeName, false, args) : expando);
		}
	});
var $elm$browser$Debugger$Expando$init = function (value) {
	return A2(
		$elm$browser$Debugger$Expando$initHelp,
		true,
		_Debugger_init(value));
};
var $elm$core$Platform$Cmd$map = _Platform_map;
var $elm$browser$Debugger$Overlay$None = {$: 'None'};
var $elm$browser$Debugger$Overlay$none = $elm$browser$Debugger$Overlay$None;
var $elm$browser$Debugger$Main$wrapInit = F4(
	function (metadata, popout, init, flags) {
		var _v0 = init(flags);
		var userModel = _v0.a;
		var userCommands = _v0.b;
		return _Utils_Tuple2(
			{
				expandoModel: $elm$browser$Debugger$Expando$init(userModel),
				expandoMsg: $elm$browser$Debugger$Expando$init(_Utils_Tuple0),
				history: $elm$browser$Debugger$History$empty(userModel),
				layout: A3($elm$browser$Debugger$Main$Horizontal, $elm$browser$Debugger$Main$Static, 0.3, 0.5),
				metadata: $elm$browser$Debugger$Metadata$decode(metadata),
				overlay: $elm$browser$Debugger$Overlay$none,
				popout: popout,
				state: $elm$browser$Debugger$Main$Running(userModel)
			},
			A2($elm$core$Platform$Cmd$map, $elm$browser$Debugger$Main$UserMsg, userCommands));
	});
var $elm$browser$Debugger$Main$getLatestModel = function (state) {
	if (state.$ === 'Running') {
		var model = state.a;
		return model;
	} else {
		var model = state.c;
		return model;
	}
};
var $elm$core$Platform$Sub$map = _Platform_map;
var $elm$browser$Debugger$Main$wrapSubs = F2(
	function (subscriptions, model) {
		return A2(
			$elm$core$Platform$Sub$map,
			$elm$browser$Debugger$Main$UserMsg,
			subscriptions(
				$elm$browser$Debugger$Main$getLatestModel(model.state)));
	});
var $elm$browser$Debugger$Main$Moving = {$: 'Moving'};
var $elm$browser$Debugger$Main$Paused = F5(
	function (a, b, c, d, e) {
		return {$: 'Paused', a: a, b: b, c: c, d: d, e: e};
	});
var $elm$browser$Debugger$History$Snapshot = F2(
	function (model, messages) {
		return {messages: messages, model: model};
	});
var $elm$browser$Debugger$History$addRecent = F3(
	function (msg, newModel, _v0) {
		var model = _v0.model;
		var messages = _v0.messages;
		var numMessages = _v0.numMessages;
		return _Utils_eq(numMessages, $elm$browser$Debugger$History$maxSnapshotSize) ? _Utils_Tuple2(
			$elm$core$Maybe$Just(
				A2(
					$elm$browser$Debugger$History$Snapshot,
					model,
					$elm$core$Array$fromList(messages))),
			A3(
				$elm$browser$Debugger$History$RecentHistory,
				newModel,
				_List_fromArray(
					[msg]),
				1)) : _Utils_Tuple2(
			$elm$core$Maybe$Nothing,
			A3(
				$elm$browser$Debugger$History$RecentHistory,
				model,
				A2($elm$core$List$cons, msg, messages),
				numMessages + 1));
	});
var $elm$core$Elm$JsArray$push = _JsArray_push;
var $elm$core$Elm$JsArray$singleton = _JsArray_singleton;
var $elm$core$Array$insertTailInTree = F4(
	function (shift, index, tail, tree) {
		var pos = $elm$core$Array$bitMask & (index >>> shift);
		if (_Utils_cmp(
			pos,
			$elm$core$Elm$JsArray$length(tree)) > -1) {
			if (shift === 5) {
				return A2(
					$elm$core$Elm$JsArray$push,
					$elm$core$Array$Leaf(tail),
					tree);
			} else {
				var newSub = $elm$core$Array$SubTree(
					A4($elm$core$Array$insertTailInTree, shift - $elm$core$Array$shiftStep, index, tail, $elm$core$Elm$JsArray$empty));
				return A2($elm$core$Elm$JsArray$push, newSub, tree);
			}
		} else {
			var value = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (value.$ === 'SubTree') {
				var subTree = value.a;
				var newSub = $elm$core$Array$SubTree(
					A4($elm$core$Array$insertTailInTree, shift - $elm$core$Array$shiftStep, index, tail, subTree));
				return A3($elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
			} else {
				var newSub = $elm$core$Array$SubTree(
					A4(
						$elm$core$Array$insertTailInTree,
						shift - $elm$core$Array$shiftStep,
						index,
						tail,
						$elm$core$Elm$JsArray$singleton(value)));
				return A3($elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
			}
		}
	});
var $elm$core$Array$unsafeReplaceTail = F2(
	function (newTail, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		var originalTailLen = $elm$core$Elm$JsArray$length(tail);
		var newTailLen = $elm$core$Elm$JsArray$length(newTail);
		var newArrayLen = len + (newTailLen - originalTailLen);
		if (_Utils_eq(newTailLen, $elm$core$Array$branchFactor)) {
			var overflow = _Utils_cmp(newArrayLen >>> $elm$core$Array$shiftStep, 1 << startShift) > 0;
			if (overflow) {
				var newShift = startShift + $elm$core$Array$shiftStep;
				var newTree = A4(
					$elm$core$Array$insertTailInTree,
					newShift,
					len,
					newTail,
					$elm$core$Elm$JsArray$singleton(
						$elm$core$Array$SubTree(tree)));
				return A4($elm$core$Array$Array_elm_builtin, newArrayLen, newShift, newTree, $elm$core$Elm$JsArray$empty);
			} else {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					newArrayLen,
					startShift,
					A4($elm$core$Array$insertTailInTree, startShift, len, newTail, tree),
					$elm$core$Elm$JsArray$empty);
			}
		} else {
			return A4($elm$core$Array$Array_elm_builtin, newArrayLen, startShift, tree, newTail);
		}
	});
var $elm$core$Array$push = F2(
	function (a, array) {
		var tail = array.d;
		return A2(
			$elm$core$Array$unsafeReplaceTail,
			A2($elm$core$Elm$JsArray$push, a, tail),
			array);
	});
var $elm$browser$Debugger$History$add = F3(
	function (msg, model, _v0) {
		var snapshots = _v0.snapshots;
		var recent = _v0.recent;
		var numMessages = _v0.numMessages;
		var _v1 = A3($elm$browser$Debugger$History$addRecent, msg, model, recent);
		if (_v1.a.$ === 'Just') {
			var snapshot = _v1.a.a;
			var newRecent = _v1.b;
			return A3(
				$elm$browser$Debugger$History$History,
				A2($elm$core$Array$push, snapshot, snapshots),
				newRecent,
				numMessages + 1);
		} else {
			var _v2 = _v1.a;
			var newRecent = _v1.b;
			return A3($elm$browser$Debugger$History$History, snapshots, newRecent, numMessages + 1);
		}
	});
var $elm$core$Basics$always = F2(
	function (a, _v0) {
		return a;
	});
var $elm$browser$Debugger$Overlay$BadImport = function (a) {
	return {$: 'BadImport', a: a};
};
var $elm$browser$Debugger$Overlay$RiskyImport = F2(
	function (a, b) {
		return {$: 'RiskyImport', a: a, b: b};
	});
var $elm$browser$Debugger$Report$VersionChanged = F2(
	function (a, b) {
		return {$: 'VersionChanged', a: a, b: b};
	});
var $elm$browser$Debugger$Report$MessageChanged = F2(
	function (a, b) {
		return {$: 'MessageChanged', a: a, b: b};
	});
var $elm$browser$Debugger$Report$SomethingChanged = function (a) {
	return {$: 'SomethingChanged', a: a};
};
var $elm$browser$Debugger$Report$AliasChange = function (a) {
	return {$: 'AliasChange', a: a};
};
var $elm$browser$Debugger$Metadata$checkAlias = F4(
	function (name, old, _new, changes) {
		return (_Utils_eq(old.tipe, _new.tipe) && _Utils_eq(old.args, _new.args)) ? changes : A2(
			$elm$core$List$cons,
			$elm$browser$Debugger$Report$AliasChange(name),
			changes);
	});
var $elm$browser$Debugger$Report$UnionChange = F2(
	function (a, b) {
		return {$: 'UnionChange', a: a, b: b};
	});
var $elm$browser$Debugger$Metadata$addTag = F3(
	function (tag, _v0, changes) {
		return _Utils_update(
			changes,
			{
				added: A2($elm$core$List$cons, tag, changes.added)
			});
	});
var $elm$browser$Debugger$Metadata$checkTag = F4(
	function (tag, old, _new, changes) {
		return _Utils_eq(old, _new) ? changes : _Utils_update(
			changes,
			{
				changed: A2($elm$core$List$cons, tag, changes.changed)
			});
	});
var $elm$browser$Debugger$Report$TagChanges = F4(
	function (removed, changed, added, argsMatch) {
		return {added: added, argsMatch: argsMatch, changed: changed, removed: removed};
	});
var $elm$browser$Debugger$Report$emptyTagChanges = function (argsMatch) {
	return A4($elm$browser$Debugger$Report$TagChanges, _List_Nil, _List_Nil, _List_Nil, argsMatch);
};
var $elm$browser$Debugger$Report$hasTagChanges = function (tagChanges) {
	return _Utils_eq(
		tagChanges,
		A4($elm$browser$Debugger$Report$TagChanges, _List_Nil, _List_Nil, _List_Nil, true));
};
var $elm$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _v0) {
				stepState:
				while (true) {
					var list = _v0.a;
					var result = _v0.b;
					if (!list.b) {
						return _Utils_Tuple2(
							list,
							A3(rightStep, rKey, rValue, result));
					} else {
						var _v2 = list.a;
						var lKey = _v2.a;
						var lValue = _v2.b;
						var rest = list.b;
						if (_Utils_cmp(lKey, rKey) < 0) {
							var $temp$rKey = rKey,
								$temp$rValue = rValue,
								$temp$_v0 = _Utils_Tuple2(
								rest,
								A3(leftStep, lKey, lValue, result));
							rKey = $temp$rKey;
							rValue = $temp$rValue;
							_v0 = $temp$_v0;
							continue stepState;
						} else {
							if (_Utils_cmp(lKey, rKey) > 0) {
								return _Utils_Tuple2(
									list,
									A3(rightStep, rKey, rValue, result));
							} else {
								return _Utils_Tuple2(
									rest,
									A4(bothStep, lKey, lValue, rValue, result));
							}
						}
					}
				}
			});
		var _v3 = A3(
			$elm$core$Dict$foldl,
			stepState,
			_Utils_Tuple2(
				$elm$core$Dict$toList(leftDict),
				initialResult),
			rightDict);
		var leftovers = _v3.a;
		var intermediateResult = _v3.b;
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v4, result) {
					var k = _v4.a;
					var v = _v4.b;
					return A3(leftStep, k, v, result);
				}),
			intermediateResult,
			leftovers);
	});
var $elm$browser$Debugger$Metadata$removeTag = F3(
	function (tag, _v0, changes) {
		return _Utils_update(
			changes,
			{
				removed: A2($elm$core$List$cons, tag, changes.removed)
			});
	});
var $elm$browser$Debugger$Metadata$checkUnion = F4(
	function (name, old, _new, changes) {
		var tagChanges = A6(
			$elm$core$Dict$merge,
			$elm$browser$Debugger$Metadata$removeTag,
			$elm$browser$Debugger$Metadata$checkTag,
			$elm$browser$Debugger$Metadata$addTag,
			old.tags,
			_new.tags,
			$elm$browser$Debugger$Report$emptyTagChanges(
				_Utils_eq(old.args, _new.args)));
		return $elm$browser$Debugger$Report$hasTagChanges(tagChanges) ? changes : A2(
			$elm$core$List$cons,
			A2($elm$browser$Debugger$Report$UnionChange, name, tagChanges),
			changes);
	});
var $elm$browser$Debugger$Metadata$ignore = F3(
	function (key, value, report) {
		return report;
	});
var $elm$browser$Debugger$Metadata$checkTypes = F2(
	function (old, _new) {
		return (!_Utils_eq(old.message, _new.message)) ? A2($elm$browser$Debugger$Report$MessageChanged, old.message, _new.message) : $elm$browser$Debugger$Report$SomethingChanged(
			A6(
				$elm$core$Dict$merge,
				$elm$browser$Debugger$Metadata$ignore,
				$elm$browser$Debugger$Metadata$checkUnion,
				$elm$browser$Debugger$Metadata$ignore,
				old.unions,
				_new.unions,
				A6($elm$core$Dict$merge, $elm$browser$Debugger$Metadata$ignore, $elm$browser$Debugger$Metadata$checkAlias, $elm$browser$Debugger$Metadata$ignore, old.aliases, _new.aliases, _List_Nil)));
	});
var $elm$browser$Debugger$Metadata$check = F2(
	function (old, _new) {
		return (!_Utils_eq(old.versions.elm, _new.versions.elm)) ? A2($elm$browser$Debugger$Report$VersionChanged, old.versions.elm, _new.versions.elm) : A2($elm$browser$Debugger$Metadata$checkTypes, old.types, _new.types);
	});
var $elm$browser$Debugger$Report$CorruptHistory = {$: 'CorruptHistory'};
var $elm$browser$Debugger$Overlay$corruptImport = $elm$browser$Debugger$Overlay$BadImport($elm$browser$Debugger$Report$CorruptHistory);
var $elm$json$Json$Decode$decodeString = _Json_runOnString;
var $elm$browser$Debugger$Report$Fine = {$: 'Fine'};
var $elm$browser$Debugger$Report$Impossible = {$: 'Impossible'};
var $elm$browser$Debugger$Report$Risky = {$: 'Risky'};
var $elm$core$Basics$not = _Basics_not;
var $elm$core$List$isEmpty = function (xs) {
	if (!xs.b) {
		return true;
	} else {
		return false;
	}
};
var $elm$browser$Debugger$Report$some = function (list) {
	return !$elm$core$List$isEmpty(list);
};
var $elm$browser$Debugger$Report$evaluateChange = function (change) {
	if (change.$ === 'AliasChange') {
		return $elm$browser$Debugger$Report$Impossible;
	} else {
		var removed = change.b.removed;
		var changed = change.b.changed;
		var added = change.b.added;
		var argsMatch = change.b.argsMatch;
		return ((!argsMatch) || ($elm$browser$Debugger$Report$some(changed) || $elm$browser$Debugger$Report$some(removed))) ? $elm$browser$Debugger$Report$Impossible : ($elm$browser$Debugger$Report$some(added) ? $elm$browser$Debugger$Report$Risky : $elm$browser$Debugger$Report$Fine);
	}
};
var $elm$browser$Debugger$Report$worstCase = F2(
	function (status, statusList) {
		worstCase:
		while (true) {
			if (!statusList.b) {
				return status;
			} else {
				switch (statusList.a.$) {
					case 'Impossible':
						var _v1 = statusList.a;
						return $elm$browser$Debugger$Report$Impossible;
					case 'Risky':
						var _v2 = statusList.a;
						var rest = statusList.b;
						var $temp$status = $elm$browser$Debugger$Report$Risky,
							$temp$statusList = rest;
						status = $temp$status;
						statusList = $temp$statusList;
						continue worstCase;
					default:
						var _v3 = statusList.a;
						var rest = statusList.b;
						var $temp$status = status,
							$temp$statusList = rest;
						status = $temp$status;
						statusList = $temp$statusList;
						continue worstCase;
				}
			}
		}
	});
var $elm$browser$Debugger$Report$evaluate = function (report) {
	switch (report.$) {
		case 'CorruptHistory':
			return $elm$browser$Debugger$Report$Impossible;
		case 'VersionChanged':
			return $elm$browser$Debugger$Report$Impossible;
		case 'MessageChanged':
			return $elm$browser$Debugger$Report$Impossible;
		default:
			var changes = report.a;
			return A2(
				$elm$browser$Debugger$Report$worstCase,
				$elm$browser$Debugger$Report$Fine,
				A2($elm$core$List$map, $elm$browser$Debugger$Report$evaluateChange, changes));
	}
};
var $elm$json$Json$Decode$value = _Json_decodeValue;
var $elm$browser$Debugger$Overlay$uploadDecoder = A3(
	$elm$json$Json$Decode$map2,
	F2(
		function (x, y) {
			return _Utils_Tuple2(x, y);
		}),
	A2($elm$json$Json$Decode$field, 'metadata', $elm$browser$Debugger$Metadata$decoder),
	A2($elm$json$Json$Decode$field, 'history', $elm$json$Json$Decode$value));
var $elm$browser$Debugger$Overlay$assessImport = F2(
	function (metadata, jsonString) {
		var _v0 = A2($elm$json$Json$Decode$decodeString, $elm$browser$Debugger$Overlay$uploadDecoder, jsonString);
		if (_v0.$ === 'Err') {
			return $elm$core$Result$Err($elm$browser$Debugger$Overlay$corruptImport);
		} else {
			var _v1 = _v0.a;
			var foreignMetadata = _v1.a;
			var rawHistory = _v1.b;
			var report = A2($elm$browser$Debugger$Metadata$check, foreignMetadata, metadata);
			var _v2 = $elm$browser$Debugger$Report$evaluate(report);
			switch (_v2.$) {
				case 'Impossible':
					return $elm$core$Result$Err(
						$elm$browser$Debugger$Overlay$BadImport(report));
				case 'Risky':
					return $elm$core$Result$Err(
						A2($elm$browser$Debugger$Overlay$RiskyImport, report, rawHistory));
				default:
					return $elm$core$Result$Ok(rawHistory);
			}
		}
	});
var $elm$core$Platform$Cmd$batch = _Platform_batch;
var $elm$browser$Debugger$Overlay$close = F2(
	function (msg, state) {
		switch (state.$) {
			case 'None':
				return $elm$core$Maybe$Nothing;
			case 'BadMetadata':
				return $elm$core$Maybe$Nothing;
			case 'BadImport':
				return $elm$core$Maybe$Nothing;
			default:
				var rawHistory = state.b;
				if (msg.$ === 'Cancel') {
					return $elm$core$Maybe$Nothing;
				} else {
					return $elm$core$Maybe$Just(rawHistory);
				}
		}
	});
var $elm$browser$Debugger$History$elmToJs = A2($elm$core$Basics$composeR, _Json_wrap, _Debugger_unsafeCoerce);
var $elm$browser$Debugger$History$encodeHelp = F2(
	function (snapshot, allMessages) {
		return A3($elm$core$Array$foldl, $elm$core$List$cons, allMessages, snapshot.messages);
	});
var $elm$json$Json$Encode$list = F2(
	function (func, entries) {
		return _Json_wrap(
			A3(
				$elm$core$List$foldl,
				_Json_addEntry(func),
				_Json_emptyArray(_Utils_Tuple0),
				entries));
	});
var $elm$browser$Debugger$History$encode = function (_v0) {
	var snapshots = _v0.snapshots;
	var recent = _v0.recent;
	return A2(
		$elm$json$Json$Encode$list,
		$elm$browser$Debugger$History$elmToJs,
		A3(
			$elm$core$Array$foldr,
			$elm$browser$Debugger$History$encodeHelp,
			$elm$core$List$reverse(recent.messages),
			snapshots));
};
var $elm$json$Json$Encode$object = function (pairs) {
	return _Json_wrap(
		A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, obj) {
					var k = _v0.a;
					var v = _v0.b;
					return A3(_Json_addField, k, v, obj);
				}),
			_Json_emptyObject(_Utils_Tuple0),
			pairs));
};
var $elm$browser$Debugger$Metadata$encodeAlias = function (_v0) {
	var args = _v0.args;
	var tipe = _v0.tipe;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'args',
				A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, args)),
				_Utils_Tuple2(
				'type',
				$elm$json$Json$Encode$string(tipe))
			]));
};
var $elm$browser$Debugger$Metadata$encodeDict = F2(
	function (f, dict) {
		return $elm$json$Json$Encode$object(
			$elm$core$Dict$toList(
				A2(
					$elm$core$Dict$map,
					F2(
						function (key, value) {
							return f(value);
						}),
					dict)));
	});
var $elm$browser$Debugger$Metadata$encodeUnion = function (_v0) {
	var args = _v0.args;
	var tags = _v0.tags;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'args',
				A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, args)),
				_Utils_Tuple2(
				'tags',
				A2(
					$elm$browser$Debugger$Metadata$encodeDict,
					$elm$json$Json$Encode$list($elm$json$Json$Encode$string),
					tags))
			]));
};
var $elm$browser$Debugger$Metadata$encodeTypes = function (_v0) {
	var message = _v0.message;
	var unions = _v0.unions;
	var aliases = _v0.aliases;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'message',
				$elm$json$Json$Encode$string(message)),
				_Utils_Tuple2(
				'aliases',
				A2($elm$browser$Debugger$Metadata$encodeDict, $elm$browser$Debugger$Metadata$encodeAlias, aliases)),
				_Utils_Tuple2(
				'unions',
				A2($elm$browser$Debugger$Metadata$encodeDict, $elm$browser$Debugger$Metadata$encodeUnion, unions))
			]));
};
var $elm$browser$Debugger$Metadata$encodeVersions = function (_v0) {
	var elm = _v0.elm;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'elm',
				$elm$json$Json$Encode$string(elm))
			]));
};
var $elm$browser$Debugger$Metadata$encode = function (_v0) {
	var versions = _v0.versions;
	var types = _v0.types;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'versions',
				$elm$browser$Debugger$Metadata$encodeVersions(versions)),
				_Utils_Tuple2(
				'types',
				$elm$browser$Debugger$Metadata$encodeTypes(types))
			]));
};
var $elm$core$Basics$identity = function (x) {
	return x;
};
var $elm$core$Task$Perform = function (a) {
	return {$: 'Perform', a: a};
};
var $elm$core$Task$succeed = _Scheduler_succeed;
var $elm$core$Task$init = $elm$core$Task$succeed(_Utils_Tuple0);
var $elm$core$Task$andThen = _Scheduler_andThen;
var $elm$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return $elm$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var $elm$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return A2(
					$elm$core$Task$andThen,
					function (b) {
						return $elm$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var $elm$core$Task$sequence = function (tasks) {
	return A3(
		$elm$core$List$foldr,
		$elm$core$Task$map2($elm$core$List$cons),
		$elm$core$Task$succeed(_List_Nil),
		tasks);
};
var $elm$core$Platform$sendToApp = _Platform_sendToApp;
var $elm$core$Task$spawnCmd = F2(
	function (router, _v0) {
		var task = _v0.a;
		return _Scheduler_spawn(
			A2(
				$elm$core$Task$andThen,
				$elm$core$Platform$sendToApp(router),
				task));
	});
var $elm$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			$elm$core$Task$map,
			function (_v0) {
				return _Utils_Tuple0;
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Task$spawnCmd(router),
					commands)));
	});
var $elm$core$Task$onSelfMsg = F3(
	function (_v0, _v1, _v2) {
		return $elm$core$Task$succeed(_Utils_Tuple0);
	});
var $elm$core$Task$cmdMap = F2(
	function (tagger, _v0) {
		var task = _v0.a;
		return $elm$core$Task$Perform(
			A2($elm$core$Task$map, tagger, task));
	});
_Platform_effectManagers['Task'] = _Platform_createManager($elm$core$Task$init, $elm$core$Task$onEffects, $elm$core$Task$onSelfMsg, $elm$core$Task$cmdMap);
var $elm$core$Task$command = _Platform_leaf('Task');
var $elm$core$Task$perform = F2(
	function (toMessage, task) {
		return $elm$core$Task$command(
			$elm$core$Task$Perform(
				A2($elm$core$Task$map, toMessage, task)));
	});
var $elm$browser$Debugger$Main$download = F2(
	function (metadata, history) {
		var historyLength = $elm$browser$Debugger$History$size(history);
		return A2(
			$elm$core$Task$perform,
			function (_v0) {
				return $elm$browser$Debugger$Main$NoOp;
			},
			A2(
				_Debugger_download,
				historyLength,
				_Json_unwrap(
					$elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'metadata',
								$elm$browser$Debugger$Metadata$encode(metadata)),
								_Utils_Tuple2(
								'history',
								$elm$browser$Debugger$History$encode(history))
							])))));
	});
var $elm$browser$Debugger$Main$Vertical = F3(
	function (a, b, c) {
		return {$: 'Vertical', a: a, b: b, c: c};
	});
var $elm$browser$Debugger$Main$drag = F2(
	function (info, layout) {
		if (layout.$ === 'Horizontal') {
			var status = layout.a;
			var y = layout.c;
			return A3($elm$browser$Debugger$Main$Horizontal, status, info.x / info.width, y);
		} else {
			var status = layout.a;
			var x = layout.b;
			return A3($elm$browser$Debugger$Main$Vertical, status, x, info.y / info.height);
		}
	});
var $elm$browser$Debugger$History$Stepping = F2(
	function (a, b) {
		return {$: 'Stepping', a: a, b: b};
	});
var $elm$browser$Debugger$History$Done = F2(
	function (a, b) {
		return {$: 'Done', a: a, b: b};
	});
var $elm$browser$Debugger$History$getHelp = F3(
	function (update, msg, getResult) {
		if (getResult.$ === 'Done') {
			return getResult;
		} else {
			var n = getResult.a;
			var model = getResult.b;
			return (!n) ? A2(
				$elm$browser$Debugger$History$Done,
				msg,
				A2(update, msg, model).a) : A2(
				$elm$browser$Debugger$History$Stepping,
				n - 1,
				A2(update, msg, model).a);
		}
	});
var $elm$browser$Debugger$History$undone = function (getResult) {
	undone:
	while (true) {
		if (getResult.$ === 'Done') {
			var msg = getResult.a;
			var model = getResult.b;
			return _Utils_Tuple2(model, msg);
		} else {
			var $temp$getResult = getResult;
			getResult = $temp$getResult;
			continue undone;
		}
	}
};
var $elm$browser$Debugger$History$get = F3(
	function (update, index, history) {
		get:
		while (true) {
			var recent = history.recent;
			var snapshotMax = history.numMessages - recent.numMessages;
			if (_Utils_cmp(index, snapshotMax) > -1) {
				return $elm$browser$Debugger$History$undone(
					A3(
						$elm$core$List$foldr,
						$elm$browser$Debugger$History$getHelp(update),
						A2($elm$browser$Debugger$History$Stepping, index - snapshotMax, recent.model),
						recent.messages));
			} else {
				var _v0 = A2($elm$core$Array$get, (index / $elm$browser$Debugger$History$maxSnapshotSize) | 0, history.snapshots);
				if (_v0.$ === 'Nothing') {
					var $temp$update = update,
						$temp$index = index,
						$temp$history = history;
					update = $temp$update;
					index = $temp$index;
					history = $temp$history;
					continue get;
				} else {
					var model = _v0.a.model;
					var messages = _v0.a.messages;
					return $elm$browser$Debugger$History$undone(
						A3(
							$elm$core$Array$foldr,
							$elm$browser$Debugger$History$getHelp(update),
							A2($elm$browser$Debugger$History$Stepping, index % $elm$browser$Debugger$History$maxSnapshotSize, model),
							messages));
				}
			}
		}
	});
var $elm$browser$Debugger$History$getRecentMsg = function (history) {
	getRecentMsg:
	while (true) {
		var _v0 = history.recent.messages;
		if (!_v0.b) {
			var $temp$history = history;
			history = $temp$history;
			continue getRecentMsg;
		} else {
			var first = _v0.a;
			return first;
		}
	}
};
var $elm$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return $elm$core$Maybe$Nothing;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var _v1 = A2($elm$core$Basics$compare, targetKey, key);
				switch (_v1.$) {
					case 'LT':
						var $temp$targetKey = targetKey,
							$temp$dict = left;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
					case 'EQ':
						return $elm$core$Maybe$Just(value);
					default:
						var $temp$targetKey = targetKey,
							$temp$dict = right;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
				}
			}
		}
	});
var $elm$browser$Debugger$Expando$mergeDictHelp = F3(
	function (oldDict, key, value) {
		var _v12 = A2($elm$core$Dict$get, key, oldDict);
		if (_v12.$ === 'Nothing') {
			return value;
		} else {
			var oldValue = _v12.a;
			return A2($elm$browser$Debugger$Expando$mergeHelp, oldValue, value);
		}
	});
var $elm$browser$Debugger$Expando$mergeHelp = F2(
	function (old, _new) {
		var _v3 = _Utils_Tuple2(old, _new);
		_v3$6:
		while (true) {
			switch (_v3.b.$) {
				case 'S':
					return _new;
				case 'Primitive':
					return _new;
				case 'Sequence':
					if (_v3.a.$ === 'Sequence') {
						var _v4 = _v3.a;
						var isClosed = _v4.b;
						var oldValues = _v4.c;
						var _v5 = _v3.b;
						var seqType = _v5.a;
						var newValues = _v5.c;
						return A3(
							$elm$browser$Debugger$Expando$Sequence,
							seqType,
							isClosed,
							A2($elm$browser$Debugger$Expando$mergeListHelp, oldValues, newValues));
					} else {
						break _v3$6;
					}
				case 'Dictionary':
					if (_v3.a.$ === 'Dictionary') {
						var _v6 = _v3.a;
						var isClosed = _v6.a;
						var _v7 = _v3.b;
						var keyValuePairs = _v7.b;
						return A2($elm$browser$Debugger$Expando$Dictionary, isClosed, keyValuePairs);
					} else {
						break _v3$6;
					}
				case 'Record':
					if (_v3.a.$ === 'Record') {
						var _v8 = _v3.a;
						var isClosed = _v8.a;
						var oldDict = _v8.b;
						var _v9 = _v3.b;
						var newDict = _v9.b;
						return A2(
							$elm$browser$Debugger$Expando$Record,
							isClosed,
							A2(
								$elm$core$Dict$map,
								$elm$browser$Debugger$Expando$mergeDictHelp(oldDict),
								newDict));
					} else {
						break _v3$6;
					}
				default:
					if (_v3.a.$ === 'Constructor') {
						var _v10 = _v3.a;
						var isClosed = _v10.b;
						var oldValues = _v10.c;
						var _v11 = _v3.b;
						var maybeName = _v11.a;
						var newValues = _v11.c;
						return A3(
							$elm$browser$Debugger$Expando$Constructor,
							maybeName,
							isClosed,
							A2($elm$browser$Debugger$Expando$mergeListHelp, oldValues, newValues));
					} else {
						break _v3$6;
					}
			}
		}
		return _new;
	});
var $elm$browser$Debugger$Expando$mergeListHelp = F2(
	function (olds, news) {
		var _v0 = _Utils_Tuple2(olds, news);
		if (!_v0.a.b) {
			return news;
		} else {
			if (!_v0.b.b) {
				return news;
			} else {
				var _v1 = _v0.a;
				var x = _v1.a;
				var xs = _v1.b;
				var _v2 = _v0.b;
				var y = _v2.a;
				var ys = _v2.b;
				return A2(
					$elm$core$List$cons,
					A2($elm$browser$Debugger$Expando$mergeHelp, x, y),
					A2($elm$browser$Debugger$Expando$mergeListHelp, xs, ys));
			}
		}
	});
var $elm$browser$Debugger$Expando$merge = F2(
	function (value, expando) {
		return A2(
			$elm$browser$Debugger$Expando$mergeHelp,
			expando,
			_Debugger_init(value));
	});
var $elm$browser$Debugger$Main$jumpUpdate = F3(
	function (update, index, model) {
		var history = $elm$browser$Debugger$Main$cachedHistory(model);
		var currentMsg = $elm$browser$Debugger$History$getRecentMsg(history);
		var currentModel = $elm$browser$Debugger$Main$getLatestModel(model.state);
		var _v0 = A3($elm$browser$Debugger$History$get, update, index, history);
		var indexModel = _v0.a;
		var indexMsg = _v0.b;
		return _Utils_update(
			model,
			{
				expandoModel: A2($elm$browser$Debugger$Expando$merge, indexModel, model.expandoModel),
				expandoMsg: A2($elm$browser$Debugger$Expando$merge, indexMsg, model.expandoMsg),
				state: A5($elm$browser$Debugger$Main$Paused, index, indexModel, currentModel, currentMsg, history)
			});
	});
var $elm$browser$Debugger$History$jsToElm = A2($elm$core$Basics$composeR, _Json_unwrap, _Debugger_unsafeCoerce);
var $elm$browser$Debugger$History$decoder = F2(
	function (initialModel, update) {
		var addMessage = F2(
			function (rawMsg, _v0) {
				var model = _v0.a;
				var history = _v0.b;
				var msg = $elm$browser$Debugger$History$jsToElm(rawMsg);
				return _Utils_Tuple2(
					A2(update, msg, model),
					A3($elm$browser$Debugger$History$add, msg, model, history));
			});
		var updateModel = function (rawMsgs) {
			return A3(
				$elm$core$List$foldl,
				addMessage,
				_Utils_Tuple2(
					initialModel,
					$elm$browser$Debugger$History$empty(initialModel)),
				rawMsgs);
		};
		return A2(
			$elm$json$Json$Decode$map,
			updateModel,
			$elm$json$Json$Decode$list($elm$json$Json$Decode$value));
	});
var $elm$browser$Debugger$History$getInitialModel = function (_v0) {
	var snapshots = _v0.snapshots;
	var recent = _v0.recent;
	var _v1 = A2($elm$core$Array$get, 0, snapshots);
	if (_v1.$ === 'Just') {
		var model = _v1.a.model;
		return model;
	} else {
		return recent.model;
	}
};
var $elm$core$Platform$Cmd$none = $elm$core$Platform$Cmd$batch(_List_Nil);
var $elm$browser$Debugger$Main$loadNewHistory = F3(
	function (rawHistory, update, model) {
		var pureUserUpdate = F2(
			function (msg, userModel) {
				return A2(update, msg, userModel).a;
			});
		var initialUserModel = $elm$browser$Debugger$History$getInitialModel(model.history);
		var decoder = A2($elm$browser$Debugger$History$decoder, initialUserModel, pureUserUpdate);
		var _v0 = A2($elm$json$Json$Decode$decodeValue, decoder, rawHistory);
		if (_v0.$ === 'Err') {
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{overlay: $elm$browser$Debugger$Overlay$corruptImport}),
				$elm$core$Platform$Cmd$none);
		} else {
			var _v1 = _v0.a;
			var latestUserModel = _v1.a;
			var newHistory = _v1.b;
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{
						expandoModel: $elm$browser$Debugger$Expando$init(latestUserModel),
						expandoMsg: $elm$browser$Debugger$Expando$init(
							$elm$browser$Debugger$History$getRecentMsg(newHistory)),
						history: newHistory,
						overlay: $elm$browser$Debugger$Overlay$none,
						state: $elm$browser$Debugger$Main$Running(latestUserModel)
					}),
				$elm$core$Platform$Cmd$none);
		}
	});
var $elm$browser$Debugger$Main$scroll = function (popout) {
	return A2(
		$elm$core$Task$perform,
		$elm$core$Basics$always($elm$browser$Debugger$Main$NoOp),
		_Debugger_scroll(popout));
};
var $elm$browser$Debugger$Main$scrollTo = F2(
	function (id, popout) {
		return A2(
			$elm$core$Task$perform,
			$elm$core$Basics$always($elm$browser$Debugger$Main$NoOp),
			A2(_Debugger_scrollTo, id, popout));
	});
var $elm$browser$Debugger$Main$setDragStatus = F2(
	function (status, layout) {
		if (layout.$ === 'Horizontal') {
			var x = layout.b;
			var y = layout.c;
			return A3($elm$browser$Debugger$Main$Horizontal, status, x, y);
		} else {
			var x = layout.b;
			var y = layout.c;
			return A3($elm$browser$Debugger$Main$Vertical, status, x, y);
		}
	});
var $elm$browser$Debugger$Main$swapLayout = function (layout) {
	if (layout.$ === 'Horizontal') {
		var s = layout.a;
		var x = layout.b;
		var y = layout.c;
		return A3($elm$browser$Debugger$Main$Vertical, s, x, y);
	} else {
		var s = layout.a;
		var x = layout.b;
		var y = layout.c;
		return A3($elm$browser$Debugger$Main$Horizontal, s, x, y);
	}
};
var $elm$core$Dict$getMin = function (dict) {
	getMin:
	while (true) {
		if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
			var left = dict.d;
			var $temp$dict = left;
			dict = $temp$dict;
			continue getMin;
		} else {
			return dict;
		}
	}
};
var $elm$core$Dict$moveRedLeft = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.e.d.$ === 'RBNode_elm_builtin') && (dict.e.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var lLeft = _v1.d;
			var lRight = _v1.e;
			var _v2 = dict.e;
			var rClr = _v2.a;
			var rK = _v2.b;
			var rV = _v2.c;
			var rLeft = _v2.d;
			var _v3 = rLeft.a;
			var rlK = rLeft.b;
			var rlV = rLeft.c;
			var rlL = rLeft.d;
			var rlR = rLeft.e;
			var rRight = _v2.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				rlK,
				rlV,
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					rlL),
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rlR, rRight));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v4 = dict.d;
			var lClr = _v4.a;
			var lK = _v4.b;
			var lV = _v4.c;
			var lLeft = _v4.d;
			var lRight = _v4.e;
			var _v5 = dict.e;
			var rClr = _v5.a;
			var rK = _v5.b;
			var rV = _v5.c;
			var rLeft = _v5.d;
			var rRight = _v5.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$moveRedRight = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.d.d.$ === 'RBNode_elm_builtin') && (dict.d.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var _v2 = _v1.d;
			var _v3 = _v2.a;
			var llK = _v2.b;
			var llV = _v2.c;
			var llLeft = _v2.d;
			var llRight = _v2.e;
			var lRight = _v1.e;
			var _v4 = dict.e;
			var rClr = _v4.a;
			var rK = _v4.b;
			var rV = _v4.c;
			var rLeft = _v4.d;
			var rRight = _v4.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				lK,
				lV,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					lRight,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight)));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v5 = dict.d;
			var lClr = _v5.a;
			var lK = _v5.b;
			var lV = _v5.c;
			var lLeft = _v5.d;
			var lRight = _v5.e;
			var _v6 = dict.e;
			var rClr = _v6.a;
			var rK = _v6.b;
			var rV = _v6.c;
			var rLeft = _v6.d;
			var rRight = _v6.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$removeHelpPrepEQGT = F7(
	function (targetKey, dict, color, key, value, left, right) {
		if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
			var _v1 = left.a;
			var lK = left.b;
			var lV = left.c;
			var lLeft = left.d;
			var lRight = left.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				lK,
				lV,
				lLeft,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, lRight, right));
		} else {
			_v2$2:
			while (true) {
				if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Black')) {
					if (right.d.$ === 'RBNode_elm_builtin') {
						if (right.d.a.$ === 'Black') {
							var _v3 = right.a;
							var _v4 = right.d;
							var _v5 = _v4.a;
							return $elm$core$Dict$moveRedRight(dict);
						} else {
							break _v2$2;
						}
					} else {
						var _v6 = right.a;
						var _v7 = right.d;
						return $elm$core$Dict$moveRedRight(dict);
					}
				} else {
					break _v2$2;
				}
			}
			return dict;
		}
	});
var $elm$core$Dict$removeMin = function (dict) {
	if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
		var color = dict.a;
		var key = dict.b;
		var value = dict.c;
		var left = dict.d;
		var lColor = left.a;
		var lLeft = left.d;
		var right = dict.e;
		if (lColor.$ === 'Black') {
			if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
				var _v3 = lLeft.a;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					key,
					value,
					$elm$core$Dict$removeMin(left),
					right);
			} else {
				var _v4 = $elm$core$Dict$moveRedLeft(dict);
				if (_v4.$ === 'RBNode_elm_builtin') {
					var nColor = _v4.a;
					var nKey = _v4.b;
					var nValue = _v4.c;
					var nLeft = _v4.d;
					var nRight = _v4.e;
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						$elm$core$Dict$removeMin(nLeft),
						nRight);
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			}
		} else {
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				value,
				$elm$core$Dict$removeMin(left),
				right);
		}
	} else {
		return $elm$core$Dict$RBEmpty_elm_builtin;
	}
};
var $elm$core$Dict$removeHelp = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_cmp(targetKey, key) < 0) {
				if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Black')) {
					var _v4 = left.a;
					var lLeft = left.d;
					if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
						var _v6 = lLeft.a;
						return A5(
							$elm$core$Dict$RBNode_elm_builtin,
							color,
							key,
							value,
							A2($elm$core$Dict$removeHelp, targetKey, left),
							right);
					} else {
						var _v7 = $elm$core$Dict$moveRedLeft(dict);
						if (_v7.$ === 'RBNode_elm_builtin') {
							var nColor = _v7.a;
							var nKey = _v7.b;
							var nValue = _v7.c;
							var nLeft = _v7.d;
							var nRight = _v7.e;
							return A5(
								$elm$core$Dict$balance,
								nColor,
								nKey,
								nValue,
								A2($elm$core$Dict$removeHelp, targetKey, nLeft),
								nRight);
						} else {
							return $elm$core$Dict$RBEmpty_elm_builtin;
						}
					}
				} else {
					return A5(
						$elm$core$Dict$RBNode_elm_builtin,
						color,
						key,
						value,
						A2($elm$core$Dict$removeHelp, targetKey, left),
						right);
				}
			} else {
				return A2(
					$elm$core$Dict$removeHelpEQGT,
					targetKey,
					A7($elm$core$Dict$removeHelpPrepEQGT, targetKey, dict, color, key, value, left, right));
			}
		}
	});
var $elm$core$Dict$removeHelpEQGT = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBNode_elm_builtin') {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_eq(targetKey, key)) {
				var _v1 = $elm$core$Dict$getMin(right);
				if (_v1.$ === 'RBNode_elm_builtin') {
					var minKey = _v1.b;
					var minValue = _v1.c;
					return A5(
						$elm$core$Dict$balance,
						color,
						minKey,
						minValue,
						left,
						$elm$core$Dict$removeMin(right));
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			} else {
				return A5(
					$elm$core$Dict$balance,
					color,
					key,
					value,
					left,
					A2($elm$core$Dict$removeHelp, targetKey, right));
			}
		} else {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		}
	});
var $elm$core$Dict$remove = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$removeHelp, key, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$update = F3(
	function (targetKey, alter, dictionary) {
		var _v0 = alter(
			A2($elm$core$Dict$get, targetKey, dictionary));
		if (_v0.$ === 'Just') {
			var value = _v0.a;
			return A3($elm$core$Dict$insert, targetKey, value, dictionary);
		} else {
			return A2($elm$core$Dict$remove, targetKey, dictionary);
		}
	});
var $elm$browser$Debugger$Expando$updateIndex = F3(
	function (n, func, list) {
		if (!list.b) {
			return _List_Nil;
		} else {
			var x = list.a;
			var xs = list.b;
			return (n <= 0) ? A2(
				$elm$core$List$cons,
				func(x),
				xs) : A2(
				$elm$core$List$cons,
				x,
				A3($elm$browser$Debugger$Expando$updateIndex, n - 1, func, xs));
		}
	});
var $elm$browser$Debugger$Expando$update = F2(
	function (msg, value) {
		switch (value.$) {
			case 'S':
				return value;
			case 'Primitive':
				return value;
			case 'Sequence':
				var seqType = value.a;
				var isClosed = value.b;
				var valueList = value.c;
				switch (msg.$) {
					case 'Toggle':
						return A3($elm$browser$Debugger$Expando$Sequence, seqType, !isClosed, valueList);
					case 'Index':
						if (msg.a.$ === 'None') {
							var _v3 = msg.a;
							var index = msg.b;
							var subMsg = msg.c;
							return A3(
								$elm$browser$Debugger$Expando$Sequence,
								seqType,
								isClosed,
								A3(
									$elm$browser$Debugger$Expando$updateIndex,
									index,
									$elm$browser$Debugger$Expando$update(subMsg),
									valueList));
						} else {
							return value;
						}
					default:
						return value;
				}
			case 'Dictionary':
				var isClosed = value.a;
				var keyValuePairs = value.b;
				switch (msg.$) {
					case 'Toggle':
						return A2($elm$browser$Debugger$Expando$Dictionary, !isClosed, keyValuePairs);
					case 'Index':
						var redirect = msg.a;
						var index = msg.b;
						var subMsg = msg.c;
						switch (redirect.$) {
							case 'None':
								return value;
							case 'Key':
								return A2(
									$elm$browser$Debugger$Expando$Dictionary,
									isClosed,
									A3(
										$elm$browser$Debugger$Expando$updateIndex,
										index,
										function (_v6) {
											var k = _v6.a;
											var v = _v6.b;
											return _Utils_Tuple2(
												A2($elm$browser$Debugger$Expando$update, subMsg, k),
												v);
										},
										keyValuePairs));
							default:
								return A2(
									$elm$browser$Debugger$Expando$Dictionary,
									isClosed,
									A3(
										$elm$browser$Debugger$Expando$updateIndex,
										index,
										function (_v7) {
											var k = _v7.a;
											var v = _v7.b;
											return _Utils_Tuple2(
												k,
												A2($elm$browser$Debugger$Expando$update, subMsg, v));
										},
										keyValuePairs));
						}
					default:
						return value;
				}
			case 'Record':
				var isClosed = value.a;
				var valueDict = value.b;
				switch (msg.$) {
					case 'Toggle':
						return A2($elm$browser$Debugger$Expando$Record, !isClosed, valueDict);
					case 'Index':
						return value;
					default:
						var field = msg.a;
						var subMsg = msg.b;
						return A2(
							$elm$browser$Debugger$Expando$Record,
							isClosed,
							A3(
								$elm$core$Dict$update,
								field,
								$elm$browser$Debugger$Expando$updateField(subMsg),
								valueDict));
				}
			default:
				var maybeName = value.a;
				var isClosed = value.b;
				var valueList = value.c;
				switch (msg.$) {
					case 'Toggle':
						return A3($elm$browser$Debugger$Expando$Constructor, maybeName, !isClosed, valueList);
					case 'Index':
						if (msg.a.$ === 'None') {
							var _v10 = msg.a;
							var index = msg.b;
							var subMsg = msg.c;
							return A3(
								$elm$browser$Debugger$Expando$Constructor,
								maybeName,
								isClosed,
								A3(
									$elm$browser$Debugger$Expando$updateIndex,
									index,
									$elm$browser$Debugger$Expando$update(subMsg),
									valueList));
						} else {
							return value;
						}
					default:
						return value;
				}
		}
	});
var $elm$browser$Debugger$Expando$updateField = F2(
	function (msg, maybeExpando) {
		if (maybeExpando.$ === 'Nothing') {
			return maybeExpando;
		} else {
			var expando = maybeExpando.a;
			return $elm$core$Maybe$Just(
				A2($elm$browser$Debugger$Expando$update, msg, expando));
		}
	});
var $elm$browser$Debugger$Main$Upload = function (a) {
	return {$: 'Upload', a: a};
};
var $elm$browser$Debugger$Main$upload = function (popout) {
	return A2(
		$elm$core$Task$perform,
		$elm$browser$Debugger$Main$Upload,
		_Debugger_upload(popout));
};
var $elm$browser$Debugger$Overlay$BadMetadata = function (a) {
	return {$: 'BadMetadata', a: a};
};
var $elm$browser$Debugger$Overlay$badMetadata = $elm$browser$Debugger$Overlay$BadMetadata;
var $elm$browser$Debugger$Main$withGoodMetadata = F2(
	function (model, func) {
		var _v0 = model.metadata;
		if (_v0.$ === 'Ok') {
			var metadata = _v0.a;
			return func(metadata);
		} else {
			var error = _v0.a;
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{
						overlay: $elm$browser$Debugger$Overlay$badMetadata(error)
					}),
				$elm$core$Platform$Cmd$none);
		}
	});
var $elm$browser$Debugger$Main$wrapUpdate = F3(
	function (update, msg, model) {
		wrapUpdate:
		while (true) {
			switch (msg.$) {
				case 'NoOp':
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				case 'UserMsg':
					var userMsg = msg.a;
					var userModel = $elm$browser$Debugger$Main$getLatestModel(model.state);
					var newHistory = A3($elm$browser$Debugger$History$add, userMsg, userModel, model.history);
					var _v1 = A2(update, userMsg, userModel);
					var newUserModel = _v1.a;
					var userCmds = _v1.b;
					var commands = A2($elm$core$Platform$Cmd$map, $elm$browser$Debugger$Main$UserMsg, userCmds);
					var _v2 = model.state;
					if (_v2.$ === 'Running') {
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									expandoModel: A2($elm$browser$Debugger$Expando$merge, newUserModel, model.expandoModel),
									expandoMsg: A2($elm$browser$Debugger$Expando$merge, userMsg, model.expandoMsg),
									history: newHistory,
									state: $elm$browser$Debugger$Main$Running(newUserModel)
								}),
							$elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										commands,
										$elm$browser$Debugger$Main$scroll(model.popout)
									])));
					} else {
						var index = _v2.a;
						var indexModel = _v2.b;
						var history = _v2.e;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									history: newHistory,
									state: A5($elm$browser$Debugger$Main$Paused, index, indexModel, newUserModel, userMsg, history)
								}),
							commands);
					}
				case 'TweakExpandoMsg':
					var eMsg = msg.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								expandoMsg: A2($elm$browser$Debugger$Expando$update, eMsg, model.expandoMsg)
							}),
						$elm$core$Platform$Cmd$none);
				case 'TweakExpandoModel':
					var eMsg = msg.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								expandoModel: A2($elm$browser$Debugger$Expando$update, eMsg, model.expandoModel)
							}),
						$elm$core$Platform$Cmd$none);
				case 'Resume':
					var _v3 = model.state;
					if (_v3.$ === 'Running') {
						return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
					} else {
						var userModel = _v3.c;
						var userMsg = _v3.d;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									expandoModel: A2($elm$browser$Debugger$Expando$merge, userModel, model.expandoModel),
									expandoMsg: A2($elm$browser$Debugger$Expando$merge, userMsg, model.expandoMsg),
									state: $elm$browser$Debugger$Main$Running(userModel)
								}),
							$elm$browser$Debugger$Main$scroll(model.popout));
					}
				case 'Jump':
					var index = msg.a;
					return _Utils_Tuple2(
						A3($elm$browser$Debugger$Main$jumpUpdate, update, index, model),
						$elm$core$Platform$Cmd$none);
				case 'SliderJump':
					var index = msg.a;
					return _Utils_Tuple2(
						A3($elm$browser$Debugger$Main$jumpUpdate, update, index, model),
						A2(
							$elm$browser$Debugger$Main$scrollTo,
							$elm$browser$Debugger$History$idForMessageIndex(index),
							model.popout));
				case 'Open':
					return _Utils_Tuple2(
						model,
						A2(
							$elm$core$Task$perform,
							$elm$core$Basics$always($elm$browser$Debugger$Main$NoOp),
							_Debugger_open(model.popout)));
				case 'Up':
					var _v4 = model.state;
					if (_v4.$ === 'Running') {
						return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
					} else {
						var i = _v4.a;
						var history = _v4.e;
						var targetIndex = i + 1;
						if (_Utils_cmp(
							targetIndex,
							$elm$browser$Debugger$History$size(history)) < 0) {
							var $temp$update = update,
								$temp$msg = $elm$browser$Debugger$Main$SliderJump(targetIndex),
								$temp$model = model;
							update = $temp$update;
							msg = $temp$msg;
							model = $temp$model;
							continue wrapUpdate;
						} else {
							var $temp$update = update,
								$temp$msg = $elm$browser$Debugger$Main$Resume,
								$temp$model = model;
							update = $temp$update;
							msg = $temp$msg;
							model = $temp$model;
							continue wrapUpdate;
						}
					}
				case 'Down':
					var _v5 = model.state;
					if (_v5.$ === 'Running') {
						var $temp$update = update,
							$temp$msg = $elm$browser$Debugger$Main$Jump(
							$elm$browser$Debugger$History$size(model.history) - 1),
							$temp$model = model;
						update = $temp$update;
						msg = $temp$msg;
						model = $temp$model;
						continue wrapUpdate;
					} else {
						var index = _v5.a;
						if (index > 0) {
							var $temp$update = update,
								$temp$msg = $elm$browser$Debugger$Main$SliderJump(index - 1),
								$temp$model = model;
							update = $temp$update;
							msg = $temp$msg;
							model = $temp$model;
							continue wrapUpdate;
						} else {
							return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
						}
					}
				case 'Import':
					return A2(
						$elm$browser$Debugger$Main$withGoodMetadata,
						model,
						function (_v6) {
							return _Utils_Tuple2(
								model,
								$elm$browser$Debugger$Main$upload(model.popout));
						});
				case 'Export':
					return A2(
						$elm$browser$Debugger$Main$withGoodMetadata,
						model,
						function (metadata) {
							return _Utils_Tuple2(
								model,
								A2($elm$browser$Debugger$Main$download, metadata, model.history));
						});
				case 'Upload':
					var jsonString = msg.a;
					return A2(
						$elm$browser$Debugger$Main$withGoodMetadata,
						model,
						function (metadata) {
							var _v7 = A2($elm$browser$Debugger$Overlay$assessImport, metadata, jsonString);
							if (_v7.$ === 'Err') {
								var newOverlay = _v7.a;
								return _Utils_Tuple2(
									_Utils_update(
										model,
										{overlay: newOverlay}),
									$elm$core$Platform$Cmd$none);
							} else {
								var rawHistory = _v7.a;
								return A3($elm$browser$Debugger$Main$loadNewHistory, rawHistory, update, model);
							}
						});
				case 'OverlayMsg':
					var overlayMsg = msg.a;
					var _v8 = A2($elm$browser$Debugger$Overlay$close, overlayMsg, model.overlay);
					if (_v8.$ === 'Nothing') {
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{overlay: $elm$browser$Debugger$Overlay$none}),
							$elm$core$Platform$Cmd$none);
					} else {
						var rawHistory = _v8.a;
						return A3($elm$browser$Debugger$Main$loadNewHistory, rawHistory, update, model);
					}
				case 'SwapLayout':
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								layout: $elm$browser$Debugger$Main$swapLayout(model.layout)
							}),
						$elm$core$Platform$Cmd$none);
				case 'DragStart':
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								layout: A2($elm$browser$Debugger$Main$setDragStatus, $elm$browser$Debugger$Main$Moving, model.layout)
							}),
						$elm$core$Platform$Cmd$none);
				case 'Drag':
					var info = msg.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								layout: A2($elm$browser$Debugger$Main$drag, info, model.layout)
							}),
						$elm$core$Platform$Cmd$none);
				default:
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								layout: A2($elm$browser$Debugger$Main$setDragStatus, $elm$browser$Debugger$Main$Static, model.layout)
							}),
						$elm$core$Platform$Cmd$none);
			}
		}
	});
var $elm$browser$Browser$External = function (a) {
	return {$: 'External', a: a};
};
var $elm$browser$Browser$Internal = function (a) {
	return {$: 'Internal', a: a};
};
var $elm$browser$Browser$Dom$NotFound = function (a) {
	return {$: 'NotFound', a: a};
};
var $elm$url$Url$Http = {$: 'Http'};
var $elm$url$Url$Https = {$: 'Https'};
var $elm$url$Url$Url = F6(
	function (protocol, host, port_, path, query, fragment) {
		return {fragment: fragment, host: host, path: path, port_: port_, protocol: protocol, query: query};
	});
var $elm$core$String$dropLeft = F2(
	function (n, string) {
		return (n < 1) ? string : A3(
			$elm$core$String$slice,
			n,
			$elm$core$String$length(string),
			string);
	});
var $elm$core$String$indexes = _String_indexes;
var $elm$core$String$isEmpty = function (string) {
	return string === '';
};
var $elm$url$Url$chompBeforePath = F5(
	function (protocol, path, params, frag, str) {
		if ($elm$core$String$isEmpty(str) || A2($elm$core$String$contains, '@', str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, ':', str);
			if (!_v0.b) {
				return $elm$core$Maybe$Just(
					A6($elm$url$Url$Url, protocol, str, $elm$core$Maybe$Nothing, path, params, frag));
			} else {
				if (!_v0.b.b) {
					var i = _v0.a;
					var _v1 = $elm$core$String$toInt(
						A2($elm$core$String$dropLeft, i + 1, str));
					if (_v1.$ === 'Nothing') {
						return $elm$core$Maybe$Nothing;
					} else {
						var port_ = _v1;
						return $elm$core$Maybe$Just(
							A6(
								$elm$url$Url$Url,
								protocol,
								A2($elm$core$String$left, i, str),
								port_,
								path,
								params,
								frag));
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}
		}
	});
var $elm$url$Url$chompBeforeQuery = F4(
	function (protocol, params, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '/', str);
			if (!_v0.b) {
				return A5($elm$url$Url$chompBeforePath, protocol, '/', params, frag, str);
			} else {
				var i = _v0.a;
				return A5(
					$elm$url$Url$chompBeforePath,
					protocol,
					A2($elm$core$String$dropLeft, i, str),
					params,
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompBeforeFragment = F3(
	function (protocol, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '?', str);
			if (!_v0.b) {
				return A4($elm$url$Url$chompBeforeQuery, protocol, $elm$core$Maybe$Nothing, frag, str);
			} else {
				var i = _v0.a;
				return A4(
					$elm$url$Url$chompBeforeQuery,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompAfterProtocol = F2(
	function (protocol, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '#', str);
			if (!_v0.b) {
				return A3($elm$url$Url$chompBeforeFragment, protocol, $elm$core$Maybe$Nothing, str);
			} else {
				var i = _v0.a;
				return A3(
					$elm$url$Url$chompBeforeFragment,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$core$String$startsWith = _String_startsWith;
var $elm$url$Url$fromString = function (str) {
	return A2($elm$core$String$startsWith, 'http://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		$elm$url$Url$Http,
		A2($elm$core$String$dropLeft, 7, str)) : (A2($elm$core$String$startsWith, 'https://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		$elm$url$Url$Https,
		A2($elm$core$String$dropLeft, 8, str)) : $elm$core$Maybe$Nothing);
};
var $elm$core$Basics$never = function (_v0) {
	never:
	while (true) {
		var nvr = _v0.a;
		var $temp$_v0 = nvr;
		_v0 = $temp$_v0;
		continue never;
	}
};
var $elm$browser$Browser$application = _Browser_application;
var $author$project$Main$Redirect = function (a) {
	return {$: 'Redirect', a: a};
};
var $author$project$Main$UpdatedTimeZone = function (a) {
	return {$: 'UpdatedTimeZone', a: a};
};
var $elm$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		if (maybeValue.$ === 'Just') {
			var value = maybeValue.a;
			return callback(value);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Main$BusDetailsPage = function (a) {
	return {$: 'BusDetailsPage', a: a};
};
var $author$project$Main$BusRegistration = function (a) {
	return {$: 'BusRegistration', a: a};
};
var $author$project$Main$BusesList = function (a) {
	return {$: 'BusesList', a: a};
};
var $author$project$Main$CreateBusRepair = function (a) {
	return {$: 'CreateBusRepair', a: a};
};
var $author$project$Main$CrewMemberRegistration = function (a) {
	return {$: 'CrewMemberRegistration', a: a};
};
var $author$project$Main$CrewMembers = function (a) {
	return {$: 'CrewMembers', a: a};
};
var $author$project$Main$DeviceRegistration = function (a) {
	return {$: 'DeviceRegistration', a: a};
};
var $author$project$Main$DevicesList = function (a) {
	return {$: 'DevicesList', a: a};
};
var $author$project$Main$GotBusDetailsPageMsg = function (a) {
	return {$: 'GotBusDetailsPageMsg', a: a};
};
var $author$project$Main$GotBusRegistrationMsg = function (a) {
	return {$: 'GotBusRegistrationMsg', a: a};
};
var $author$project$Main$GotBusesListMsg = function (a) {
	return {$: 'GotBusesListMsg', a: a};
};
var $author$project$Main$GotCreateBusRepairMsg = function (a) {
	return {$: 'GotCreateBusRepairMsg', a: a};
};
var $author$project$Main$GotCrewMemberRegistrationMsg = function (a) {
	return {$: 'GotCrewMemberRegistrationMsg', a: a};
};
var $author$project$Main$GotCrewMembersMsg = function (a) {
	return {$: 'GotCrewMembersMsg', a: a};
};
var $author$project$Main$GotDeviceRegistrationMsg = function (a) {
	return {$: 'GotDeviceRegistrationMsg', a: a};
};
var $author$project$Main$GotDevicesListMsg = function (a) {
	return {$: 'GotDevicesListMsg', a: a};
};
var $author$project$Main$GotHomeMsg = function (a) {
	return {$: 'GotHomeMsg', a: a};
};
var $author$project$Main$GotHouseholdListMsg = function (a) {
	return {$: 'GotHouseholdListMsg', a: a};
};
var $author$project$Main$GotLoginMsg = function (a) {
	return {$: 'GotLoginMsg', a: a};
};
var $author$project$Main$GotLogoutMsg = function (a) {
	return {$: 'GotLogoutMsg', a: a};
};
var $author$project$Main$GotRoutesListMsg = function (a) {
	return {$: 'GotRoutesListMsg', a: a};
};
var $author$project$Main$GotSignupMsg = function (a) {
	return {$: 'GotSignupMsg', a: a};
};
var $author$project$Main$GotStudentRegistrationMsg = function (a) {
	return {$: 'GotStudentRegistrationMsg', a: a};
};
var $author$project$Main$Home = function (a) {
	return {$: 'Home', a: a};
};
var $author$project$Main$HouseholdList = function (a) {
	return {$: 'HouseholdList', a: a};
};
var $author$project$Main$Login = function (a) {
	return {$: 'Login', a: a};
};
var $author$project$Main$Logout = function (a) {
	return {$: 'Logout', a: a};
};
var $author$project$Main$NotFound = function (a) {
	return {$: 'NotFound', a: a};
};
var $author$project$Main$RoutesList = function (a) {
	return {$: 'RoutesList', a: a};
};
var $author$project$Main$Signup = function (a) {
	return {$: 'Signup', a: a};
};
var $author$project$Main$StudentRegistration = function (a) {
	return {$: 'StudentRegistration', a: a};
};
var $krisajenkins$remotedata$RemoteData$Loading = {$: 'Loading'};
var $author$project$Pages$Buses$BusPage$ServerResponse = function (a) {
	return {$: 'ServerResponse', a: a};
};
var $author$project$Api$Endpoint$Endpoint = function (a) {
	return {$: 'Endpoint', a: a};
};
var $elm$url$Url$Builder$toQueryPair = function (_v0) {
	var key = _v0.a;
	var value = _v0.b;
	return key + ('=' + value);
};
var $elm$url$Url$Builder$toQuery = function (parameters) {
	if (!parameters.b) {
		return '';
	} else {
		return '?' + A2(
			$elm$core$String$join,
			'&',
			A2($elm$core$List$map, $elm$url$Url$Builder$toQueryPair, parameters));
	}
};
var $elm$url$Url$Builder$absolute = F2(
	function (pathSegments, parameters) {
		return '/' + (A2($elm$core$String$join, '/', pathSegments) + $elm$url$Url$Builder$toQuery(parameters));
	});
var $author$project$Api$Endpoint$url = F2(
	function (paths, queryParams) {
		return $author$project$Api$Endpoint$Endpoint(
			A2(
				$elm$url$Url$Builder$absolute,
				A2($elm$core$List$cons, 'api', paths),
				queryParams));
	});
var $author$project$Api$Endpoint$bus = function (busID) {
	return A2(
		$author$project$Api$Endpoint$url,
		_List_fromArray(
			[
				'school',
				'buses',
				$elm$core$String$fromInt(busID)
			]),
		_List_Nil);
};
var $author$project$Pages$Buses$BusPage$About = function (a) {
	return {$: 'About', a: a};
};
var $author$project$Pages$Buses$BusPage$GotAboutMsg = function (a) {
	return {$: 'GotAboutMsg', a: a};
};
var $author$project$Pages$Buses$AboutBus$Model = F4(
	function (showGeofence, bus, session, currentPage) {
		return {bus: bus, currentPage: currentPage, session: session, showGeofence: showGeofence};
	});
var $author$project$Pages$Buses$AboutBus$Statistics = {$: 'Statistics'};
var $elm$json$Json$Encode$bool = _Json_wrap;
var $author$project$Ports$initializeMaps = _Platform_outgoingPort('initializeMaps', $elm$json$Json$Encode$bool);
var $author$project$Pages$Buses$AboutBus$init = F2(
	function (session, bus) {
		return _Utils_Tuple2(
			A4($author$project$Pages$Buses$AboutBus$Model, true, bus, session, $author$project$Pages$Buses$AboutBus$Statistics),
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						$author$project$Ports$initializeMaps(false)
					])));
	});
var $author$project$Page$transformToModelMsg = F3(
	function (toModel, toMsg, _v0) {
		var subModel = _v0.a;
		var subCmd = _v0.b;
		return _Utils_Tuple2(
			toModel(subModel),
			A2($elm$core$Platform$Cmd$map, toMsg, subCmd));
	});
var $author$project$Pages$Buses$BusPage$aboutPage = F2(
	function (bus, session) {
		return A3(
			$author$project$Page$transformToModelMsg,
			$author$project$Pages$Buses$BusPage$About,
			$author$project$Pages$Buses$BusPage$GotAboutMsg,
			A2($author$project$Pages$Buses$AboutBus$init, session, bus));
	});
var $author$project$Pages$Buses$BusPage$BusDevice = function (a) {
	return {$: 'BusDevice', a: a};
};
var $author$project$Pages$Buses$BusPage$GotBusDeviceMsg = function (a) {
	return {$: 'GotBusDeviceMsg', a: a};
};
var $author$project$Pages$Buses$BusDevicePage$About = {$: 'About'};
var $author$project$Pages$Buses$BusDevicePage$Model = F3(
	function (currentPage, session, bus) {
		return {bus: bus, currentPage: currentPage, session: session};
	});
var $author$project$Pages$Buses$BusDevicePage$init = F2(
	function (bus, session) {
		return _Utils_Tuple2(
			A3($author$project$Pages$Buses$BusDevicePage$Model, $author$project$Pages$Buses$BusDevicePage$About, session, bus),
			$elm$core$Platform$Cmd$none);
	});
var $author$project$Pages$Buses$BusPage$devicePage = F2(
	function (bus, session) {
		return A3(
			$author$project$Page$transformToModelMsg,
			$author$project$Pages$Buses$BusPage$BusDevice,
			$author$project$Pages$Buses$BusPage$GotBusDeviceMsg,
			A2($author$project$Pages$Buses$BusDevicePage$init, bus, session));
	});
var $elm$core$List$filter = F2(
	function (isGood, list) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, xs) {
					return isGood(x) ? A2($elm$core$List$cons, x, xs) : xs;
				}),
			_List_Nil,
			list);
	});
var $mdgriffith$elm_ui$Internal$Model$StyleClass = F2(
	function (a, b) {
		return {$: 'StyleClass', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$Transparency = F2(
	function (a, b) {
		return {$: 'Transparency', a: a, b: b};
	});
var $elm$core$Basics$round = _Basics_round;
var $mdgriffith$elm_ui$Internal$Model$floatClass = function (x) {
	return $elm$core$String$fromInt(
		$elm$core$Basics$round(x * 255));
};
var $elm$core$Basics$min = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) < 0) ? x : y;
	});
var $mdgriffith$elm_ui$Internal$Flag$Flag = function (a) {
	return {$: 'Flag', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$Second = function (a) {
	return {$: 'Second', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$flag = function (i) {
	return (i > 31) ? $mdgriffith$elm_ui$Internal$Flag$Second(1 << (i - 32)) : $mdgriffith$elm_ui$Internal$Flag$Flag(1 << i);
};
var $mdgriffith$elm_ui$Internal$Flag$transparency = $mdgriffith$elm_ui$Internal$Flag$flag(0);
var $mdgriffith$elm_ui$Element$alpha = function (o) {
	var transparency = function (x) {
		return 1 - x;
	}(
		A2(
			$elm$core$Basics$min,
			1.0,
			A2($elm$core$Basics$max, 0.0, o)));
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$transparency,
		A2(
			$mdgriffith$elm_ui$Internal$Model$Transparency,
			'transparency-' + $mdgriffith$elm_ui$Internal$Model$floatClass(transparency),
			transparency));
};
var $mdgriffith$elm_ui$Internal$Model$Attr = function (a) {
	return {$: 'Attr', a: a};
};
var $mdgriffith$elm_ui$Element$htmlAttribute = $mdgriffith$elm_ui$Internal$Model$Attr;
var $mdgriffith$elm_ui$Internal$Model$NodeName = function (a) {
	return {$: 'NodeName', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Unkeyed = function (a) {
	return {$: 'Unkeyed', a: a};
};
var $elm$html$Html$Attributes$alt = $elm$html$Html$Attributes$stringProperty('alt');
var $mdgriffith$elm_ui$Internal$Model$AsEl = {$: 'AsEl'};
var $mdgriffith$elm_ui$Internal$Model$asEl = $mdgriffith$elm_ui$Internal$Model$AsEl;
var $mdgriffith$elm_ui$Internal$Style$classes = {above: 'a', active: 'atv', alignBottom: 'ab', alignCenterX: 'cx', alignCenterY: 'cy', alignContainerBottom: 'acb', alignContainerCenterX: 'accx', alignContainerCenterY: 'accy', alignContainerRight: 'acr', alignLeft: 'al', alignRight: 'ar', alignTop: 'at', alignedHorizontally: 'ah', alignedVertically: 'av', any: 's', behind: 'bh', below: 'b', bold: 'w7', borderDashed: 'bd', borderDotted: 'bdt', borderNone: 'bn', borderSolid: 'bs', capturePointerEvents: 'cpe', clip: 'cp', clipX: 'cpx', clipY: 'cpy', column: 'c', container: 'ctr', contentBottom: 'cb', contentCenterX: 'ccx', contentCenterY: 'ccy', contentLeft: 'cl', contentRight: 'cr', contentTop: 'ct', cursorPointer: 'cptr', cursorText: 'ctxt', focus: 'fcs', focusedWithin: 'focus-within', fullSize: 'fs', grid: 'g', hasBehind: 'hbh', heightContent: 'hc', heightExact: 'he', heightFill: 'hf', heightFillPortion: 'hfp', hover: 'hv', imageContainer: 'ic', inFront: 'fr', inputMultiline: 'iml', inputMultilineFiller: 'imlf', inputMultilineParent: 'imlp', inputMultilineWrapper: 'implw', inputText: 'it', italic: 'i', link: 'lnk', nearby: 'nb', noTextSelection: 'notxt', onLeft: 'ol', onRight: 'or', opaque: 'oq', overflowHidden: 'oh', page: 'pg', paragraph: 'p', passPointerEvents: 'ppe', root: 'ui', row: 'r', scrollbars: 'sb', scrollbarsX: 'sbx', scrollbarsY: 'sby', seButton: 'sbt', single: 'e', sizeByCapital: 'cap', spaceEvenly: 'sev', strike: 'sk', text: 't', textCenter: 'tc', textExtraBold: 'w8', textExtraLight: 'w2', textHeavy: 'w9', textJustify: 'tj', textJustifyAll: 'tja', textLeft: 'tl', textLight: 'w3', textMedium: 'w5', textNormalWeight: 'w4', textRight: 'tr', textSemiBold: 'w6', textThin: 'w1', textUnitalicized: 'tun', transition: 'ts', transparent: 'clr', underline: 'u', widthContent: 'wc', widthExact: 'we', widthFill: 'wf', widthFillPortion: 'wfp', wrapped: 'wrp'};
var $mdgriffith$elm_ui$Internal$Model$Generic = {$: 'Generic'};
var $mdgriffith$elm_ui$Internal$Model$div = $mdgriffith$elm_ui$Internal$Model$Generic;
var $mdgriffith$elm_ui$Internal$Model$NoNearbyChildren = {$: 'NoNearbyChildren'};
var $mdgriffith$elm_ui$Internal$Model$columnClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.column);
var $mdgriffith$elm_ui$Internal$Model$gridClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.grid);
var $mdgriffith$elm_ui$Internal$Model$pageClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.page);
var $mdgriffith$elm_ui$Internal$Model$paragraphClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.paragraph);
var $mdgriffith$elm_ui$Internal$Model$rowClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.row);
var $mdgriffith$elm_ui$Internal$Model$singleClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.single);
var $mdgriffith$elm_ui$Internal$Model$contextClasses = function (context) {
	switch (context.$) {
		case 'AsRow':
			return $mdgriffith$elm_ui$Internal$Model$rowClass;
		case 'AsColumn':
			return $mdgriffith$elm_ui$Internal$Model$columnClass;
		case 'AsEl':
			return $mdgriffith$elm_ui$Internal$Model$singleClass;
		case 'AsGrid':
			return $mdgriffith$elm_ui$Internal$Model$gridClass;
		case 'AsParagraph':
			return $mdgriffith$elm_ui$Internal$Model$paragraphClass;
		default:
			return $mdgriffith$elm_ui$Internal$Model$pageClass;
	}
};
var $mdgriffith$elm_ui$Internal$Model$Keyed = function (a) {
	return {$: 'Keyed', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$NoStyleSheet = {$: 'NoStyleSheet'};
var $mdgriffith$elm_ui$Internal$Model$Styled = function (a) {
	return {$: 'Styled', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Unstyled = function (a) {
	return {$: 'Unstyled', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$addChildren = F2(
	function (existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 'NoNearbyChildren':
				return existing;
			case 'ChildrenBehind':
				var behind = nearbyChildren.a;
				return _Utils_ap(behind, existing);
			case 'ChildrenInFront':
				var inFront = nearbyChildren.a;
				return _Utils_ap(existing, inFront);
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					behind,
					_Utils_ap(existing, inFront));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$addKeyedChildren = F3(
	function (key, existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 'NoNearbyChildren':
				return existing;
			case 'ChildrenBehind':
				var behind = nearbyChildren.a;
				return _Utils_ap(
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					existing);
			case 'ChildrenInFront':
				var inFront = nearbyChildren.a;
				return _Utils_ap(
					existing,
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						inFront));
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					_Utils_ap(
						existing,
						A2(
							$elm$core$List$map,
							function (x) {
								return _Utils_Tuple2(key, x);
							},
							inFront)));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$AsParagraph = {$: 'AsParagraph'};
var $mdgriffith$elm_ui$Internal$Model$asParagraph = $mdgriffith$elm_ui$Internal$Model$AsParagraph;
var $mdgriffith$elm_ui$Internal$Flag$alignBottom = $mdgriffith$elm_ui$Internal$Flag$flag(41);
var $mdgriffith$elm_ui$Internal$Flag$alignRight = $mdgriffith$elm_ui$Internal$Flag$flag(40);
var $mdgriffith$elm_ui$Internal$Flag$centerX = $mdgriffith$elm_ui$Internal$Flag$flag(42);
var $mdgriffith$elm_ui$Internal$Flag$centerY = $mdgriffith$elm_ui$Internal$Flag$flag(43);
var $elm$core$Set$Set_elm_builtin = function (a) {
	return {$: 'Set_elm_builtin', a: a};
};
var $elm$core$Set$empty = $elm$core$Set$Set_elm_builtin($elm$core$Dict$empty);
var $mdgriffith$elm_ui$Internal$Model$lengthClassName = function (x) {
	switch (x.$) {
		case 'Px':
			var px = x.a;
			return $elm$core$String$fromInt(px) + 'px';
		case 'Content':
			return 'auto';
		case 'Fill':
			var i = x.a;
			return $elm$core$String$fromInt(i) + 'fr';
		case 'Min':
			var min = x.a;
			var len = x.b;
			return 'min' + ($elm$core$String$fromInt(min) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
		default:
			var max = x.a;
			var len = x.b;
			return 'max' + ($elm$core$String$fromInt(max) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
	}
};
var $mdgriffith$elm_ui$Internal$Model$transformClass = function (transform) {
	switch (transform.$) {
		case 'Untransformed':
			return $elm$core$Maybe$Nothing;
		case 'Moved':
			var _v1 = transform.a;
			var x = _v1.a;
			var y = _v1.b;
			var z = _v1.c;
			return $elm$core$Maybe$Just(
				'mv-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(x) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(y) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(z))))));
		default:
			var _v2 = transform.a;
			var tx = _v2.a;
			var ty = _v2.b;
			var tz = _v2.c;
			var _v3 = transform.b;
			var sx = _v3.a;
			var sy = _v3.b;
			var sz = _v3.c;
			var _v4 = transform.c;
			var ox = _v4.a;
			var oy = _v4.b;
			var oz = _v4.c;
			var angle = transform.d;
			return $elm$core$Maybe$Just(
				'tfrm-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(tx) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(ty) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(tz) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sx) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sy) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sz) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(ox) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(oy) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(oz) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(angle))))))))))))))))))));
	}
};
var $mdgriffith$elm_ui$Internal$Model$getStyleName = function (style) {
	switch (style.$) {
		case 'Shadows':
			var name = style.a;
			return name;
		case 'Transparency':
			var name = style.a;
			var o = style.b;
			return name;
		case 'Style':
			var _class = style.a;
			return _class;
		case 'FontFamily':
			var name = style.a;
			return name;
		case 'FontSize':
			var i = style.a;
			return 'font-size-' + $elm$core$String$fromInt(i);
		case 'Single':
			var _class = style.a;
			return _class;
		case 'Colored':
			var _class = style.a;
			return _class;
		case 'SpacingStyle':
			var cls = style.a;
			var x = style.b;
			var y = style.c;
			return cls;
		case 'PaddingStyle':
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 'BorderWidth':
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 'GridTemplateStyle':
			var template = style.a;
			return 'grid-rows-' + (A2(
				$elm$core$String$join,
				'-',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.rows)) + ('-cols-' + (A2(
				$elm$core$String$join,
				'-',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.columns)) + ('-space-x-' + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.a) + ('-space-y-' + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.b)))))));
		case 'GridPosition':
			var pos = style.a;
			return 'gp grid-pos-' + ($elm$core$String$fromInt(pos.row) + ('-' + ($elm$core$String$fromInt(pos.col) + ('-' + ($elm$core$String$fromInt(pos.width) + ('-' + $elm$core$String$fromInt(pos.height)))))));
		case 'PseudoSelector':
			var selector = style.a;
			var subStyle = style.b;
			var name = function () {
				switch (selector.$) {
					case 'Focus':
						return 'fs';
					case 'Hover':
						return 'hv';
					default:
						return 'act';
				}
			}();
			return A2(
				$elm$core$String$join,
				' ',
				A2(
					$elm$core$List$map,
					function (sty) {
						var _v1 = $mdgriffith$elm_ui$Internal$Model$getStyleName(sty);
						if (_v1 === '') {
							return '';
						} else {
							var styleName = _v1;
							return styleName + ('-' + name);
						}
					},
					subStyle));
		default:
			var x = style.a;
			return A2(
				$elm$core$Maybe$withDefault,
				'',
				$mdgriffith$elm_ui$Internal$Model$transformClass(x));
	}
};
var $elm$core$Set$insert = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return $elm$core$Set$Set_elm_builtin(
			A3($elm$core$Dict$insert, key, _Utils_Tuple0, dict));
	});
var $elm$core$Dict$member = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$get, key, dict);
		if (_v0.$ === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var $elm$core$Set$member = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return A2($elm$core$Dict$member, key, dict);
	});
var $mdgriffith$elm_ui$Internal$Model$reduceStyles = F2(
	function (style, nevermind) {
		var cache = nevermind.a;
		var existing = nevermind.b;
		var styleName = $mdgriffith$elm_ui$Internal$Model$getStyleName(style);
		return A2($elm$core$Set$member, styleName, cache) ? nevermind : _Utils_Tuple2(
			A2($elm$core$Set$insert, styleName, cache),
			A2($elm$core$List$cons, style, existing));
	});
var $mdgriffith$elm_ui$Internal$Model$Property = F2(
	function (a, b) {
		return {$: 'Property', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$Style = F2(
	function (a, b) {
		return {$: 'Style', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$dot = function (c) {
	return '.' + c;
};
var $mdgriffith$elm_ui$Internal$Model$formatColor = function (_v0) {
	var red = _v0.a;
	var green = _v0.b;
	var blue = _v0.c;
	var alpha = _v0.d;
	return 'rgba(' + ($elm$core$String$fromInt(
		$elm$core$Basics$round(red * 255)) + ((',' + $elm$core$String$fromInt(
		$elm$core$Basics$round(green * 255))) + ((',' + $elm$core$String$fromInt(
		$elm$core$Basics$round(blue * 255))) + (',' + ($elm$core$String$fromFloat(alpha) + ')')))));
};
var $mdgriffith$elm_ui$Internal$Model$formatBoxShadow = function (shadow) {
	return A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			_List_fromArray(
				[
					shadow.inset ? $elm$core$Maybe$Just('inset') : $elm$core$Maybe$Nothing,
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.offset.a) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.offset.b) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.blur) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.size) + 'px'),
					$elm$core$Maybe$Just(
					$mdgriffith$elm_ui$Internal$Model$formatColor(shadow.color))
				])));
};
var $elm$core$Maybe$map = F2(
	function (f, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return $elm$core$Maybe$Just(
				f(value));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $elm$core$Tuple$mapFirst = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			func(x),
			y);
	});
var $elm$core$Tuple$mapSecond = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			x,
			func(y));
	});
var $mdgriffith$elm_ui$Internal$Model$renderFocusStyle = function (focus) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Model$Style,
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.focusedWithin) + ':focus-within',
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'border-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.borderColor),
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'background-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.backgroundColor),
						A2(
						$elm$core$Maybe$map,
						function (shadow) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'box-shadow',
								$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(
									{
										blur: shadow.blur,
										color: shadow.color,
										inset: false,
										offset: A2(
											$elm$core$Tuple$mapSecond,
											$elm$core$Basics$toFloat,
											A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.offset)),
										size: shadow.size
									}));
						},
						focus.shadow),
						$elm$core$Maybe$Just(
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'outline', 'none'))
					]))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$Style,
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + (':focus .focusable, ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + '.focusable:focus')),
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'border-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.borderColor),
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'background-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.backgroundColor),
						A2(
						$elm$core$Maybe$map,
						function (shadow) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'box-shadow',
								$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(
									{
										blur: shadow.blur,
										color: shadow.color,
										inset: false,
										offset: A2(
											$elm$core$Tuple$mapSecond,
											$elm$core$Basics$toFloat,
											A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.offset)),
										size: shadow.size
									}));
						},
						focus.shadow),
						$elm$core$Maybe$Just(
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'outline', 'none'))
					])))
		]);
};
var $elm$virtual_dom$VirtualDom$property = F2(
	function (key, value) {
		return A2(
			_VirtualDom_property,
			_VirtualDom_noInnerHtmlOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $mdgriffith$elm_ui$Internal$Style$Batch = function (a) {
	return {$: 'Batch', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Child = F2(
	function (a, b) {
		return {$: 'Child', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Class = F2(
	function (a, b) {
		return {$: 'Class', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Descriptor = F2(
	function (a, b) {
		return {$: 'Descriptor', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Left = {$: 'Left'};
var $mdgriffith$elm_ui$Internal$Style$Prop = F2(
	function (a, b) {
		return {$: 'Prop', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Right = {$: 'Right'};
var $mdgriffith$elm_ui$Internal$Style$Self = function (a) {
	return {$: 'Self', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Supports = F2(
	function (a, b) {
		return {$: 'Supports', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Content = function (a) {
	return {$: 'Content', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Bottom = {$: 'Bottom'};
var $mdgriffith$elm_ui$Internal$Style$CenterX = {$: 'CenterX'};
var $mdgriffith$elm_ui$Internal$Style$CenterY = {$: 'CenterY'};
var $mdgriffith$elm_ui$Internal$Style$Top = {$: 'Top'};
var $mdgriffith$elm_ui$Internal$Style$alignments = _List_fromArray(
	[$mdgriffith$elm_ui$Internal$Style$Top, $mdgriffith$elm_ui$Internal$Style$Bottom, $mdgriffith$elm_ui$Internal$Style$Right, $mdgriffith$elm_ui$Internal$Style$Left, $mdgriffith$elm_ui$Internal$Style$CenterX, $mdgriffith$elm_ui$Internal$Style$CenterY]);
var $mdgriffith$elm_ui$Internal$Style$contentName = function (desc) {
	switch (desc.a.$) {
		case 'Top':
			var _v1 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentTop);
		case 'Bottom':
			var _v2 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentBottom);
		case 'Right':
			var _v3 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentRight);
		case 'Left':
			var _v4 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentLeft);
		case 'CenterX':
			var _v5 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX);
		default:
			var _v6 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY);
	}
};
var $mdgriffith$elm_ui$Internal$Style$selfName = function (desc) {
	switch (desc.a.$) {
		case 'Top':
			var _v1 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignTop);
		case 'Bottom':
			var _v2 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignBottom);
		case 'Right':
			var _v3 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignRight);
		case 'Left':
			var _v4 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignLeft);
		case 'CenterX':
			var _v5 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX);
		default:
			var _v6 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY);
	}
};
var $mdgriffith$elm_ui$Internal$Style$describeAlignment = function (values) {
	var createDescription = function (alignment) {
		var _v0 = values(alignment);
		var content = _v0.a;
		var indiv = _v0.b;
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$contentName(
					$mdgriffith$elm_ui$Internal$Style$Content(alignment)),
				content),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$selfName(
							$mdgriffith$elm_ui$Internal$Style$Self(alignment)),
						indiv)
					]))
			]);
	};
	return $mdgriffith$elm_ui$Internal$Style$Batch(
		A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
};
var $mdgriffith$elm_ui$Internal$Style$elDescription = _List_fromArray(
	[
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Descriptor,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hasBehind),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Descriptor,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.seButton),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'auto !important')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightContent),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
			])),
		$mdgriffith$elm_ui$Internal$Style$describeAlignment(
		function (alignment) {
			switch (alignment.$) {
				case 'Top':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
							]));
				case 'Bottom':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
							]));
				case 'Right':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
							]));
				case 'Left':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							]));
				case 'CenterX':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
							]));
				default:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
									]))
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
							]));
			}
		})
	]);
var $mdgriffith$elm_ui$Internal$Style$gridAlignments = function (values) {
	var createDescription = function (alignment) {
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$selfName(
							$mdgriffith$elm_ui$Internal$Style$Self(alignment)),
						values(alignment))
					]))
			]);
	};
	return $mdgriffith$elm_ui$Internal$Style$Batch(
		A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
};
var $mdgriffith$elm_ui$Internal$Style$Above = {$: 'Above'};
var $mdgriffith$elm_ui$Internal$Style$Behind = {$: 'Behind'};
var $mdgriffith$elm_ui$Internal$Style$Below = {$: 'Below'};
var $mdgriffith$elm_ui$Internal$Style$OnLeft = {$: 'OnLeft'};
var $mdgriffith$elm_ui$Internal$Style$OnRight = {$: 'OnRight'};
var $mdgriffith$elm_ui$Internal$Style$Within = {$: 'Within'};
var $mdgriffith$elm_ui$Internal$Style$locations = function () {
	var loc = $mdgriffith$elm_ui$Internal$Style$Above;
	var _v0 = function () {
		switch (loc.$) {
			case 'Above':
				return _Utils_Tuple0;
			case 'Below':
				return _Utils_Tuple0;
			case 'OnRight':
				return _Utils_Tuple0;
			case 'OnLeft':
				return _Utils_Tuple0;
			case 'Within':
				return _Utils_Tuple0;
			default:
				return _Utils_Tuple0;
		}
	}();
	return _List_fromArray(
		[$mdgriffith$elm_ui$Internal$Style$Above, $mdgriffith$elm_ui$Internal$Style$Below, $mdgriffith$elm_ui$Internal$Style$OnRight, $mdgriffith$elm_ui$Internal$Style$OnLeft, $mdgriffith$elm_ui$Internal$Style$Within, $mdgriffith$elm_ui$Internal$Style$Behind]);
}();
var $mdgriffith$elm_ui$Internal$Style$baseSheet = _List_fromArray(
	[
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		'html,body',
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		_Utils_ap(
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
			_Utils_ap(
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.imageContainer))),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ':focus',
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'outline', 'none')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.root),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'min-height', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill)),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.nearby),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.nearby),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
				$mdgriffith$elm_ui$Internal$Style$elDescription),
				$mdgriffith$elm_ui$Internal$Style$Batch(
				function (fn) {
					return A2($elm$core$List$map, fn, $mdgriffith$elm_ui$Internal$Style$locations);
				}(
					function (loc) {
						switch (loc.$) {
							case 'Above':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.above),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												])),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
												])),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'Below':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.below),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												])),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												]))
										]));
							case 'OnRight':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onRight),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'OnLeft':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onLeft),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'right', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'Within':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							default:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
						}
					}))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'resize', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'box-sizing', 'border-box'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-size', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'color', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-family', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'inherit'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.wrapped),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-wrap', 'wrap')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.noTextSelection),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-moz-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-webkit-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-ms-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'user-select', 'none')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cursorPointer),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'pointer')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cursorText),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'text')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.passPointerEvents),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none !important')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.capturePointerEvents),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto !important')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.transparent),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.opaque),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.hover, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':hover',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.hover, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':hover',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.focus, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':focus',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.focus, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':focus',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.active, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':active',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.active, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':active',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.transition),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Prop,
						'transition',
						A2(
							$elm$core$String$join,
							', ',
							A2(
								$elm$core$List$map,
								function (x) {
									return x + ' 160ms';
								},
								_List_fromArray(
									['transform', 'opacity', 'filter', 'background-color', 'color', 'font-size']))))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbars),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbarsX),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'auto'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbarsY),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'auto'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clip),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clipX),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clipY),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', 'auto')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderNone),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderDashed),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dashed')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderDotted),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dotted')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderSolid),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-block')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputText),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1.05'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'background', 'transparent')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
				$mdgriffith$elm_ui$Internal$Style$elDescription),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', '0%'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthExact),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.link),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-left', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-right', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX + ' ~ u'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight + (' ~ s.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX)),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 'Bottom':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 'Right':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_Nil);
								case 'Left':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_Nil);
								case 'CenterX':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
							}
						}),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.spaceEvenly),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', '0%'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightExact),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY + ' ~ u'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom + (' ~ s.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY)),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
											]));
								case 'Bottom':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto')
											]));
								case 'Right':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 'CenterX':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
							}
						}),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.spaceEvenly),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.grid),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', '-ms-grid'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'.gp',
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Supports,
						_Utils_Tuple2('display', 'grid'),
						_List_fromArray(
							[
								_Utils_Tuple2('display', 'grid')
							])),
						$mdgriffith$elm_ui$Internal$Style$gridAlignments(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
										]);
								case 'Bottom':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
										]);
								case 'Right':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
										]);
								case 'Left':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
										]);
								case 'CenterX':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
										]);
								default:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
										]);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.page),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any + ':first-child'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot(
							$mdgriffith$elm_ui$Internal$Style$classes.any + ($mdgriffith$elm_ui$Internal$Style$selfName(
								$mdgriffith$elm_ui$Internal$Style$Self($mdgriffith$elm_ui$Internal$Style$Left)) + (':first-child + .' + $mdgriffith$elm_ui$Internal$Style$classes.any))),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot(
							$mdgriffith$elm_ui$Internal$Style$classes.any + ($mdgriffith$elm_ui$Internal$Style$selfName(
								$mdgriffith$elm_ui$Internal$Style$Self($mdgriffith$elm_ui$Internal$Style$Right)) + (':first-child + .' + $mdgriffith$elm_ui$Internal$Style$classes.any))),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Bottom':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Right':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right'),
												A2(
												$mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left'),
												A2(
												$mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 'CenterX':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultiline),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'background-color', 'transparent')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineWrapper),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineParent),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'text'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineFiller),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'color', 'transparent')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.paragraph),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hasBehind),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.above),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.below),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onRight),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onLeft),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Internal$Style$Child,
										$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
											]))
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-flex')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-flex')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.grid),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-grid')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Bottom':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Right':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right')
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left')
											]));
								case 'CenterX':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.hidden',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'none')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textThin),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '100')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textExtraLight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '200')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textLight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '300')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textNormalWeight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '400')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textMedium),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '500')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textSemiBold),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '600')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.bold),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '700')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textExtraBold),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '800')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textHeavy),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '900')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.italic),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'italic')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.strike),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.underline),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'underline'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.underline),
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.strike)),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through underline'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textUnitalicized),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'normal')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textJustify),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textJustifyAll),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify-all')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textCenter),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'center')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textRight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'right')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textLeft),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'left')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.modal',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none')
					]))
			]))
	]);
var $mdgriffith$elm_ui$Internal$Style$fontVariant = function (_var) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + _var,
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\"'))
				])),
			A2(
			$mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + (_var + '-off'),
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\" 0'))
				]))
		]);
};
var $mdgriffith$elm_ui$Internal$Style$commonValues = $elm$core$List$concat(
	_List_fromArray(
		[
			A2(
			$elm$core$List$map,
			function (x) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.border-' + $elm$core$String$fromInt(x),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'border-width',
							$elm$core$String$fromInt(x) + 'px')
						]));
			},
			A2($elm$core$List$range, 0, 6)),
			A2(
			$elm$core$List$map,
			function (i) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.font-size-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'font-size',
							$elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2($elm$core$List$range, 8, 32)),
			A2(
			$elm$core$List$map,
			function (i) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.p-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'padding',
							$elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2($elm$core$List$range, 0, 24)),
			_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'small-caps')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp-off',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'normal')
					]))
			]),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('zero'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('onum'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('liga'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('dlig'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('ordn'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('tnum'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('afrc'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('frac')
		]));
var $mdgriffith$elm_ui$Internal$Style$explainer = '\n.explain {\n    border: 6px solid rgb(174, 121, 15) !important;\n}\n.explain > .' + ($mdgriffith$elm_ui$Internal$Style$classes.any + (' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n.ctr {\n    border: none !important;\n}\n.explain > .ctr > .' + ($mdgriffith$elm_ui$Internal$Style$classes.any + ' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n')));
var $mdgriffith$elm_ui$Internal$Style$inputTextReset = '\ninput[type="search"],\ninput[type="search"]::-webkit-search-decoration,\ninput[type="search"]::-webkit-search-cancel-button,\ninput[type="search"]::-webkit-search-results-button,\ninput[type="search"]::-webkit-search-results-decoration {\n  -webkit-appearance:none;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$sliderReset = '\ninput[type=range] {\n  -webkit-appearance: none; \n  background: transparent;\n  position:absolute;\n  left:0;\n  top:0;\n  z-index:10;\n  width: 100%;\n  outline: dashed 1px;\n  height: 100%;\n  opacity: 0;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$thumbReset = '\ninput[type=range]::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-moz-range-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-ms-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range][orient=vertical]{\n    writing-mode: bt-lr; /* IE */\n    -webkit-appearance: slider-vertical;  /* WebKit */\n}\n';
var $mdgriffith$elm_ui$Internal$Style$trackReset = '\ninput[type=range]::-moz-range-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-ms-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-webkit-slider-runnable-track {\n    background: transparent;\n    cursor: pointer;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$overrides = '@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row) + (' > ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + (' { flex-basis: auto !important; } ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row) + (' > ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container) + (' { flex-basis: auto !important; }}' + ($mdgriffith$elm_ui$Internal$Style$inputTextReset + ($mdgriffith$elm_ui$Internal$Style$sliderReset + ($mdgriffith$elm_ui$Internal$Style$trackReset + ($mdgriffith$elm_ui$Internal$Style$thumbReset + $mdgriffith$elm_ui$Internal$Style$explainer)))))))))))))));
var $elm$core$String$concat = function (strings) {
	return A2($elm$core$String$join, '', strings);
};
var $mdgriffith$elm_ui$Internal$Style$Intermediate = function (a) {
	return {$: 'Intermediate', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$emptyIntermediate = F2(
	function (selector, closing) {
		return $mdgriffith$elm_ui$Internal$Style$Intermediate(
			{closing: closing, others: _List_Nil, props: _List_Nil, selector: selector});
	});
var $mdgriffith$elm_ui$Internal$Style$renderRules = F2(
	function (_v0, rulesToRender) {
		var parent = _v0.a;
		var generateIntermediates = F2(
			function (rule, rendered) {
				switch (rule.$) {
					case 'Prop':
						var name = rule.a;
						var val = rule.b;
						return _Utils_update(
							rendered,
							{
								props: A2(
									$elm$core$List$cons,
									_Utils_Tuple2(name, val),
									rendered.props)
							});
					case 'Supports':
						var _v2 = rule.a;
						var prop = _v2.a;
						var value = _v2.b;
						var props = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Style$Intermediate(
										{closing: '\n}', others: _List_Nil, props: props, selector: '@supports (' + (prop + (':' + (value + (') {' + parent.selector))))}),
									rendered.others)
							});
					case 'Adjacent':
						var selector = rule.a;
						var adjRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (' + ' + selector), ''),
										adjRules),
									rendered.others)
							});
					case 'Child':
						var child = rule.a;
						var childRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (' > ' + child), ''),
										childRules),
									rendered.others)
							});
					case 'Descriptor':
						var descriptor = rule.a;
						var descriptorRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2(
											$mdgriffith$elm_ui$Internal$Style$emptyIntermediate,
											_Utils_ap(parent.selector, descriptor),
											''),
										descriptorRules),
									rendered.others)
							});
					default:
						var batched = rule.a;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector, ''),
										batched),
									rendered.others)
							});
				}
			});
		return $mdgriffith$elm_ui$Internal$Style$Intermediate(
			A3($elm$core$List$foldr, generateIntermediates, parent, rulesToRender));
	});
var $mdgriffith$elm_ui$Internal$Style$renderCompact = function (styleClasses) {
	var renderValues = function (values) {
		return $elm$core$String$concat(
			A2(
				$elm$core$List$map,
				function (_v3) {
					var x = _v3.a;
					var y = _v3.b;
					return x + (':' + (y + ';'));
				},
				values));
	};
	var renderClass = function (rule) {
		var _v2 = rule.props;
		if (!_v2.b) {
			return '';
		} else {
			return rule.selector + ('{' + (renderValues(rule.props) + (rule.closing + '}')));
		}
	};
	var renderIntermediate = function (_v0) {
		var rule = _v0.a;
		return _Utils_ap(
			renderClass(rule),
			$elm$core$String$concat(
				A2($elm$core$List$map, renderIntermediate, rule.others)));
	};
	return $elm$core$String$concat(
		A2(
			$elm$core$List$map,
			renderIntermediate,
			A3(
				$elm$core$List$foldr,
				F2(
					function (_v1, existing) {
						var name = _v1.a;
						var styleRules = _v1.b;
						return A2(
							$elm$core$List$cons,
							A2(
								$mdgriffith$elm_ui$Internal$Style$renderRules,
								A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, name, ''),
								styleRules),
							existing);
					}),
				_List_Nil,
				styleClasses)));
};
var $mdgriffith$elm_ui$Internal$Style$rules = _Utils_ap(
	$mdgriffith$elm_ui$Internal$Style$overrides,
	$mdgriffith$elm_ui$Internal$Style$renderCompact(
		_Utils_ap($mdgriffith$elm_ui$Internal$Style$baseSheet, $mdgriffith$elm_ui$Internal$Style$commonValues)));
var $mdgriffith$elm_ui$Internal$Model$staticRoot = function (opts) {
	var _v0 = opts.mode;
	switch (_v0.$) {
		case 'Layout':
			return A3(
				$elm$virtual_dom$VirtualDom$node,
				'div',
				_List_Nil,
				_List_fromArray(
					[
						A3(
						$elm$virtual_dom$VirtualDom$node,
						'style',
						_List_Nil,
						_List_fromArray(
							[
								$elm$virtual_dom$VirtualDom$text($mdgriffith$elm_ui$Internal$Style$rules)
							]))
					]));
		case 'NoStaticStyleSheet':
			return $elm$virtual_dom$VirtualDom$text('');
		default:
			return A3(
				$elm$virtual_dom$VirtualDom$node,
				'elm-ui-static-rules',
				_List_fromArray(
					[
						A2(
						$elm$virtual_dom$VirtualDom$property,
						'rules',
						$elm$json$Json$Encode$string($mdgriffith$elm_ui$Internal$Style$rules))
					]),
				_List_Nil);
	}
};
var $elm$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			if (!list.b) {
				return false;
			} else {
				var x = list.a;
				var xs = list.b;
				if (isOkay(x)) {
					return true;
				} else {
					var $temp$isOkay = isOkay,
						$temp$list = xs;
					isOkay = $temp$isOkay;
					list = $temp$list;
					continue any;
				}
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$fontName = function (font) {
	switch (font.$) {
		case 'Serif':
			return 'serif';
		case 'SansSerif':
			return 'sans-serif';
		case 'Monospace':
			return 'monospace';
		case 'Typeface':
			var name = font.a;
			return '\"' + (name + '\"');
		case 'ImportFont':
			var name = font.a;
			var url = font.b;
			return '\"' + (name + '\"');
		default:
			var name = font.a.name;
			return '\"' + (name + '\"');
	}
};
var $mdgriffith$elm_ui$Internal$Model$isSmallCaps = function (_var) {
	switch (_var.$) {
		case 'VariantActive':
			var name = _var.a;
			return name === 'smcp';
		case 'VariantOff':
			var name = _var.a;
			return false;
		default:
			var name = _var.a;
			var index = _var.b;
			return (name === 'smcp') && (index === 1);
	}
};
var $mdgriffith$elm_ui$Internal$Model$hasSmallCaps = function (typeface) {
	if (typeface.$ === 'FontWith') {
		var font = typeface.a;
		return A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$isSmallCaps, font.variants);
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderProps = F3(
	function (force, _v0, existing) {
		var key = _v0.a;
		var val = _v0.b;
		return force ? (existing + ('\n  ' + (key + (': ' + (val + ' !important;'))))) : (existing + ('\n  ' + (key + (': ' + (val + ';')))));
	});
var $mdgriffith$elm_ui$Internal$Model$renderStyle = F4(
	function (options, maybePseudo, selector, props) {
		if (maybePseudo.$ === 'Nothing') {
			return _List_fromArray(
				[
					selector + ('{' + (A3(
					$elm$core$List$foldl,
					$mdgriffith$elm_ui$Internal$Model$renderProps(false),
					'',
					props) + '\n}'))
				]);
		} else {
			var pseudo = maybePseudo.a;
			switch (pseudo.$) {
				case 'Hover':
					var _v2 = options.hover;
					switch (_v2.$) {
						case 'NoHover':
							return _List_Nil;
						case 'ForceHover':
							return _List_fromArray(
								[
									selector + ('-hv {' + (A3(
									$elm$core$List$foldl,
									$mdgriffith$elm_ui$Internal$Model$renderProps(true),
									'',
									props) + '\n}'))
								]);
						default:
							return _List_fromArray(
								[
									selector + ('-hv:hover {' + (A3(
									$elm$core$List$foldl,
									$mdgriffith$elm_ui$Internal$Model$renderProps(false),
									'',
									props) + '\n}'))
								]);
					}
				case 'Focus':
					var renderedProps = A3(
						$elm$core$List$foldl,
						$mdgriffith$elm_ui$Internal$Model$renderProps(false),
						'',
						props);
					return _List_fromArray(
						[selector + ('-fs:focus {' + (renderedProps + '\n}')), '.' + ($mdgriffith$elm_ui$Internal$Style$classes.any + (':focus ~ ' + (selector + ('-fs:not(.focus)  {' + (renderedProps + '\n}'))))), '.' + ($mdgriffith$elm_ui$Internal$Style$classes.any + (':focus ' + (selector + ('-fs  {' + (renderedProps + '\n}'))))), selector + ('-fs:focus-within {' + (renderedProps + '\n}')), '.focusable-parent:focus ~ ' + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + (selector + ('-fs {' + (renderedProps + '\n}'))))))]);
				default:
					return _List_fromArray(
						[
							selector + ('-act:active {' + (A3(
							$elm$core$List$foldl,
							$mdgriffith$elm_ui$Internal$Model$renderProps(false),
							'',
							props) + '\n}'))
						]);
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$renderVariant = function (_var) {
	switch (_var.$) {
		case 'VariantActive':
			var name = _var.a;
			return '\"' + (name + '\"');
		case 'VariantOff':
			var name = _var.a;
			return '\"' + (name + '\" 0');
		default:
			var name = _var.a;
			var index = _var.b;
			return '\"' + (name + ('\" ' + $elm$core$String$fromInt(index)));
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderVariants = function (typeface) {
	if (typeface.$ === 'FontWith') {
		var font = typeface.a;
		return $elm$core$Maybe$Just(
			A2(
				$elm$core$String$join,
				', ',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$renderVariant, font.variants)));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$transformValue = function (transform) {
	switch (transform.$) {
		case 'Untransformed':
			return $elm$core$Maybe$Nothing;
		case 'Moved':
			var _v1 = transform.a;
			var x = _v1.a;
			var y = _v1.b;
			var z = _v1.c;
			return $elm$core$Maybe$Just(
				'translate3d(' + ($elm$core$String$fromFloat(x) + ('px, ' + ($elm$core$String$fromFloat(y) + ('px, ' + ($elm$core$String$fromFloat(z) + 'px)'))))));
		default:
			var _v2 = transform.a;
			var tx = _v2.a;
			var ty = _v2.b;
			var tz = _v2.c;
			var _v3 = transform.b;
			var sx = _v3.a;
			var sy = _v3.b;
			var sz = _v3.c;
			var _v4 = transform.c;
			var ox = _v4.a;
			var oy = _v4.b;
			var oz = _v4.c;
			var angle = transform.d;
			var translate = 'translate3d(' + ($elm$core$String$fromFloat(tx) + ('px, ' + ($elm$core$String$fromFloat(ty) + ('px, ' + ($elm$core$String$fromFloat(tz) + 'px)')))));
			var scale = 'scale3d(' + ($elm$core$String$fromFloat(sx) + (', ' + ($elm$core$String$fromFloat(sy) + (', ' + ($elm$core$String$fromFloat(sz) + ')')))));
			var rotate = 'rotate3d(' + ($elm$core$String$fromFloat(ox) + (', ' + ($elm$core$String$fromFloat(oy) + (', ' + ($elm$core$String$fromFloat(oz) + (', ' + ($elm$core$String$fromFloat(angle) + 'rad)')))))));
			return $elm$core$Maybe$Just(translate + (' ' + (scale + (' ' + rotate))));
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderStyleRule = F3(
	function (options, rule, maybePseudo) {
		switch (rule.$) {
			case 'Style':
				var selector = rule.a;
				var props = rule.b;
				return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, selector, props);
			case 'Shadows':
				var name = rule.a;
				var prop = rule.b;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + name,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Internal$Model$Property, 'box-shadow', prop)
						]));
			case 'Transparency':
				var name = rule.a;
				var transparency = rule.b;
				var opacity = A2(
					$elm$core$Basics$max,
					0,
					A2($elm$core$Basics$min, 1, 1 - transparency));
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + name,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'opacity',
							$elm$core$String$fromFloat(opacity))
						]));
			case 'FontSize':
				var i = rule.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.font-size-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'font-size',
							$elm$core$String$fromInt(i) + 'px')
						]));
			case 'FontFamily':
				var name = rule.a;
				var typefaces = rule.b;
				var features = A2(
					$elm$core$String$join,
					', ',
					A2($elm$core$List$filterMap, $mdgriffith$elm_ui$Internal$Model$renderVariants, typefaces));
				var families = _List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Model$Property,
						'font-family',
						A2(
							$elm$core$String$join,
							', ',
							A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$fontName, typefaces))),
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'font-feature-settings', features),
						A2(
						$mdgriffith$elm_ui$Internal$Model$Property,
						'font-variant',
						A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$hasSmallCaps, typefaces) ? 'small-caps' : 'normal')
					]);
				return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, '.' + name, families);
			case 'Single':
				var _class = rule.a;
				var prop = rule.b;
				var val = rule.c;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + _class,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Internal$Model$Property, prop, val)
						]));
			case 'Colored':
				var _class = rule.a;
				var prop = rule.b;
				var color = rule.c;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + _class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							prop,
							$mdgriffith$elm_ui$Internal$Model$formatColor(color))
						]));
			case 'SpacingStyle':
				var cls = rule.a;
				var x = rule.b;
				var y = rule.c;
				var yPx = $elm$core$String$fromInt(y) + 'px';
				var xPx = $elm$core$String$fromInt(x) + 'px';
				var single = '.' + $mdgriffith$elm_ui$Internal$Style$classes.single;
				var row = '.' + $mdgriffith$elm_ui$Internal$Style$classes.row;
				var wrappedRow = '.' + ($mdgriffith$elm_ui$Internal$Style$classes.wrapped + row);
				var right = '.' + $mdgriffith$elm_ui$Internal$Style$classes.alignRight;
				var paragraph = '.' + $mdgriffith$elm_ui$Internal$Style$classes.paragraph;
				var page = '.' + $mdgriffith$elm_ui$Internal$Style$classes.page;
				var left = '.' + $mdgriffith$elm_ui$Internal$Style$classes.alignLeft;
				var halfY = $elm$core$String$fromFloat(y / 2) + 'px';
				var halfX = $elm$core$String$fromFloat(x / 2) + 'px';
				var column = '.' + $mdgriffith$elm_ui$Internal$Style$classes.column;
				var _class = '.' + cls;
				var any = '.' + $mdgriffith$elm_ui$Internal$Style$classes.any;
				return $elm$core$List$concat(
					_List_fromArray(
						[
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (row + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (wrappedRow + (' > ' + any)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin', halfY + (' ' + halfX))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (column + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + left)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + right)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_Utils_ap(_class, paragraph),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'line-height',
									'calc(1em + ' + ($elm$core$String$fromInt(y) + 'px)'))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							'textarea' + (any + _class),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'line-height',
									'calc(1em + ' + ($elm$core$String$fromInt(y) + 'px)')),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'height',
									'calc(100% + ' + ($elm$core$String$fromInt(y) + 'px)'))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + (' > ' + left)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + (' > ' + right)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + '::after'),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'margin-top',
									$elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + '::before'),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'margin-bottom',
									$elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
								]))
						]));
			case 'PaddingStyle':
				var cls = rule.a;
				var top = rule.b;
				var right = rule.c;
				var bottom = rule.d;
				var left = rule.e;
				var _class = '.' + cls;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					_class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'padding',
							$elm$core$String$fromInt(top) + ('px ' + ($elm$core$String$fromInt(right) + ('px ' + ($elm$core$String$fromInt(bottom) + ('px ' + ($elm$core$String$fromInt(left) + 'px')))))))
						]));
			case 'BorderWidth':
				var cls = rule.a;
				var top = rule.b;
				var right = rule.c;
				var bottom = rule.d;
				var left = rule.e;
				var _class = '.' + cls;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					_class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'border-width',
							$elm$core$String$fromInt(top) + ('px ' + ($elm$core$String$fromInt(right) + ('px ' + ($elm$core$String$fromInt(bottom) + ('px ' + ($elm$core$String$fromInt(left) + 'px')))))))
						]));
			case 'GridTemplateStyle':
				var template = rule.a;
				var toGridLengthHelper = F3(
					function (minimum, maximum, x) {
						toGridLengthHelper:
						while (true) {
							switch (x.$) {
								case 'Px':
									var px = x.a;
									return $elm$core$String$fromInt(px) + 'px';
								case 'Content':
									var _v2 = _Utils_Tuple2(minimum, maximum);
									if (_v2.a.$ === 'Nothing') {
										if (_v2.b.$ === 'Nothing') {
											var _v3 = _v2.a;
											var _v4 = _v2.b;
											return 'max-content';
										} else {
											var _v6 = _v2.a;
											var maxSize = _v2.b.a;
											return 'minmax(max-content, ' + ($elm$core$String$fromInt(maxSize) + 'px)');
										}
									} else {
										if (_v2.b.$ === 'Nothing') {
											var minSize = _v2.a.a;
											var _v5 = _v2.b;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + 'max-content)'));
										} else {
											var minSize = _v2.a.a;
											var maxSize = _v2.b.a;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(maxSize) + 'px)')));
										}
									}
								case 'Fill':
									var i = x.a;
									var _v7 = _Utils_Tuple2(minimum, maximum);
									if (_v7.a.$ === 'Nothing') {
										if (_v7.b.$ === 'Nothing') {
											var _v8 = _v7.a;
											var _v9 = _v7.b;
											return $elm$core$String$fromInt(i) + 'fr';
										} else {
											var _v11 = _v7.a;
											var maxSize = _v7.b.a;
											return 'minmax(max-content, ' + ($elm$core$String$fromInt(maxSize) + 'px)');
										}
									} else {
										if (_v7.b.$ === 'Nothing') {
											var minSize = _v7.a.a;
											var _v10 = _v7.b;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(i) + ('fr' + 'fr)'))));
										} else {
											var minSize = _v7.a.a;
											var maxSize = _v7.b.a;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(maxSize) + 'px)')));
										}
									}
								case 'Min':
									var m = x.a;
									var len = x.b;
									var $temp$minimum = $elm$core$Maybe$Just(m),
										$temp$maximum = maximum,
										$temp$x = len;
									minimum = $temp$minimum;
									maximum = $temp$maximum;
									x = $temp$x;
									continue toGridLengthHelper;
								default:
									var m = x.a;
									var len = x.b;
									var $temp$minimum = minimum,
										$temp$maximum = $elm$core$Maybe$Just(m),
										$temp$x = len;
									minimum = $temp$minimum;
									maximum = $temp$maximum;
									x = $temp$x;
									continue toGridLengthHelper;
							}
						}
					});
				var toGridLength = function (x) {
					return A3(toGridLengthHelper, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, x);
				};
				var xSpacing = toGridLength(template.spacing.a);
				var ySpacing = toGridLength(template.spacing.b);
				var rows = function (x) {
					return 'grid-template-rows: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, toGridLength, template.rows)));
				var msRows = function (x) {
					return '-ms-grid-rows: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						ySpacing,
						A2($elm$core$List$map, toGridLength, template.columns)));
				var msColumns = function (x) {
					return '-ms-grid-columns: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						ySpacing,
						A2($elm$core$List$map, toGridLength, template.columns)));
				var gapY = 'grid-row-gap:' + (toGridLength(template.spacing.b) + ';');
				var gapX = 'grid-column-gap:' + (toGridLength(template.spacing.a) + ';');
				var columns = function (x) {
					return 'grid-template-columns: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, toGridLength, template.columns)));
				var _class = '.grid-rows-' + (A2(
					$elm$core$String$join,
					'-',
					A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.rows)) + ('-cols-' + (A2(
					$elm$core$String$join,
					'-',
					A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.columns)) + ('-space-x-' + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.a) + ('-space-y-' + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.b)))))));
				var modernGrid = _class + ('{' + (columns + (rows + (gapX + (gapY + '}')))));
				var supports = '@supports (display:grid) {' + (modernGrid + '}');
				var base = _class + ('{' + (msColumns + (msRows + '}')));
				return _List_fromArray(
					[base, supports]);
			case 'GridPosition':
				var position = rule.a;
				var msPosition = A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						[
							'-ms-grid-row: ' + ($elm$core$String$fromInt(position.row) + ';'),
							'-ms-grid-row-span: ' + ($elm$core$String$fromInt(position.height) + ';'),
							'-ms-grid-column: ' + ($elm$core$String$fromInt(position.col) + ';'),
							'-ms-grid-column-span: ' + ($elm$core$String$fromInt(position.width) + ';')
						]));
				var modernPosition = A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						[
							'grid-row: ' + ($elm$core$String$fromInt(position.row) + (' / ' + ($elm$core$String$fromInt(position.row + position.height) + ';'))),
							'grid-column: ' + ($elm$core$String$fromInt(position.col) + (' / ' + ($elm$core$String$fromInt(position.col + position.width) + ';')))
						]));
				var _class = '.grid-pos-' + ($elm$core$String$fromInt(position.row) + ('-' + ($elm$core$String$fromInt(position.col) + ('-' + ($elm$core$String$fromInt(position.width) + ('-' + $elm$core$String$fromInt(position.height)))))));
				var modernGrid = _class + ('{' + (modernPosition + '}'));
				var supports = '@supports (display:grid) {' + (modernGrid + '}');
				var base = _class + ('{' + (msPosition + '}'));
				return _List_fromArray(
					[base, supports]);
			case 'PseudoSelector':
				var _class = rule.a;
				var styles = rule.b;
				var renderPseudoRule = function (style) {
					return A3(
						$mdgriffith$elm_ui$Internal$Model$renderStyleRule,
						options,
						style,
						$elm$core$Maybe$Just(_class));
				};
				return A2($elm$core$List$concatMap, renderPseudoRule, styles);
			default:
				var transform = rule.a;
				var val = $mdgriffith$elm_ui$Internal$Model$transformValue(transform);
				var _class = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
				var _v12 = _Utils_Tuple2(_class, val);
				if ((_v12.a.$ === 'Just') && (_v12.b.$ === 'Just')) {
					var cls = _v12.a.a;
					var v = _v12.b.a;
					return A4(
						$mdgriffith$elm_ui$Internal$Model$renderStyle,
						options,
						maybePseudo,
						'.' + cls,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Model$Property, 'transform', v)
							]));
				} else {
					return _List_Nil;
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$encodeStyles = F2(
	function (options, stylesheet) {
		return $elm$json$Json$Encode$object(
			A2(
				$elm$core$List$map,
				function (style) {
					var styled = A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing);
					return _Utils_Tuple2(
						$mdgriffith$elm_ui$Internal$Model$getStyleName(style),
						A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, styled));
				},
				stylesheet));
	});
var $mdgriffith$elm_ui$Internal$Model$bracket = F2(
	function (selector, rules) {
		var renderPair = function (_v0) {
			var name = _v0.a;
			var val = _v0.b;
			return name + (': ' + (val + ';'));
		};
		return selector + (' {' + (A2(
			$elm$core$String$join,
			'',
			A2($elm$core$List$map, renderPair, rules)) + '}'));
	});
var $mdgriffith$elm_ui$Internal$Model$fontRule = F3(
	function (name, modifier, _v0) {
		var parentAdj = _v0.a;
		var textAdjustment = _v0.b;
		return _List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + (', ' + ('.' + (name + (' .' + modifier))))))), parentAdj),
				A2($mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + ('> .' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (', .' + (name + (' .' + (modifier + (' > .' + $mdgriffith$elm_ui$Internal$Style$classes.text)))))))))), textAdjustment)
			]);
	});
var $mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule = F3(
	function (fontToAdjust, _v0, otherFontName) {
		var full = _v0.a;
		var capital = _v0.b;
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			$elm$core$String$join,
			' ',
			_Utils_ap(
				A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital, capital),
				A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.fullSize, full)));
	});
var $mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule = F2(
	function (fontToAdjust, otherFontName) {
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			$elm$core$String$join,
			' ',
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + (', ' + ('.' + (name + (' .' + $mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('line-height', '1')
						])),
					A2(
					$mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + ('> .' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (', .' + (name + (' .' + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + (' > .' + $mdgriffith$elm_ui$Internal$Style$classes.text)))))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('vertical-align', '0'),
							_Utils_Tuple2('line-height', '1')
						]))
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$adjust = F3(
	function (size, height, vertical) {
		return {height: height / size, size: size, vertical: vertical};
	});
var $elm$core$List$maximum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$max, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$List$minimum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$min, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$convertAdjustment = function (adjustment) {
	var lines = _List_fromArray(
		[adjustment.capital, adjustment.baseline, adjustment.descender, adjustment.lowercase]);
	var lineHeight = 1.5;
	var normalDescender = (lineHeight - 1) / 2;
	var oldMiddle = lineHeight / 2;
	var descender = A2(
		$elm$core$Maybe$withDefault,
		adjustment.descender,
		$elm$core$List$minimum(lines));
	var newBaseline = A2(
		$elm$core$Maybe$withDefault,
		adjustment.baseline,
		$elm$core$List$minimum(
			A2(
				$elm$core$List$filter,
				function (x) {
					return !_Utils_eq(x, descender);
				},
				lines)));
	var base = lineHeight;
	var ascender = A2(
		$elm$core$Maybe$withDefault,
		adjustment.capital,
		$elm$core$List$maximum(lines));
	var capitalSize = 1 / (ascender - newBaseline);
	var capitalVertical = 1 - ascender;
	var fullSize = 1 / (ascender - descender);
	var fullVertical = 1 - ascender;
	var newCapitalMiddle = ((ascender - newBaseline) / 2) + newBaseline;
	var newFullMiddle = ((ascender - descender) / 2) + descender;
	return {
		capital: A3($mdgriffith$elm_ui$Internal$Model$adjust, capitalSize, ascender - newBaseline, capitalVertical),
		full: A3($mdgriffith$elm_ui$Internal$Model$adjust, fullSize, ascender - descender, fullVertical)
	};
};
var $mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules = function (converted) {
	return _Utils_Tuple2(
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'block')
			]),
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'inline-block'),
				_Utils_Tuple2(
				'line-height',
				$elm$core$String$fromFloat(converted.height)),
				_Utils_Tuple2(
				'vertical-align',
				$elm$core$String$fromFloat(converted.vertical) + 'em'),
				_Utils_Tuple2(
				'font-size',
				$elm$core$String$fromFloat(converted.size) + 'em')
			]));
};
var $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment = function (typefaces) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (face, found) {
				if (found.$ === 'Nothing') {
					if (face.$ === 'FontWith') {
						var _with = face.a;
						var _v2 = _with.adjustment;
						if (_v2.$ === 'Nothing') {
							return found;
						} else {
							var adjustment = _v2.a;
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(
									$mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.full;
										}(
											$mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment))),
									$mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.capital;
										}(
											$mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment)))));
						}
					} else {
						return found;
					}
				} else {
					return found;
				}
			}),
		$elm$core$Maybe$Nothing,
		typefaces);
};
var $mdgriffith$elm_ui$Internal$Model$renderTopLevelValues = function (rules) {
	var withImport = function (font) {
		if (font.$ === 'ImportFont') {
			var url = font.b;
			return $elm$core$Maybe$Just('@import url(\'' + (url + '\');'));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	};
	var fontImports = function (_v2) {
		var name = _v2.a;
		var typefaces = _v2.b;
		var imports = A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$filterMap, withImport, typefaces));
		return imports;
	};
	var allNames = A2($elm$core$List$map, $elm$core$Tuple$first, rules);
	var fontAdjustments = function (_v1) {
		var name = _v1.a;
		var typefaces = _v1.b;
		var _v0 = $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment(typefaces);
		if (_v0.$ === 'Nothing') {
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					$mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule(name),
					allNames));
		} else {
			var adjustment = _v0.a;
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					A2($mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule, name, adjustment),
					allNames));
		}
	};
	return _Utils_ap(
		A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$map, fontImports, rules)),
		A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$map, fontAdjustments, rules)));
};
var $mdgriffith$elm_ui$Internal$Model$topLevelValue = function (rule) {
	if (rule.$ === 'FontFamily') {
		var name = rule.a;
		var typefaces = rule.b;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(name, typefaces));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$toStyleSheetString = F2(
	function (options, stylesheet) {
		var combine = F2(
			function (style, rendered) {
				return {
					rules: _Utils_ap(
						rendered.rules,
						A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing)),
					topLevel: function () {
						var _v1 = $mdgriffith$elm_ui$Internal$Model$topLevelValue(style);
						if (_v1.$ === 'Nothing') {
							return rendered.topLevel;
						} else {
							var topLevel = _v1.a;
							return A2($elm$core$List$cons, topLevel, rendered.topLevel);
						}
					}()
				};
			});
		var _v0 = A3(
			$elm$core$List$foldl,
			combine,
			{rules: _List_Nil, topLevel: _List_Nil},
			stylesheet);
		var topLevel = _v0.topLevel;
		var rules = _v0.rules;
		return _Utils_ap(
			$mdgriffith$elm_ui$Internal$Model$renderTopLevelValues(topLevel),
			$elm$core$String$concat(rules));
	});
var $mdgriffith$elm_ui$Internal$Model$toStyleSheet = F2(
	function (options, styleSheet) {
		var _v0 = options.mode;
		switch (_v0.$) {
			case 'Layout':
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'div',
					_List_Nil,
					_List_fromArray(
						[
							A3(
							$elm$virtual_dom$VirtualDom$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$virtual_dom$VirtualDom$text(
									A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
								]))
						]));
			case 'NoStaticStyleSheet':
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'div',
					_List_Nil,
					_List_fromArray(
						[
							A3(
							$elm$virtual_dom$VirtualDom$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$virtual_dom$VirtualDom$text(
									A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
								]))
						]));
			default:
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'elm-ui-rules',
					_List_fromArray(
						[
							A2(
							$elm$virtual_dom$VirtualDom$property,
							'rules',
							A2($mdgriffith$elm_ui$Internal$Model$encodeStyles, options, styleSheet))
						]),
					_List_Nil);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$embedKeyed = F4(
	function (_static, opts, styles, children) {
		var dynamicStyleSheet = A2(
			$mdgriffith$elm_ui$Internal$Model$toStyleSheet,
			opts,
			A3(
				$elm$core$List$foldl,
				$mdgriffith$elm_ui$Internal$Model$reduceStyles,
				_Utils_Tuple2(
					$elm$core$Set$empty,
					$mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.focus)),
				styles).b);
		return _static ? A2(
			$elm$core$List$cons,
			_Utils_Tuple2(
				'static-stylesheet',
				$mdgriffith$elm_ui$Internal$Model$staticRoot(opts)),
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2('dynamic-stylesheet', dynamicStyleSheet),
				children)) : A2(
			$elm$core$List$cons,
			_Utils_Tuple2('dynamic-stylesheet', dynamicStyleSheet),
			children);
	});
var $mdgriffith$elm_ui$Internal$Model$embedWith = F4(
	function (_static, opts, styles, children) {
		var dynamicStyleSheet = A2(
			$mdgriffith$elm_ui$Internal$Model$toStyleSheet,
			opts,
			A3(
				$elm$core$List$foldl,
				$mdgriffith$elm_ui$Internal$Model$reduceStyles,
				_Utils_Tuple2(
					$elm$core$Set$empty,
					$mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.focus)),
				styles).b);
		return _static ? A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Internal$Model$staticRoot(opts),
			A2($elm$core$List$cons, dynamicStyleSheet, children)) : A2($elm$core$List$cons, dynamicStyleSheet, children);
	});
var $mdgriffith$elm_ui$Internal$Flag$heightBetween = $mdgriffith$elm_ui$Internal$Flag$flag(45);
var $mdgriffith$elm_ui$Internal$Flag$heightFill = $mdgriffith$elm_ui$Internal$Flag$flag(37);
var $mdgriffith$elm_ui$Internal$Flag$present = F2(
	function (myFlag, _v0) {
		var fieldOne = _v0.a;
		var fieldTwo = _v0.b;
		if (myFlag.$ === 'Flag') {
			var first = myFlag.a;
			return _Utils_eq(first & fieldOne, first);
		} else {
			var second = myFlag.a;
			return _Utils_eq(second & fieldTwo, second);
		}
	});
var $elm$html$Html$s = _VirtualDom_node('s');
var $elm$html$Html$u = _VirtualDom_node('u');
var $mdgriffith$elm_ui$Internal$Flag$widthBetween = $mdgriffith$elm_ui$Internal$Flag$flag(44);
var $mdgriffith$elm_ui$Internal$Flag$widthFill = $mdgriffith$elm_ui$Internal$Flag$flag(39);
var $mdgriffith$elm_ui$Internal$Model$finalizeNode = F6(
	function (has, node, attributes, children, embedMode, parentContext) {
		var createNode = F2(
			function (nodeName, attrs) {
				if (children.$ === 'Keyed') {
					var keyed = children.a;
					return A3(
						$elm$virtual_dom$VirtualDom$keyedNode,
						nodeName,
						attrs,
						function () {
							switch (embedMode.$) {
								case 'NoStyleSheet':
									return keyed;
								case 'OnlyDynamic':
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, false, opts, styles, keyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, true, opts, styles, keyed);
							}
						}());
				} else {
					var unkeyed = children.a;
					return A2(
						function () {
							switch (nodeName) {
								case 'div':
									return $elm$html$Html$div;
								case 'p':
									return $elm$html$Html$p;
								default:
									return $elm$virtual_dom$VirtualDom$node(nodeName);
							}
						}(),
						attrs,
						function () {
							switch (embedMode.$) {
								case 'NoStyleSheet':
									return unkeyed;
								case 'OnlyDynamic':
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedWith, false, opts, styles, unkeyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedWith, true, opts, styles, unkeyed);
							}
						}());
				}
			});
		var html = function () {
			switch (node.$) {
				case 'Generic':
					return A2(createNode, 'div', attributes);
				case 'NodeName':
					var nodeName = node.a;
					return A2(createNode, nodeName, attributes);
				default:
					var nodeName = node.a;
					var internal = node.b;
					return A3(
						$elm$virtual_dom$VirtualDom$node,
						nodeName,
						attributes,
						_List_fromArray(
							[
								A2(
								createNode,
								internal,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.single))
									]))
							]));
			}
		}();
		switch (parentContext.$) {
			case 'AsRow':
				return (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthFill, has) && (!A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthBetween, has))) ? html : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignRight, has) ? A2(
					$elm$html$Html$u,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight])))
						]),
					_List_fromArray(
						[html])) : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerX, has) ? A2(
					$elm$html$Html$s,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX])))
						]),
					_List_fromArray(
						[html])) : html));
			case 'AsColumn':
				return (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightFill, has) && (!A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightBetween, has))) ? html : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerY, has) ? A2(
					$elm$html$Html$s,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY])))
						]),
					_List_fromArray(
						[html])) : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignBottom, has) ? A2(
					$elm$html$Html$u,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom])))
						]),
					_List_fromArray(
						[html])) : html));
			default:
				return html;
		}
	});
var $mdgriffith$elm_ui$Internal$Model$textElementClasses = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.widthContent + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.heightContent)))));
var $mdgriffith$elm_ui$Internal$Model$textElement = function (str) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementClasses)
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$textElementFillClasses = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.widthFill + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.heightFill)))));
var $mdgriffith$elm_ui$Internal$Model$textElementFill = function (str) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementFillClasses)
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$createElement = F3(
	function (context, children, rendered) {
		var gatherKeyed = F2(
			function (_v8, _v9) {
				var key = _v8.a;
				var child = _v8.b;
				var htmls = _v9.a;
				var existingStyles = _v9.b;
				switch (child.$) {
					case 'Unstyled':
						var html = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles);
					case 'Styled':
						var styled = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles)) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles));
					case 'Text':
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									_Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str)),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		var gather = F2(
			function (child, _v6) {
				var htmls = _v6.a;
				var existingStyles = _v6.b;
				switch (child.$) {
					case 'Unstyled':
						var html = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								html(context),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								html(context),
								htmls),
							existingStyles);
					case 'Styled':
						var styled = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles)) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles));
					case 'Text':
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		if (children.$ === 'Keyed') {
			var keyedChildren = children.a;
			var _v1 = A3(
				$elm$core$List$foldr,
				gatherKeyed,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				keyedChildren);
			var keyed = _v1.a;
			var styles = _v1.b;
			var newStyles = $elm$core$List$isEmpty(styles) ? rendered.styles : _Utils_ap(rendered.styles, styles);
			if (!newStyles.b) {
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						$mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.has,
						rendered.node,
						rendered.attributes,
						$mdgriffith$elm_ui$Internal$Model$Keyed(
							A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.children)),
						$mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						html: A4(
							$mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.has,
							rendered.node,
							rendered.attributes,
							$mdgriffith$elm_ui$Internal$Model$Keyed(
								A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.children))),
						styles: allStyles
					});
			}
		} else {
			var unkeyedChildren = children.a;
			var _v3 = A3(
				$elm$core$List$foldr,
				gather,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				unkeyedChildren);
			var unkeyed = _v3.a;
			var styles = _v3.b;
			var newStyles = $elm$core$List$isEmpty(styles) ? rendered.styles : _Utils_ap(rendered.styles, styles);
			if (!newStyles.b) {
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						$mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.has,
						rendered.node,
						rendered.attributes,
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.children)),
						$mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						html: A4(
							$mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.has,
							rendered.node,
							rendered.attributes,
							$mdgriffith$elm_ui$Internal$Model$Unkeyed(
								A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.children))),
						styles: allStyles
					});
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Single = F3(
	function (a, b, c) {
		return {$: 'Single', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$Transform = function (a) {
	return {$: 'Transform', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $elm$core$Bitwise$or = _Bitwise_or;
var $mdgriffith$elm_ui$Internal$Flag$add = F2(
	function (myFlag, _v0) {
		var one = _v0.a;
		var two = _v0.b;
		if (myFlag.$ === 'Flag') {
			var first = myFlag.a;
			return A2($mdgriffith$elm_ui$Internal$Flag$Field, first | one, two);
		} else {
			var second = myFlag.a;
			return A2($mdgriffith$elm_ui$Internal$Flag$Field, one, second | two);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$ChildrenBehind = function (a) {
	return {$: 'ChildrenBehind', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront = F2(
	function (a, b) {
		return {$: 'ChildrenBehindAndInFront', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$ChildrenInFront = function (a) {
	return {$: 'ChildrenInFront', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$nearbyElement = F2(
	function (location, elem) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class(
					function () {
						switch (location.$) {
							case 'Above':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.above]));
							case 'Below':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.below]));
							case 'OnRight':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.onRight]));
							case 'OnLeft':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.onLeft]));
							case 'InFront':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.inFront]));
							default:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.behind]));
						}
					}())
				]),
			_List_fromArray(
				[
					function () {
					switch (elem.$) {
						case 'Empty':
							return $elm$virtual_dom$VirtualDom$text('');
						case 'Text':
							var str = elem.a;
							return $mdgriffith$elm_ui$Internal$Model$textElement(str);
						case 'Unstyled':
							var html = elem.a;
							return html($mdgriffith$elm_ui$Internal$Model$asEl);
						default:
							var styled = elem.a;
							return A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, $mdgriffith$elm_ui$Internal$Model$asEl);
					}
				}()
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$addNearbyElement = F3(
	function (location, elem, existing) {
		var nearby = A2($mdgriffith$elm_ui$Internal$Model$nearbyElement, location, elem);
		switch (existing.$) {
			case 'NoNearbyChildren':
				if (location.$ === 'Behind') {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						_List_fromArray(
							[nearby]));
				} else {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						_List_fromArray(
							[nearby]));
				}
			case 'ChildrenBehind':
				var existingBehind = existing.a;
				if (location.$ === 'Behind') {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						A2($elm$core$List$cons, nearby, existingBehind));
				} else {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						_List_fromArray(
							[nearby]));
				}
			case 'ChildrenInFront':
				var existingInFront = existing.a;
				if (location.$ === 'Behind') {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						_List_fromArray(
							[nearby]),
						existingInFront);
				} else {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						A2($elm$core$List$cons, nearby, existingInFront));
				}
			default:
				var existingBehind = existing.a;
				var existingInFront = existing.b;
				if (location.$ === 'Behind') {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						A2($elm$core$List$cons, nearby, existingBehind),
						existingInFront);
				} else {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						A2($elm$core$List$cons, nearby, existingInFront));
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Embedded = F2(
	function (a, b) {
		return {$: 'Embedded', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$addNodeName = F2(
	function (newNode, old) {
		switch (old.$) {
			case 'Generic':
				return $mdgriffith$elm_ui$Internal$Model$NodeName(newNode);
			case 'NodeName':
				var name = old.a;
				return A2($mdgriffith$elm_ui$Internal$Model$Embedded, name, newNode);
			default:
				var x = old.a;
				var y = old.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Embedded, x, y);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$alignXName = function (align) {
	switch (align.$) {
		case 'Left':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignLeft);
		case 'Right':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignRight);
		default:
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignCenterX);
	}
};
var $mdgriffith$elm_ui$Internal$Model$alignYName = function (align) {
	switch (align.$) {
		case 'Top':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignTop);
		case 'Bottom':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignBottom);
		default:
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignCenterY);
	}
};
var $mdgriffith$elm_ui$Internal$Model$FullTransform = F4(
	function (a, b, c, d) {
		return {$: 'FullTransform', a: a, b: b, c: c, d: d};
	});
var $mdgriffith$elm_ui$Internal$Model$Moved = function (a) {
	return {$: 'Moved', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$composeTransformation = F2(
	function (transform, component) {
		switch (transform.$) {
			case 'Untransformed':
				switch (component.$) {
					case 'MoveX':
						var x = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, 0, 0));
					case 'MoveY':
						var y = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, y, 0));
					case 'MoveZ':
						var z = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, 0, z));
					case 'MoveXYZ':
						var xyz = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 'Rotate':
						var xyz = component.a;
						var angle = component.b;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var xyz = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							xyz,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			case 'Moved':
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				switch (component.$) {
					case 'MoveX':
						var newX = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(newX, y, z));
					case 'MoveY':
						var newY = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, newY, z));
					case 'MoveZ':
						var newZ = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, y, newZ));
					case 'MoveXYZ':
						var xyz = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 'Rotate':
						var xyz = component.a;
						var angle = component.b;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var scale = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							scale,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			default:
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				var scaled = transform.b;
				var origin = transform.c;
				var angle = transform.d;
				switch (component.$) {
					case 'MoveX':
						var newX = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(newX, y, z),
							scaled,
							origin,
							angle);
					case 'MoveY':
						var newY = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, newY, z),
							scaled,
							origin,
							angle);
					case 'MoveZ':
						var newZ = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, y, newZ),
							scaled,
							origin,
							angle);
					case 'MoveXYZ':
						var newMove = component.a;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, newMove, scaled, origin, angle);
					case 'Rotate':
						var newOrigin = component.a;
						var newAngle = component.b;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, scaled, newOrigin, newAngle);
					default:
						var newScale = component.a;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, newScale, origin, angle);
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$height = $mdgriffith$elm_ui$Internal$Flag$flag(7);
var $mdgriffith$elm_ui$Internal$Flag$heightContent = $mdgriffith$elm_ui$Internal$Flag$flag(36);
var $mdgriffith$elm_ui$Internal$Flag$merge = F2(
	function (_v0, _v1) {
		var one = _v0.a;
		var two = _v0.b;
		var three = _v1.a;
		var four = _v1.b;
		return A2($mdgriffith$elm_ui$Internal$Flag$Field, one | three, two | four);
	});
var $mdgriffith$elm_ui$Internal$Flag$none = A2($mdgriffith$elm_ui$Internal$Flag$Field, 0, 0);
var $mdgriffith$elm_ui$Internal$Model$renderHeight = function (h) {
	switch (h.$) {
		case 'Px':
			var px = h.a;
			var val = $elm$core$String$fromInt(px);
			var name = 'height-px-' + val;
			return _Utils_Tuple3(
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Style$classes.heightExact + (' ' + name),
				_List_fromArray(
					[
						A3($mdgriffith$elm_ui$Internal$Model$Single, name, 'height', val + 'px')
					]));
		case 'Content':
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightContent, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.heightContent,
				_List_Nil);
		case 'Fill':
			var portion = h.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.heightFill,
				_List_Nil) : _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion + (' height-fill-' + $elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.column + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
							'height-fill-' + $elm$core$String$fromInt(portion))))),
						'flex-grow',
						$elm$core$String$fromInt(portion * 100000))
					]));
		case 'Min':
			var minSize = h.a;
			var len = h.b;
			var cls = 'min-height-' + $elm$core$String$fromInt(minSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-height',
				$elm$core$String$fromInt(minSize) + 'px');
			var _v1 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _v1.a;
			var newAttrs = _v1.b;
			var newStyle = _v1.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
		default:
			var maxSize = h.a;
			var len = h.b;
			var cls = 'max-height-' + $elm$core$String$fromInt(maxSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-height',
				$elm$core$String$fromInt(maxSize) + 'px');
			var _v2 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _v2.a;
			var newAttrs = _v2.b;
			var newStyle = _v2.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$widthContent = $mdgriffith$elm_ui$Internal$Flag$flag(38);
var $mdgriffith$elm_ui$Internal$Model$renderWidth = function (w) {
	switch (w.$) {
		case 'Px':
			var px = w.a;
			return _Utils_Tuple3(
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Style$classes.widthExact + (' width-px-' + $elm$core$String$fromInt(px)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						'width-px-' + $elm$core$String$fromInt(px),
						'width',
						$elm$core$String$fromInt(px) + 'px')
					]));
		case 'Content':
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthContent, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.widthContent,
				_List_Nil);
		case 'Fill':
			var portion = w.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.widthFill,
				_List_Nil) : _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion + (' width-fill-' + $elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.row + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
							'width-fill-' + $elm$core$String$fromInt(portion))))),
						'flex-grow',
						$elm$core$String$fromInt(portion * 100000))
					]));
		case 'Min':
			var minSize = w.a;
			var len = w.b;
			var cls = 'min-width-' + $elm$core$String$fromInt(minSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-width',
				$elm$core$String$fromInt(minSize) + 'px');
			var _v1 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _v1.a;
			var newAttrs = _v1.b;
			var newStyle = _v1.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
		default:
			var maxSize = w.a;
			var len = w.b;
			var cls = 'max-width-' + $elm$core$String$fromInt(maxSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-width',
				$elm$core$String$fromInt(maxSize) + 'px');
			var _v2 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _v2.a;
			var newAttrs = _v2.b;
			var newStyle = _v2.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$borderWidth = $mdgriffith$elm_ui$Internal$Flag$flag(27);
var $mdgriffith$elm_ui$Internal$Model$skippable = F2(
	function (flag, style) {
		if (_Utils_eq(flag, $mdgriffith$elm_ui$Internal$Flag$borderWidth)) {
			if (style.$ === 'Single') {
				var val = style.c;
				switch (val) {
					case '0px':
						return true;
					case '1px':
						return true;
					case '2px':
						return true;
					case '3px':
						return true;
					case '4px':
						return true;
					case '5px':
						return true;
					case '6px':
						return true;
					default:
						return false;
				}
			} else {
				return false;
			}
		} else {
			switch (style.$) {
				case 'FontSize':
					var i = style.a;
					return (i >= 8) && (i <= 32);
				case 'PaddingStyle':
					var name = style.a;
					var t = style.b;
					var r = style.c;
					var b = style.d;
					var l = style.e;
					return _Utils_eq(t, b) && (_Utils_eq(t, r) && (_Utils_eq(t, l) && ((t >= 0) && (t <= 24))));
				default:
					return false;
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$width = $mdgriffith$elm_ui$Internal$Flag$flag(6);
var $mdgriffith$elm_ui$Internal$Flag$xAlign = $mdgriffith$elm_ui$Internal$Flag$flag(30);
var $mdgriffith$elm_ui$Internal$Flag$yAlign = $mdgriffith$elm_ui$Internal$Flag$flag(29);
var $mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive = F8(
	function (classes, node, has, transform, styles, attrs, children, elementAttrs) {
		gatherAttrRecursive:
		while (true) {
			if (!elementAttrs.b) {
				var _v1 = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
				if (_v1.$ === 'Nothing') {
					return {
						attributes: A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$class(classes),
							attrs),
						children: children,
						has: has,
						node: node,
						styles: styles
					};
				} else {
					var _class = _v1.a;
					return {
						attributes: A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$class(classes + (' ' + _class)),
							attrs),
						children: children,
						has: has,
						node: node,
						styles: A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$Transform(transform),
							styles)
					};
				}
			} else {
				var attribute = elementAttrs.a;
				var remaining = elementAttrs.b;
				switch (attribute.$) {
					case 'NoAttribute':
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'Class':
						var flag = attribute.a;
						var exactClassName = attribute.b;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = exactClassName + (' ' + classes),
								$temp$node = node,
								$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					case 'Attr':
						var actualAttribute = attribute.a;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = A2($elm$core$List$cons, actualAttribute, attrs),
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'StyleClass':
						var flag = attribute.a;
						var style = attribute.b;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							if (A2($mdgriffith$elm_ui$Internal$Model$skippable, flag, style)) {
								var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							} else {
								var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = A2($elm$core$List$cons, style, styles),
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							}
						}
					case 'TransformComponent':
						var flag = attribute.a;
						var component = attribute.b;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
							$temp$transform = A2($mdgriffith$elm_ui$Internal$Model$composeTransformation, transform, component),
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'Width':
						var width = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$width, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (width.$) {
								case 'Px':
									var px = width.a;
									var $temp$classes = ($mdgriffith$elm_ui$Internal$Style$classes.widthExact + (' width-px-' + $elm$core$String$fromInt(px))) + (' ' + classes),
										$temp$node = node,
										$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has),
										$temp$transform = transform,
										$temp$styles = A2(
										$elm$core$List$cons,
										A3(
											$mdgriffith$elm_ui$Internal$Model$Single,
											'width-px-' + $elm$core$String$fromInt(px),
											'width',
											$elm$core$String$fromInt(px) + 'px'),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Content':
									var $temp$classes = classes + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.widthContent),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$add,
										$mdgriffith$elm_ui$Internal$Flag$widthContent,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Fill':
									var portion = width.a;
									if (portion === 1) {
										var $temp$classes = classes + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.widthFill),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion + (' width-fill-' + $elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											$elm$core$List$cons,
											A3(
												$mdgriffith$elm_ui$Internal$Model$Single,
												$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.row + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
													'width-fill-' + $elm$core$String$fromInt(portion))))),
												'flex-grow',
												$elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _v4 = $mdgriffith$elm_ui$Internal$Model$renderWidth(width);
									var addToFlags = _v4.a;
									var newClass = _v4.b;
									var newStyles = _v4.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$merge,
										addToFlags,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 'Height':
						var height = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$height, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (height.$) {
								case 'Px':
									var px = height.a;
									var val = $elm$core$String$fromInt(px) + 'px';
									var name = 'height-px-' + val;
									var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightExact + (' ' + (name + (' ' + classes))),
										$temp$node = node,
										$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has),
										$temp$transform = transform,
										$temp$styles = A2(
										$elm$core$List$cons,
										A3($mdgriffith$elm_ui$Internal$Model$Single, name, 'height ', val),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Content':
									var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightContent + (' ' + classes),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$add,
										$mdgriffith$elm_ui$Internal$Flag$heightContent,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Fill':
									var portion = height.a;
									if (portion === 1) {
										var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightFill + (' ' + classes),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion + (' height-fill-' + $elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											$elm$core$List$cons,
											A3(
												$mdgriffith$elm_ui$Internal$Model$Single,
												$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.column + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
													'height-fill-' + $elm$core$String$fromInt(portion))))),
												'flex-grow',
												$elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _v6 = $mdgriffith$elm_ui$Internal$Model$renderHeight(height);
									var addToFlags = _v6.a;
									var newClass = _v6.b;
									var newStyles = _v6.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$merge,
										addToFlags,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 'Describe':
						var description = attribute.a;
						switch (description.$) {
							case 'Main':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'main', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Navigation':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'nav', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'ContentInfo':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'footer', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Complementary':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'aside', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Heading':
								var i = description.a;
								if (i <= 1) {
									var $temp$classes = classes,
										$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'h1', node),
										$temp$has = has,
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								} else {
									if (i < 7) {
										var $temp$classes = classes,
											$temp$node = A2(
											$mdgriffith$elm_ui$Internal$Model$addNodeName,
											'h' + $elm$core$String$fromInt(i),
											node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes,
											$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'h6', node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								}
							case 'Paragraph':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Button':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'role', 'button'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Label':
								var label = description.a;
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-label', label),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'LivePolite':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'polite'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							default:
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'assertive'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
						}
					case 'Nearby':
						var location = attribute.a;
						var elem = attribute.b;
						var newStyles = function () {
							switch (elem.$) {
								case 'Empty':
									return styles;
								case 'Text':
									var str = elem.a;
									return styles;
								case 'Unstyled':
									var html = elem.a;
									return styles;
								default:
									var styled = elem.a;
									return _Utils_ap(styles, styled.styles);
							}
						}();
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = newStyles,
							$temp$attrs = attrs,
							$temp$children = A3($mdgriffith$elm_ui$Internal$Model$addNearbyElement, location, elem, children),
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'AlignX':
						var x = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignXName(x) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (x.$) {
									case 'CenterX':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerX, flags);
									case 'Right':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignRight, flags);
									default:
										return flags;
								}
							}(
								A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					default:
						var y = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignYName(y) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (y.$) {
									case 'CenterY':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerY, flags);
									case 'Bottom':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignBottom, flags);
									default:
										return flags;
								}
							}(
								A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
				}
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Untransformed = {$: 'Untransformed'};
var $mdgriffith$elm_ui$Internal$Model$untransformed = $mdgriffith$elm_ui$Internal$Model$Untransformed;
var $mdgriffith$elm_ui$Internal$Model$element = F4(
	function (context, node, attributes, children) {
		return A3(
			$mdgriffith$elm_ui$Internal$Model$createElement,
			context,
			children,
			A8(
				$mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive,
				$mdgriffith$elm_ui$Internal$Model$contextClasses(context),
				node,
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Model$untransformed,
				_List_Nil,
				_List_Nil,
				$mdgriffith$elm_ui$Internal$Model$NoNearbyChildren,
				$elm$core$List$reverse(attributes)));
	});
var $mdgriffith$elm_ui$Internal$Model$htmlClass = function (cls) {
	return $mdgriffith$elm_ui$Internal$Model$Attr(
		$elm$html$Html$Attributes$class(cls));
};
var $elm$html$Html$Attributes$src = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'src',
		_VirtualDom_noJavaScriptOrHtmlUri(url));
};
var $mdgriffith$elm_ui$Element$image = F2(
	function (attrs, _v0) {
		var src = _v0.src;
		var description = _v0.description;
		var imageAttributes = A2(
			$elm$core$List$filter,
			function (a) {
				switch (a.$) {
					case 'Width':
						return true;
					case 'Height':
						return true;
					default:
						return false;
				}
			},
			attrs);
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.imageContainer),
				attrs),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[
						A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asEl,
						$mdgriffith$elm_ui$Internal$Model$NodeName('img'),
						_Utils_ap(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Internal$Model$Attr(
									$elm$html$Html$Attributes$src(src)),
									$mdgriffith$elm_ui$Internal$Model$Attr(
									$elm$html$Html$Attributes$alt(description))
								]),
							imageAttributes),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_Nil))
					])));
	});
var $author$project$Icons$iconNamed = F2(
	function (name, attrs) {
		return A2(
			$mdgriffith$elm_ui$Element$image,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$alpha(0.54),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$htmlAttribute(
						A2($elm$html$Html$Attributes$style, 'pointer-events', 'none')),
					attrs)),
			{description: '', src: name});
	});
var $author$project$Icons$fuel = $author$project$Icons$iconNamed('images/fuel.svg');
var $author$project$Pages$Buses$BusPage$FuelHistory = function (a) {
	return {$: 'FuelHistory', a: a};
};
var $author$project$Pages$Buses$BusPage$GotFuelHistoryMsg = function (a) {
	return {$: 'GotFuelHistoryMsg', a: a};
};
var $author$project$Pages$Buses$FuelHistoryPage$Model = function (currentPage) {
	return {currentPage: currentPage};
};
var $author$project$Pages$Buses$FuelHistoryPage$Summary = {$: 'Summary'};
var $author$project$Pages$Buses$FuelHistoryPage$init = F2(
	function (bus, timezone) {
		return _Utils_Tuple2(
			$author$project$Pages$Buses$FuelHistoryPage$Model($author$project$Pages$Buses$FuelHistoryPage$Summary),
			$elm$core$Platform$Cmd$none);
	});
var $author$project$Session$timeZone = function (session) {
	if (session.$ === 'LoggedIn') {
		var timezone = session.b;
		return timezone;
	} else {
		var timezone = session.b;
		return timezone;
	}
};
var $author$project$Pages$Buses$BusPage$fuelPage = F2(
	function (bus, session) {
		return A3(
			$author$project$Page$transformToModelMsg,
			$author$project$Pages$Buses$BusPage$FuelHistory,
			$author$project$Pages$Buses$BusPage$GotFuelHistoryMsg,
			A2(
				$author$project$Pages$Buses$FuelHistoryPage$init,
				bus,
				$author$project$Session$timeZone(session)));
	});
var $author$project$Icons$hardware = $author$project$Icons$iconNamed('images/hardware.svg');
var $elm$core$List$head = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(x);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Icons$info = $author$project$Icons$iconNamed('images/info.svg');
var $author$project$Pages$Buses$BusPage$pageName = function (page) {
	switch (page.$) {
		case 'About':
			return 'Summary';
		case 'RouteHistory':
			return 'Trips';
		case 'FuelHistory':
			return 'Fuel Log';
		case 'BusDevice':
			return 'Device';
		default:
			return 'Maintenance';
	}
};
var $elm$core$Tuple$pair = F2(
	function (a, b) {
		return _Utils_Tuple2(a, b);
	});
var $author$project$Icons$repairs = $author$project$Icons$iconNamed('images/repairs.svg');
var $author$project$Pages$Buses$BusPage$BusRepairs = function (a) {
	return {$: 'BusRepairs', a: a};
};
var $author$project$Pages$Buses$BusPage$GotBusRepairsMsg = function (a) {
	return {$: 'GotBusRepairsMsg', a: a};
};
var $author$project$Pages$Buses$BusRepairsPage$Summary = {$: 'Summary'};
var $ryannhg$date_format$DateFormat$DayOfMonthSuffix = {$: 'DayOfMonthSuffix'};
var $ryannhg$date_format$DateFormat$dayOfMonthSuffix = $ryannhg$date_format$DateFormat$DayOfMonthSuffix;
var $ryannhg$date_format$DateFormat$DayOfWeekNameAbbreviated = {$: 'DayOfWeekNameAbbreviated'};
var $ryannhg$date_format$DateFormat$dayOfWeekNameAbbreviated = $ryannhg$date_format$DateFormat$DayOfWeekNameAbbreviated;
var $ryannhg$date_format$DateFormat$Language$Language = F6(
	function (toMonthName, toMonthAbbreviation, toWeekdayName, toWeekdayAbbreviation, toAmPm, toOrdinalSuffix) {
		return {toAmPm: toAmPm, toMonthAbbreviation: toMonthAbbreviation, toMonthName: toMonthName, toOrdinalSuffix: toOrdinalSuffix, toWeekdayAbbreviation: toWeekdayAbbreviation, toWeekdayName: toWeekdayName};
	});
var $ryannhg$date_format$DateFormat$Language$toEnglishAmPm = function (hour) {
	return (hour > 11) ? 'pm' : 'am';
};
var $ryannhg$date_format$DateFormat$Language$toEnglishMonthName = function (month) {
	switch (month.$) {
		case 'Jan':
			return 'January';
		case 'Feb':
			return 'February';
		case 'Mar':
			return 'March';
		case 'Apr':
			return 'April';
		case 'May':
			return 'May';
		case 'Jun':
			return 'June';
		case 'Jul':
			return 'July';
		case 'Aug':
			return 'August';
		case 'Sep':
			return 'September';
		case 'Oct':
			return 'October';
		case 'Nov':
			return 'November';
		default:
			return 'December';
	}
};
var $elm$core$Basics$modBy = _Basics_modBy;
var $ryannhg$date_format$DateFormat$Language$toEnglishSuffix = function (num) {
	var _v0 = A2($elm$core$Basics$modBy, 100, num);
	switch (_v0) {
		case 11:
			return 'th';
		case 12:
			return 'th';
		case 13:
			return 'th';
		default:
			var _v1 = A2($elm$core$Basics$modBy, 10, num);
			switch (_v1) {
				case 1:
					return 'st';
				case 2:
					return 'nd';
				case 3:
					return 'rd';
				default:
					return 'th';
			}
	}
};
var $ryannhg$date_format$DateFormat$Language$toEnglishWeekdayName = function (weekday) {
	switch (weekday.$) {
		case 'Mon':
			return 'Monday';
		case 'Tue':
			return 'Tuesday';
		case 'Wed':
			return 'Wednesday';
		case 'Thu':
			return 'Thursday';
		case 'Fri':
			return 'Friday';
		case 'Sat':
			return 'Saturday';
		default:
			return 'Sunday';
	}
};
var $ryannhg$date_format$DateFormat$Language$english = A6(
	$ryannhg$date_format$DateFormat$Language$Language,
	$ryannhg$date_format$DateFormat$Language$toEnglishMonthName,
	A2(
		$elm$core$Basics$composeR,
		$ryannhg$date_format$DateFormat$Language$toEnglishMonthName,
		$elm$core$String$left(3)),
	$ryannhg$date_format$DateFormat$Language$toEnglishWeekdayName,
	A2(
		$elm$core$Basics$composeR,
		$ryannhg$date_format$DateFormat$Language$toEnglishWeekdayName,
		$elm$core$String$left(3)),
	$ryannhg$date_format$DateFormat$Language$toEnglishAmPm,
	$ryannhg$date_format$DateFormat$Language$toEnglishSuffix);
var $elm$time$Time$flooredDiv = F2(
	function (numerator, denominator) {
		return $elm$core$Basics$floor(numerator / denominator);
	});
var $elm$time$Time$posixToMillis = function (_v0) {
	var millis = _v0.a;
	return millis;
};
var $elm$time$Time$toAdjustedMinutesHelp = F3(
	function (defaultOffset, posixMinutes, eras) {
		toAdjustedMinutesHelp:
		while (true) {
			if (!eras.b) {
				return posixMinutes + defaultOffset;
			} else {
				var era = eras.a;
				var olderEras = eras.b;
				if (_Utils_cmp(era.start, posixMinutes) < 0) {
					return posixMinutes + era.offset;
				} else {
					var $temp$defaultOffset = defaultOffset,
						$temp$posixMinutes = posixMinutes,
						$temp$eras = olderEras;
					defaultOffset = $temp$defaultOffset;
					posixMinutes = $temp$posixMinutes;
					eras = $temp$eras;
					continue toAdjustedMinutesHelp;
				}
			}
		}
	});
var $elm$time$Time$toAdjustedMinutes = F2(
	function (_v0, time) {
		var defaultOffset = _v0.a;
		var eras = _v0.b;
		return A3(
			$elm$time$Time$toAdjustedMinutesHelp,
			defaultOffset,
			A2(
				$elm$time$Time$flooredDiv,
				$elm$time$Time$posixToMillis(time),
				60000),
			eras);
	});
var $elm$time$Time$toHour = F2(
	function (zone, time) {
		return A2(
			$elm$core$Basics$modBy,
			24,
			A2(
				$elm$time$Time$flooredDiv,
				A2($elm$time$Time$toAdjustedMinutes, zone, time),
				60));
	});
var $ryannhg$date_format$DateFormat$amPm = F3(
	function (language, zone, posix) {
		return language.toAmPm(
			A2($elm$time$Time$toHour, zone, posix));
	});
var $elm$time$Time$toCivil = function (minutes) {
	var rawDay = A2($elm$time$Time$flooredDiv, minutes, 60 * 24) + 719468;
	var era = (((rawDay >= 0) ? rawDay : (rawDay - 146096)) / 146097) | 0;
	var dayOfEra = rawDay - (era * 146097);
	var yearOfEra = ((((dayOfEra - ((dayOfEra / 1460) | 0)) + ((dayOfEra / 36524) | 0)) - ((dayOfEra / 146096) | 0)) / 365) | 0;
	var dayOfYear = dayOfEra - (((365 * yearOfEra) + ((yearOfEra / 4) | 0)) - ((yearOfEra / 100) | 0));
	var mp = (((5 * dayOfYear) + 2) / 153) | 0;
	var month = mp + ((mp < 10) ? 3 : (-9));
	var year = yearOfEra + (era * 400);
	return {
		day: (dayOfYear - ((((153 * mp) + 2) / 5) | 0)) + 1,
		month: month,
		year: year + ((month <= 2) ? 1 : 0)
	};
};
var $elm$time$Time$toDay = F2(
	function (zone, time) {
		return $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).day;
	});
var $ryannhg$date_format$DateFormat$dayOfMonth = $elm$time$Time$toDay;
var $elm$time$Time$Sun = {$: 'Sun'};
var $elm$time$Time$Fri = {$: 'Fri'};
var $elm$time$Time$Mon = {$: 'Mon'};
var $elm$time$Time$Sat = {$: 'Sat'};
var $elm$time$Time$Thu = {$: 'Thu'};
var $elm$time$Time$Tue = {$: 'Tue'};
var $elm$time$Time$Wed = {$: 'Wed'};
var $ryannhg$date_format$DateFormat$days = _List_fromArray(
	[$elm$time$Time$Sun, $elm$time$Time$Mon, $elm$time$Time$Tue, $elm$time$Time$Wed, $elm$time$Time$Thu, $elm$time$Time$Fri, $elm$time$Time$Sat]);
var $elm$time$Time$toWeekday = F2(
	function (zone, time) {
		var _v0 = A2(
			$elm$core$Basics$modBy,
			7,
			A2(
				$elm$time$Time$flooredDiv,
				A2($elm$time$Time$toAdjustedMinutes, zone, time),
				60 * 24));
		switch (_v0) {
			case 0:
				return $elm$time$Time$Thu;
			case 1:
				return $elm$time$Time$Fri;
			case 2:
				return $elm$time$Time$Sat;
			case 3:
				return $elm$time$Time$Sun;
			case 4:
				return $elm$time$Time$Mon;
			case 5:
				return $elm$time$Time$Tue;
			default:
				return $elm$time$Time$Wed;
		}
	});
var $ryannhg$date_format$DateFormat$dayOfWeek = F2(
	function (zone, posix) {
		return function (_v1) {
			var i = _v1.a;
			return i;
		}(
			A2(
				$elm$core$Maybe$withDefault,
				_Utils_Tuple2(0, $elm$time$Time$Sun),
				$elm$core$List$head(
					A2(
						$elm$core$List$filter,
						function (_v0) {
							var day = _v0.b;
							return _Utils_eq(
								day,
								A2($elm$time$Time$toWeekday, zone, posix));
						},
						A2(
							$elm$core$List$indexedMap,
							F2(
								function (i, day) {
									return _Utils_Tuple2(i, day);
								}),
							$ryannhg$date_format$DateFormat$days)))));
	});
var $ryannhg$date_format$DateFormat$isLeapYear = function (year_) {
	return (!(!A2($elm$core$Basics$modBy, 4, year_))) ? false : ((!(!A2($elm$core$Basics$modBy, 100, year_))) ? true : ((!(!A2($elm$core$Basics$modBy, 400, year_))) ? false : true));
};
var $ryannhg$date_format$DateFormat$daysInMonth = F2(
	function (year_, month) {
		switch (month.$) {
			case 'Jan':
				return 31;
			case 'Feb':
				return $ryannhg$date_format$DateFormat$isLeapYear(year_) ? 29 : 28;
			case 'Mar':
				return 31;
			case 'Apr':
				return 30;
			case 'May':
				return 31;
			case 'Jun':
				return 30;
			case 'Jul':
				return 31;
			case 'Aug':
				return 31;
			case 'Sep':
				return 30;
			case 'Oct':
				return 31;
			case 'Nov':
				return 30;
			default:
				return 31;
		}
	});
var $elm$time$Time$Jan = {$: 'Jan'};
var $elm$time$Time$Apr = {$: 'Apr'};
var $elm$time$Time$Aug = {$: 'Aug'};
var $elm$time$Time$Dec = {$: 'Dec'};
var $elm$time$Time$Feb = {$: 'Feb'};
var $elm$time$Time$Jul = {$: 'Jul'};
var $elm$time$Time$Jun = {$: 'Jun'};
var $elm$time$Time$Mar = {$: 'Mar'};
var $elm$time$Time$May = {$: 'May'};
var $elm$time$Time$Nov = {$: 'Nov'};
var $elm$time$Time$Oct = {$: 'Oct'};
var $elm$time$Time$Sep = {$: 'Sep'};
var $ryannhg$date_format$DateFormat$months = _List_fromArray(
	[$elm$time$Time$Jan, $elm$time$Time$Feb, $elm$time$Time$Mar, $elm$time$Time$Apr, $elm$time$Time$May, $elm$time$Time$Jun, $elm$time$Time$Jul, $elm$time$Time$Aug, $elm$time$Time$Sep, $elm$time$Time$Oct, $elm$time$Time$Nov, $elm$time$Time$Dec]);
var $elm$time$Time$toMonth = F2(
	function (zone, time) {
		var _v0 = $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).month;
		switch (_v0) {
			case 1:
				return $elm$time$Time$Jan;
			case 2:
				return $elm$time$Time$Feb;
			case 3:
				return $elm$time$Time$Mar;
			case 4:
				return $elm$time$Time$Apr;
			case 5:
				return $elm$time$Time$May;
			case 6:
				return $elm$time$Time$Jun;
			case 7:
				return $elm$time$Time$Jul;
			case 8:
				return $elm$time$Time$Aug;
			case 9:
				return $elm$time$Time$Sep;
			case 10:
				return $elm$time$Time$Oct;
			case 11:
				return $elm$time$Time$Nov;
			default:
				return $elm$time$Time$Dec;
		}
	});
var $ryannhg$date_format$DateFormat$monthPair = F2(
	function (zone, posix) {
		return A2(
			$elm$core$Maybe$withDefault,
			_Utils_Tuple2(0, $elm$time$Time$Jan),
			$elm$core$List$head(
				A2(
					$elm$core$List$filter,
					function (_v0) {
						var i = _v0.a;
						var m = _v0.b;
						return _Utils_eq(
							m,
							A2($elm$time$Time$toMonth, zone, posix));
					},
					A2(
						$elm$core$List$indexedMap,
						F2(
							function (a, b) {
								return _Utils_Tuple2(a, b);
							}),
						$ryannhg$date_format$DateFormat$months))));
	});
var $ryannhg$date_format$DateFormat$monthNumber_ = F2(
	function (zone, posix) {
		return 1 + function (_v0) {
			var i = _v0.a;
			var m = _v0.b;
			return i;
		}(
			A2($ryannhg$date_format$DateFormat$monthPair, zone, posix));
	});
var $elm$core$List$sum = function (numbers) {
	return A3($elm$core$List$foldl, $elm$core$Basics$add, 0, numbers);
};
var $elm$core$List$takeReverse = F3(
	function (n, list, kept) {
		takeReverse:
		while (true) {
			if (n <= 0) {
				return kept;
			} else {
				if (!list.b) {
					return kept;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs,
						$temp$kept = A2($elm$core$List$cons, x, kept);
					n = $temp$n;
					list = $temp$list;
					kept = $temp$kept;
					continue takeReverse;
				}
			}
		}
	});
var $elm$core$List$takeTailRec = F2(
	function (n, list) {
		return $elm$core$List$reverse(
			A3($elm$core$List$takeReverse, n, list, _List_Nil));
	});
var $elm$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (n <= 0) {
			return _List_Nil;
		} else {
			var _v0 = _Utils_Tuple2(n, list);
			_v0$1:
			while (true) {
				_v0$5:
				while (true) {
					if (!_v0.b.b) {
						return list;
					} else {
						if (_v0.b.b.b) {
							switch (_v0.a) {
								case 1:
									break _v0$1;
								case 2:
									var _v2 = _v0.b;
									var x = _v2.a;
									var _v3 = _v2.b;
									var y = _v3.a;
									return _List_fromArray(
										[x, y]);
								case 3:
									if (_v0.b.b.b.b) {
										var _v4 = _v0.b;
										var x = _v4.a;
										var _v5 = _v4.b;
										var y = _v5.a;
										var _v6 = _v5.b;
										var z = _v6.a;
										return _List_fromArray(
											[x, y, z]);
									} else {
										break _v0$5;
									}
								default:
									if (_v0.b.b.b.b && _v0.b.b.b.b.b) {
										var _v7 = _v0.b;
										var x = _v7.a;
										var _v8 = _v7.b;
										var y = _v8.a;
										var _v9 = _v8.b;
										var z = _v9.a;
										var _v10 = _v9.b;
										var w = _v10.a;
										var tl = _v10.b;
										return (ctr > 1000) ? A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A2($elm$core$List$takeTailRec, n - 4, tl))))) : A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A3($elm$core$List$takeFast, ctr + 1, n - 4, tl)))));
									} else {
										break _v0$5;
									}
							}
						} else {
							if (_v0.a === 1) {
								break _v0$1;
							} else {
								break _v0$5;
							}
						}
					}
				}
				return list;
			}
			var _v1 = _v0.b;
			var x = _v1.a;
			return _List_fromArray(
				[x]);
		}
	});
var $elm$core$List$take = F2(
	function (n, list) {
		return A3($elm$core$List$takeFast, 0, n, list);
	});
var $elm$time$Time$toYear = F2(
	function (zone, time) {
		return $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).year;
	});
var $ryannhg$date_format$DateFormat$dayOfYear = F2(
	function (zone, posix) {
		var monthsBeforeThisOne = A2(
			$elm$core$List$take,
			A2($ryannhg$date_format$DateFormat$monthNumber_, zone, posix) - 1,
			$ryannhg$date_format$DateFormat$months);
		var daysBeforeThisMonth = $elm$core$List$sum(
			A2(
				$elm$core$List$map,
				$ryannhg$date_format$DateFormat$daysInMonth(
					A2($elm$time$Time$toYear, zone, posix)),
				monthsBeforeThisOne));
		return daysBeforeThisMonth + A2($ryannhg$date_format$DateFormat$dayOfMonth, zone, posix);
	});
var $ryannhg$date_format$DateFormat$quarter = F2(
	function (zone, posix) {
		return (A2($ryannhg$date_format$DateFormat$monthNumber_, zone, posix) / 4) | 0;
	});
var $ryannhg$date_format$DateFormat$toFixedLength = F2(
	function (totalChars, num) {
		var numStr = $elm$core$String$fromInt(num);
		var numZerosNeeded = totalChars - $elm$core$String$length(numStr);
		var zeros = A2(
			$elm$core$String$join,
			'',
			A2(
				$elm$core$List$map,
				function (_v0) {
					return '0';
				},
				A2($elm$core$List$range, 1, numZerosNeeded)));
		return _Utils_ap(zeros, numStr);
	});
var $elm$core$String$toLower = _String_toLower;
var $elm$time$Time$toMillis = F2(
	function (_v0, time) {
		return A2(
			$elm$core$Basics$modBy,
			1000,
			$elm$time$Time$posixToMillis(time));
	});
var $elm$time$Time$toMinute = F2(
	function (zone, time) {
		return A2(
			$elm$core$Basics$modBy,
			60,
			A2($elm$time$Time$toAdjustedMinutes, zone, time));
	});
var $ryannhg$date_format$DateFormat$toNonMilitary = function (num) {
	return (!num) ? 12 : ((num <= 12) ? num : (num - 12));
};
var $elm$time$Time$toSecond = F2(
	function (_v0, time) {
		return A2(
			$elm$core$Basics$modBy,
			60,
			A2(
				$elm$time$Time$flooredDiv,
				$elm$time$Time$posixToMillis(time),
				1000));
	});
var $elm$core$String$toUpper = _String_toUpper;
var $elm$time$Time$Posix = function (a) {
	return {$: 'Posix', a: a};
};
var $elm$time$Time$millisToPosix = $elm$time$Time$Posix;
var $ryannhg$date_format$DateFormat$millisecondsPerYear = $elm$core$Basics$round((((1000 * 60) * 60) * 24) * 365.25);
var $ryannhg$date_format$DateFormat$firstDayOfYear = F2(
	function (zone, time) {
		return $elm$time$Time$millisToPosix(
			$ryannhg$date_format$DateFormat$millisecondsPerYear * A2($elm$time$Time$toYear, zone, time));
	});
var $ryannhg$date_format$DateFormat$weekOfYear = F2(
	function (zone, posix) {
		var firstDay = A2($ryannhg$date_format$DateFormat$firstDayOfYear, zone, posix);
		var firstDayOffset = A2($ryannhg$date_format$DateFormat$dayOfWeek, zone, firstDay);
		var daysSoFar = A2($ryannhg$date_format$DateFormat$dayOfYear, zone, posix);
		return (((daysSoFar + firstDayOffset) / 7) | 0) + 1;
	});
var $ryannhg$date_format$DateFormat$year = F2(
	function (zone, time) {
		return $elm$core$String$fromInt(
			A2($elm$time$Time$toYear, zone, time));
	});
var $ryannhg$date_format$DateFormat$piece = F4(
	function (language, zone, posix, token) {
		switch (token.$) {
			case 'MonthNumber':
				return $elm$core$String$fromInt(
					A2($ryannhg$date_format$DateFormat$monthNumber_, zone, posix));
			case 'MonthSuffix':
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.toOrdinalSuffix(num));
				}(
					A2($ryannhg$date_format$DateFormat$monthNumber_, zone, posix));
			case 'MonthFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					A2($ryannhg$date_format$DateFormat$monthNumber_, zone, posix));
			case 'MonthNameAbbreviated':
				return language.toMonthAbbreviation(
					A2($elm$time$Time$toMonth, zone, posix));
			case 'MonthNameFull':
				return language.toMonthName(
					A2($elm$time$Time$toMonth, zone, posix));
			case 'QuarterNumber':
				return $elm$core$String$fromInt(
					1 + A2($ryannhg$date_format$DateFormat$quarter, zone, posix));
			case 'QuarterSuffix':
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.toOrdinalSuffix(num));
				}(
					1 + A2($ryannhg$date_format$DateFormat$quarter, zone, posix));
			case 'DayOfMonthNumber':
				return $elm$core$String$fromInt(
					A2($ryannhg$date_format$DateFormat$dayOfMonth, zone, posix));
			case 'DayOfMonthSuffix':
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.toOrdinalSuffix(num));
				}(
					A2($ryannhg$date_format$DateFormat$dayOfMonth, zone, posix));
			case 'DayOfMonthFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					A2($ryannhg$date_format$DateFormat$dayOfMonth, zone, posix));
			case 'DayOfYearNumber':
				return $elm$core$String$fromInt(
					A2($ryannhg$date_format$DateFormat$dayOfYear, zone, posix));
			case 'DayOfYearSuffix':
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.toOrdinalSuffix(num));
				}(
					A2($ryannhg$date_format$DateFormat$dayOfYear, zone, posix));
			case 'DayOfYearFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					3,
					A2($ryannhg$date_format$DateFormat$dayOfYear, zone, posix));
			case 'DayOfWeekNumber':
				return $elm$core$String$fromInt(
					A2($ryannhg$date_format$DateFormat$dayOfWeek, zone, posix));
			case 'DayOfWeekSuffix':
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.toOrdinalSuffix(num));
				}(
					A2($ryannhg$date_format$DateFormat$dayOfWeek, zone, posix));
			case 'DayOfWeekNameAbbreviated':
				return language.toWeekdayAbbreviation(
					A2($elm$time$Time$toWeekday, zone, posix));
			case 'DayOfWeekNameFull':
				return language.toWeekdayName(
					A2($elm$time$Time$toWeekday, zone, posix));
			case 'WeekOfYearNumber':
				return $elm$core$String$fromInt(
					A2($ryannhg$date_format$DateFormat$weekOfYear, zone, posix));
			case 'WeekOfYearSuffix':
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.toOrdinalSuffix(num));
				}(
					A2($ryannhg$date_format$DateFormat$weekOfYear, zone, posix));
			case 'WeekOfYearFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					A2($ryannhg$date_format$DateFormat$weekOfYear, zone, posix));
			case 'YearNumberLastTwo':
				return A2(
					$elm$core$String$right,
					2,
					A2($ryannhg$date_format$DateFormat$year, zone, posix));
			case 'YearNumber':
				return A2($ryannhg$date_format$DateFormat$year, zone, posix);
			case 'AmPmUppercase':
				return $elm$core$String$toUpper(
					A3($ryannhg$date_format$DateFormat$amPm, language, zone, posix));
			case 'AmPmLowercase':
				return $elm$core$String$toLower(
					A3($ryannhg$date_format$DateFormat$amPm, language, zone, posix));
			case 'HourMilitaryNumber':
				return $elm$core$String$fromInt(
					A2($elm$time$Time$toHour, zone, posix));
			case 'HourMilitaryFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					A2($elm$time$Time$toHour, zone, posix));
			case 'HourNumber':
				return $elm$core$String$fromInt(
					$ryannhg$date_format$DateFormat$toNonMilitary(
						A2($elm$time$Time$toHour, zone, posix)));
			case 'HourFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					$ryannhg$date_format$DateFormat$toNonMilitary(
						A2($elm$time$Time$toHour, zone, posix)));
			case 'HourMilitaryFromOneNumber':
				return $elm$core$String$fromInt(
					1 + A2($elm$time$Time$toHour, zone, posix));
			case 'HourMilitaryFromOneFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					1 + A2($elm$time$Time$toHour, zone, posix));
			case 'MinuteNumber':
				return $elm$core$String$fromInt(
					A2($elm$time$Time$toMinute, zone, posix));
			case 'MinuteFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					A2($elm$time$Time$toMinute, zone, posix));
			case 'SecondNumber':
				return $elm$core$String$fromInt(
					A2($elm$time$Time$toSecond, zone, posix));
			case 'SecondFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					A2($elm$time$Time$toSecond, zone, posix));
			case 'MillisecondNumber':
				return $elm$core$String$fromInt(
					A2($elm$time$Time$toMillis, zone, posix));
			case 'MillisecondFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					3,
					A2($elm$time$Time$toMillis, zone, posix));
			default:
				var string = token.a;
				return string;
		}
	});
var $ryannhg$date_format$DateFormat$formatWithLanguage = F4(
	function (language, tokens, zone, time) {
		return A2(
			$elm$core$String$join,
			'',
			A2(
				$elm$core$List$map,
				A3($ryannhg$date_format$DateFormat$piece, language, zone, time),
				tokens));
	});
var $ryannhg$date_format$DateFormat$format = $ryannhg$date_format$DateFormat$formatWithLanguage($ryannhg$date_format$DateFormat$Language$english);
var $ryannhg$date_format$DateFormat$MonthNameAbbreviated = {$: 'MonthNameAbbreviated'};
var $ryannhg$date_format$DateFormat$monthNameAbbreviated = $ryannhg$date_format$DateFormat$MonthNameAbbreviated;
var $ryannhg$date_format$DateFormat$Text = function (a) {
	return {$: 'Text', a: a};
};
var $ryannhg$date_format$DateFormat$text = $ryannhg$date_format$DateFormat$Text;
var $ryannhg$date_format$DateFormat$YearNumber = {$: 'YearNumber'};
var $ryannhg$date_format$DateFormat$yearNumber = $ryannhg$date_format$DateFormat$YearNumber;
var $author$project$Utils$DateFormatter$dateFormatter = $ryannhg$date_format$DateFormat$format(
	_List_fromArray(
		[
			$ryannhg$date_format$DateFormat$dayOfWeekNameAbbreviated,
			$ryannhg$date_format$DateFormat$text(', '),
			$ryannhg$date_format$DateFormat$dayOfMonthSuffix,
			$ryannhg$date_format$DateFormat$text(' '),
			$ryannhg$date_format$DateFormat$monthNameAbbreviated,
			$ryannhg$date_format$DateFormat$text(' '),
			$ryannhg$date_format$DateFormat$yearNumber
		]));
var $elm$core$List$sortBy = _List_sortBy;
var $elm$core$List$tail = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(xs);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Utils$GroupByDate$group = F3(
	function (list, timezone, getTime) {
		var listWithDays = A2(
			$elm$core$List$map,
			function (t) {
				return _Utils_Tuple2(
					A2(
						$author$project$Utils$DateFormatter$dateFormatter,
						timezone,
						getTime(t)),
					t);
			},
			list);
		var orderedList = A2(
			$elm$core$List$sortBy,
			function (t) {
				return $elm$time$Time$posixToMillis(
					getTime(t.b));
			},
			listWithDays);
		var groupListByMonth = F2(
			function (grouped, ungrouped) {
				groupListByMonth:
				while (true) {
					var remainingList = A2(
						$elm$core$Maybe$withDefault,
						_List_Nil,
						$elm$core$List$tail(ungrouped));
					var _v0 = _Utils_Tuple2(
						$elm$core$List$head(grouped),
						$elm$core$List$head(ungrouped));
					if (_v0.b.$ === 'Nothing') {
						var _v1 = _v0.b;
						return grouped;
					} else {
						if (_v0.a.$ === 'Nothing') {
							var _v2 = _v0.a;
							var _v3 = _v0.b.a;
							var month = _v3.a;
							var listItem = _v3.b;
							var newGrouped = _List_fromArray(
								[
									_Utils_Tuple2(
									month,
									_List_fromArray(
										[listItem]))
								]);
							var $temp$grouped = newGrouped,
								$temp$ungrouped = remainingList;
							grouped = $temp$grouped;
							ungrouped = $temp$ungrouped;
							continue groupListByMonth;
						} else {
							var _v4 = _v0.a.a;
							var groupMonth = _v4.a;
							var groupedList = _v4.b;
							var _v5 = _v0.b.a;
							var month = _v5.a;
							var listItem = _v5.b;
							if (_Utils_eq(groupMonth, month)) {
								var newGrouped = function () {
									var _v6 = $elm$core$List$tail(grouped);
									if (_v6.$ === 'Just') {
										var tailOfGrouped = _v6.a;
										return A2(
											$elm$core$List$cons,
											_Utils_Tuple2(
												month,
												A2($elm$core$List$cons, listItem, groupedList)),
											tailOfGrouped);
									} else {
										return _List_fromArray(
											[
												_Utils_Tuple2(
												month,
												A2($elm$core$List$cons, listItem, groupedList))
											]);
									}
								}();
								var $temp$grouped = newGrouped,
									$temp$ungrouped = remainingList;
								grouped = $temp$grouped;
								ungrouped = $temp$ungrouped;
								continue groupListByMonth;
							} else {
								var newGrouped = A2(
									$elm$core$List$cons,
									_Utils_Tuple2(
										month,
										_List_fromArray(
											[listItem])),
									grouped);
								var $temp$grouped = newGrouped,
									$temp$ungrouped = remainingList;
								grouped = $temp$grouped;
								ungrouped = $temp$ungrouped;
								continue groupListByMonth;
							}
						}
					}
				}
			});
		return A2(groupListByMonth, _List_Nil, orderedList);
	});
var $author$project$Pages$Buses$BusRepairsPage$groupRepairs = F2(
	function (trips, timezone) {
		return A3(
			$author$project$Utils$GroupByDate$group,
			trips,
			timezone,
			function ($) {
				return $.dateTime;
			});
	});
var $author$project$Pages$Buses$BusRepairsPage$init = F3(
	function (busID, repairs, timezone) {
		return _Utils_Tuple2(
			{
				busID: busID,
				currentPage: $author$project$Pages$Buses$BusRepairsPage$Summary,
				groupedRepairs: A2($author$project$Pages$Buses$BusRepairsPage$groupRepairs, repairs, timezone),
				highlightedRepair: $elm$core$Maybe$Nothing,
				repairs: repairs,
				timezone: timezone
			},
			$elm$core$Platform$Cmd$none);
	});
var $author$project$Pages$Buses$BusPage$repairsPage = F2(
	function (bus, session) {
		return A3(
			$author$project$Page$transformToModelMsg,
			$author$project$Pages$Buses$BusPage$BusRepairs,
			$author$project$Pages$Buses$BusPage$GotBusRepairsMsg,
			A3(
				$author$project$Pages$Buses$BusRepairsPage$init,
				bus.id,
				bus.repairs,
				$author$project$Session$timeZone(session)));
	});
var $elm$core$String$replace = F3(
	function (before, after, string) {
		return A2(
			$elm$core$String$join,
			after,
			A2($elm$core$String$split, before, string));
	});
var $author$project$Pages$Buses$BusPage$GotRouteHistoryMsg = function (a) {
	return {$: 'GotRouteHistoryMsg', a: a};
};
var $author$project$Pages$Buses$BusPage$RouteHistory = function (a) {
	return {$: 'RouteHistory', a: a};
};
var $author$project$Pages$Buses$TripsHistoryPage$TripsResponse = function (a) {
	return {$: 'TripsResponse', a: a};
};
var $author$project$Session$getCredentials = function (session) {
	if (session.$ === 'LoggedIn') {
		var credentials = session.c;
		return $elm$core$Maybe$Just(credentials);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$http$Http$Internal$Header = F2(
	function (a, b) {
		return {$: 'Header', a: a, b: b};
	});
var $elm$http$Http$header = $elm$http$Http$Internal$Header;
var $author$project$Session$authHeader = function (session) {
	var _v0 = $author$project$Session$getCredentials(session);
	if (_v0.$ === 'Nothing') {
		return _List_Nil;
	} else {
		var token = _v0.a.token;
		return _List_fromArray(
			[
				A2($elm$http$Http$header, 'authorization', 'Bearer ' + token)
			]);
	}
};
var $elm$http$Http$Internal$EmptyBody = {$: 'EmptyBody'};
var $elm$http$Http$emptyBody = $elm$http$Http$Internal$EmptyBody;
var $elm$http$Http$BadPayload = F2(
	function (a, b) {
		return {$: 'BadPayload', a: a, b: b};
	});
var $elm$http$Http$BadStatus = function (a) {
	return {$: 'BadStatus', a: a};
};
var $elm$http$Http$BadUrl = function (a) {
	return {$: 'BadUrl', a: a};
};
var $elm$http$Http$Internal$FormDataBody = function (a) {
	return {$: 'FormDataBody', a: a};
};
var $elm$http$Http$NetworkError = {$: 'NetworkError'};
var $elm$http$Http$Timeout = {$: 'Timeout'};
var $elm$core$Maybe$isJust = function (maybe) {
	if (maybe.$ === 'Just') {
		return true;
	} else {
		return false;
	}
};
var $elm$http$Http$Internal$isStringBody = function (body) {
	if (body.$ === 'StringBody') {
		return true;
	} else {
		return false;
	}
};
var $elm$core$Result$map = F2(
	function (func, ra) {
		if (ra.$ === 'Ok') {
			var a = ra.a;
			return $elm$core$Result$Ok(
				func(a));
		} else {
			var e = ra.a;
			return $elm$core$Result$Err(e);
		}
	});
var $elm$http$Http$expectStringResponse = _Http_expectStringResponse;
var $elm$http$Http$expectJson = function (decoder) {
	return $elm$http$Http$expectStringResponse(
		function (response) {
			var _v0 = A2($elm$json$Json$Decode$decodeString, decoder, response.body);
			if (_v0.$ === 'Err') {
				var decodeError = _v0.a;
				return $elm$core$Result$Err(
					$elm$json$Json$Decode$errorToString(decodeError));
			} else {
				var value = _v0.a;
				return $elm$core$Result$Ok(value);
			}
		});
};
var $elm$http$Http$Internal$Request = function (a) {
	return {$: 'Request', a: a};
};
var $elm$http$Http$request = $elm$http$Http$Internal$Request;
var $krisajenkins$remotedata$RemoteData$Failure = function (a) {
	return {$: 'Failure', a: a};
};
var $krisajenkins$remotedata$RemoteData$Success = function (a) {
	return {$: 'Success', a: a};
};
var $krisajenkins$remotedata$RemoteData$fromResult = function (result) {
	if (result.$ === 'Err') {
		var e = result.a;
		return $krisajenkins$remotedata$RemoteData$Failure(e);
	} else {
		var x = result.a;
		return $krisajenkins$remotedata$RemoteData$Success(x);
	}
};
var $elm$core$Task$onError = _Scheduler_onError;
var $elm$core$Task$attempt = F2(
	function (resultToMessage, task) {
		return $elm$core$Task$command(
			$elm$core$Task$Perform(
				A2(
					$elm$core$Task$onError,
					A2(
						$elm$core$Basics$composeL,
						A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
						$elm$core$Result$Err),
					A2(
						$elm$core$Task$andThen,
						A2(
							$elm$core$Basics$composeL,
							A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
							$elm$core$Result$Ok),
						task))));
	});
var $elm$http$Http$toTask = function (_v0) {
	var request_ = _v0.a;
	return A2(_Http_toTask, request_, $elm$core$Maybe$Nothing);
};
var $elm$http$Http$send = F2(
	function (resultToMessage, request_) {
		return A2(
			$elm$core$Task$attempt,
			resultToMessage,
			$elm$http$Http$toTask(request_));
	});
var $krisajenkins$remotedata$RemoteData$sendRequest = $elm$http$Http$send($krisajenkins$remotedata$RemoteData$fromResult);
var $author$project$Api$Endpoint$unwrap = function (_v0) {
	var str = _v0.a;
	return str;
};
var $author$project$Api$Endpoint$get = F3(
	function (endpoint, session, decoder) {
		return $krisajenkins$remotedata$RemoteData$sendRequest(
			$elm$http$Http$request(
				{
					body: $elm$http$Http$emptyBody,
					expect: $elm$http$Http$expectJson(decoder),
					headers: $author$project$Session$authHeader(session),
					method: 'GET',
					timeout: $elm$core$Maybe$Nothing,
					url: $author$project$Api$Endpoint$unwrap(endpoint),
					withCredentials: false
				}));
	});
var $author$project$Api$get = F3(
	function (session, url, decoder) {
		return A3($author$project$Api$Endpoint$get, url, session, decoder);
	});
var $author$project$Models$Trip$StudentActivity = F5(
	function (location, time, activity, student, studentName) {
		return {activity: activity, location: location, student: student, studentName: studentName, time: time};
	});
var $elm$json$Json$Decode$fail = _Json_fail;
var $author$project$Models$Location$Location = F2(
	function (lng, lat) {
		return {lat: lat, lng: lng};
	});
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom = $elm$json$Json$Decode$map2($elm$core$Basics$apR);
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required = F3(
	function (key, valDecoder, decoder) {
		return A2(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom,
			A2($elm$json$Json$Decode$field, key, valDecoder),
			decoder);
	});
var $author$project$Models$Location$locationDecoder = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'lat',
	$elm$json$Json$Decode$float,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'lng',
		$elm$json$Json$Decode$float,
		$elm$json$Json$Decode$succeed($author$project$Models$Location$Location)));
var $elm$json$Json$Decode$andThen = _Json_andThen;
var $elm$json$Json$Decode$null = _Json_decodeNull;
var $elm$json$Json$Decode$oneOf = _Json_oneOf;
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optionalDecoder = F3(
	function (pathDecoder, valDecoder, fallback) {
		var nullOr = function (decoder) {
			return $elm$json$Json$Decode$oneOf(
				_List_fromArray(
					[
						decoder,
						$elm$json$Json$Decode$null(fallback)
					]));
		};
		var handleResult = function (input) {
			var _v0 = A2($elm$json$Json$Decode$decodeValue, pathDecoder, input);
			if (_v0.$ === 'Ok') {
				var rawValue = _v0.a;
				var _v1 = A2(
					$elm$json$Json$Decode$decodeValue,
					nullOr(valDecoder),
					rawValue);
				if (_v1.$ === 'Ok') {
					var finalResult = _v1.a;
					return $elm$json$Json$Decode$succeed(finalResult);
				} else {
					var finalErr = _v1.a;
					return $elm$json$Json$Decode$fail(
						$elm$json$Json$Decode$errorToString(finalErr));
				}
			} else {
				return $elm$json$Json$Decode$succeed(fallback);
			}
		};
		return A2($elm$json$Json$Decode$andThen, handleResult, $elm$json$Json$Decode$value);
	});
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional = F4(
	function (key, valDecoder, fallback, decoder) {
		return A2(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optionalDecoder,
				A2($elm$json$Json$Decode$field, key, $elm$json$Json$Decode$value),
				valDecoder,
				fallback),
			decoder);
	});
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$resolve = $elm$json$Json$Decode$andThen($elm$core$Basics$identity);
var $elm$parser$Parser$Advanced$Bad = F2(
	function (a, b) {
		return {$: 'Bad', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$Good = F3(
	function (a, b, c) {
		return {$: 'Good', a: a, b: b, c: c};
	});
var $elm$parser$Parser$Advanced$Parser = function (a) {
	return {$: 'Parser', a: a};
};
var $elm$parser$Parser$Advanced$andThen = F2(
	function (callback, _v0) {
		var parseA = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parseA(s0);
				if (_v1.$ === 'Bad') {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p1 = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					var _v2 = callback(a);
					var parseB = _v2.a;
					var _v3 = parseB(s1);
					if (_v3.$ === 'Bad') {
						var p2 = _v3.a;
						var x = _v3.b;
						return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
					} else {
						var p2 = _v3.a;
						var b = _v3.b;
						var s2 = _v3.c;
						return A3($elm$parser$Parser$Advanced$Good, p1 || p2, b, s2);
					}
				}
			});
	});
var $elm$parser$Parser$andThen = $elm$parser$Parser$Advanced$andThen;
var $elm$parser$Parser$ExpectingEnd = {$: 'ExpectingEnd'};
var $elm$parser$Parser$Advanced$AddRight = F2(
	function (a, b) {
		return {$: 'AddRight', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$DeadEnd = F4(
	function (row, col, problem, contextStack) {
		return {col: col, contextStack: contextStack, problem: problem, row: row};
	});
var $elm$parser$Parser$Advanced$Empty = {$: 'Empty'};
var $elm$parser$Parser$Advanced$fromState = F2(
	function (s, x) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, s.row, s.col, x, s.context));
	});
var $elm$parser$Parser$Advanced$end = function (x) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return _Utils_eq(
				$elm$core$String$length(s.src),
				s.offset) ? A3($elm$parser$Parser$Advanced$Good, false, _Utils_Tuple0, s) : A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, x));
		});
};
var $elm$parser$Parser$end = $elm$parser$Parser$Advanced$end($elm$parser$Parser$ExpectingEnd);
var $elm$parser$Parser$Advanced$isSubChar = _Parser_isSubChar;
var $elm$parser$Parser$Advanced$chompWhileHelp = F5(
	function (isGood, offset, row, col, s0) {
		chompWhileHelp:
		while (true) {
			var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, offset, s0.src);
			if (_Utils_eq(newOffset, -1)) {
				return A3(
					$elm$parser$Parser$Advanced$Good,
					_Utils_cmp(s0.offset, offset) < 0,
					_Utils_Tuple0,
					{col: col, context: s0.context, indent: s0.indent, offset: offset, row: row, src: s0.src});
			} else {
				if (_Utils_eq(newOffset, -2)) {
					var $temp$isGood = isGood,
						$temp$offset = offset + 1,
						$temp$row = row + 1,
						$temp$col = 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				} else {
					var $temp$isGood = isGood,
						$temp$offset = newOffset,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$chompWhile = function (isGood) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A5($elm$parser$Parser$Advanced$chompWhileHelp, isGood, s.offset, s.row, s.col, s);
		});
};
var $elm$parser$Parser$chompWhile = $elm$parser$Parser$Advanced$chompWhile;
var $elm$parser$Parser$Advanced$mapChompedString = F2(
	function (func, _v0) {
		var parse = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parse(s0);
				if (_v1.$ === 'Bad') {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p,
						A2(
							func,
							A3($elm$core$String$slice, s0.offset, s1.offset, s0.src),
							a),
						s1);
				}
			});
	});
var $elm$parser$Parser$Advanced$getChompedString = function (parser) {
	return A2($elm$parser$Parser$Advanced$mapChompedString, $elm$core$Basics$always, parser);
};
var $elm$parser$Parser$getChompedString = $elm$parser$Parser$Advanced$getChompedString;
var $elm$parser$Parser$Problem = function (a) {
	return {$: 'Problem', a: a};
};
var $elm$parser$Parser$Advanced$problem = function (x) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, x));
		});
};
var $elm$parser$Parser$problem = function (msg) {
	return $elm$parser$Parser$Advanced$problem(
		$elm$parser$Parser$Problem(msg));
};
var $elm$parser$Parser$Advanced$succeed = function (a) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A3($elm$parser$Parser$Advanced$Good, false, a, s);
		});
};
var $elm$parser$Parser$succeed = $elm$parser$Parser$Advanced$succeed;
var $elm$core$String$toFloat = _String_toFloat;
var $rtfeldman$elm_iso8601_date_strings$Iso8601$fractionsOfASecondInMs = A2(
	$elm$parser$Parser$andThen,
	function (str) {
		if ($elm$core$String$length(str) <= 9) {
			var _v0 = $elm$core$String$toFloat('0.' + str);
			if (_v0.$ === 'Just') {
				var floatVal = _v0.a;
				return $elm$parser$Parser$succeed(
					$elm$core$Basics$round(floatVal * 1000));
			} else {
				return $elm$parser$Parser$problem('Invalid float: \"' + (str + '\"'));
			}
		} else {
			return $elm$parser$Parser$problem(
				'Expected at most 9 digits, but got ' + $elm$core$String$fromInt(
					$elm$core$String$length(str)));
		}
	},
	$elm$parser$Parser$getChompedString(
		$elm$parser$Parser$chompWhile($elm$core$Char$isDigit)));
var $rtfeldman$elm_iso8601_date_strings$Iso8601$fromParts = F6(
	function (monthYearDayMs, hour, minute, second, ms, utcOffsetMinutes) {
		return $elm$time$Time$millisToPosix((((monthYearDayMs + (((hour * 60) * 60) * 1000)) + (((minute - utcOffsetMinutes) * 60) * 1000)) + (second * 1000)) + ms);
	});
var $elm$parser$Parser$Advanced$map2 = F3(
	function (func, _v0, _v1) {
		var parseA = _v0.a;
		var parseB = _v1.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v2 = parseA(s0);
				if (_v2.$ === 'Bad') {
					var p = _v2.a;
					var x = _v2.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p1 = _v2.a;
					var a = _v2.b;
					var s1 = _v2.c;
					var _v3 = parseB(s1);
					if (_v3.$ === 'Bad') {
						var p2 = _v3.a;
						var x = _v3.b;
						return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
					} else {
						var p2 = _v3.a;
						var b = _v3.b;
						var s2 = _v3.c;
						return A3(
							$elm$parser$Parser$Advanced$Good,
							p1 || p2,
							A2(func, a, b),
							s2);
					}
				}
			});
	});
var $elm$parser$Parser$Advanced$ignorer = F2(
	function (keepParser, ignoreParser) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$always, keepParser, ignoreParser);
	});
var $elm$parser$Parser$ignorer = $elm$parser$Parser$Advanced$ignorer;
var $elm$parser$Parser$Advanced$keeper = F2(
	function (parseFunc, parseArg) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$apL, parseFunc, parseArg);
	});
var $elm$parser$Parser$keeper = $elm$parser$Parser$Advanced$keeper;
var $elm$parser$Parser$Advanced$Append = F2(
	function (a, b) {
		return {$: 'Append', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$oneOfHelp = F3(
	function (s0, bag, parsers) {
		oneOfHelp:
		while (true) {
			if (!parsers.b) {
				return A2($elm$parser$Parser$Advanced$Bad, false, bag);
			} else {
				var parse = parsers.a.a;
				var remainingParsers = parsers.b;
				var _v1 = parse(s0);
				if (_v1.$ === 'Good') {
					var step = _v1;
					return step;
				} else {
					var step = _v1;
					var p = step.a;
					var x = step.b;
					if (p) {
						return step;
					} else {
						var $temp$s0 = s0,
							$temp$bag = A2($elm$parser$Parser$Advanced$Append, bag, x),
							$temp$parsers = remainingParsers;
						s0 = $temp$s0;
						bag = $temp$bag;
						parsers = $temp$parsers;
						continue oneOfHelp;
					}
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$oneOf = function (parsers) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A3($elm$parser$Parser$Advanced$oneOfHelp, s, $elm$parser$Parser$Advanced$Empty, parsers);
		});
};
var $elm$parser$Parser$oneOf = $elm$parser$Parser$Advanced$oneOf;
var $elm$parser$Parser$Done = function (a) {
	return {$: 'Done', a: a};
};
var $elm$parser$Parser$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $elm$core$String$append = _String_append;
var $elm$parser$Parser$UnexpectedChar = {$: 'UnexpectedChar'};
var $elm$parser$Parser$Advanced$chompIf = F2(
	function (isGood, expecting) {
		return $elm$parser$Parser$Advanced$Parser(
			function (s) {
				var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, s.offset, s.src);
				return _Utils_eq(newOffset, -1) ? A2(
					$elm$parser$Parser$Advanced$Bad,
					false,
					A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : (_Utils_eq(newOffset, -2) ? A3(
					$elm$parser$Parser$Advanced$Good,
					true,
					_Utils_Tuple0,
					{col: 1, context: s.context, indent: s.indent, offset: s.offset + 1, row: s.row + 1, src: s.src}) : A3(
					$elm$parser$Parser$Advanced$Good,
					true,
					_Utils_Tuple0,
					{col: s.col + 1, context: s.context, indent: s.indent, offset: newOffset, row: s.row, src: s.src}));
			});
	});
var $elm$parser$Parser$chompIf = function (isGood) {
	return A2($elm$parser$Parser$Advanced$chompIf, isGood, $elm$parser$Parser$UnexpectedChar);
};
var $elm$parser$Parser$Advanced$loopHelp = F4(
	function (p, state, callback, s0) {
		loopHelp:
		while (true) {
			var _v0 = callback(state);
			var parse = _v0.a;
			var _v1 = parse(s0);
			if (_v1.$ === 'Good') {
				var p1 = _v1.a;
				var step = _v1.b;
				var s1 = _v1.c;
				if (step.$ === 'Loop') {
					var newState = step.a;
					var $temp$p = p || p1,
						$temp$state = newState,
						$temp$callback = callback,
						$temp$s0 = s1;
					p = $temp$p;
					state = $temp$state;
					callback = $temp$callback;
					s0 = $temp$s0;
					continue loopHelp;
				} else {
					var result = step.a;
					return A3($elm$parser$Parser$Advanced$Good, p || p1, result, s1);
				}
			} else {
				var p1 = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p || p1, x);
			}
		}
	});
var $elm$parser$Parser$Advanced$loop = F2(
	function (state, callback) {
		return $elm$parser$Parser$Advanced$Parser(
			function (s) {
				return A4($elm$parser$Parser$Advanced$loopHelp, false, state, callback, s);
			});
	});
var $elm$parser$Parser$Advanced$map = F2(
	function (func, _v0) {
		var parse = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parse(s0);
				if (_v1.$ === 'Good') {
					var p = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p,
						func(a),
						s1);
				} else {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				}
			});
	});
var $elm$parser$Parser$map = $elm$parser$Parser$Advanced$map;
var $elm$parser$Parser$Advanced$Done = function (a) {
	return {$: 'Done', a: a};
};
var $elm$parser$Parser$Advanced$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $elm$parser$Parser$toAdvancedStep = function (step) {
	if (step.$ === 'Loop') {
		var s = step.a;
		return $elm$parser$Parser$Advanced$Loop(s);
	} else {
		var a = step.a;
		return $elm$parser$Parser$Advanced$Done(a);
	}
};
var $elm$parser$Parser$loop = F2(
	function (state, callback) {
		return A2(
			$elm$parser$Parser$Advanced$loop,
			state,
			function (s) {
				return A2(
					$elm$parser$Parser$map,
					$elm$parser$Parser$toAdvancedStep,
					callback(s));
			});
	});
var $rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt = function (quantity) {
	var helper = function (str) {
		if (_Utils_eq(
			$elm$core$String$length(str),
			quantity)) {
			var _v0 = $elm$core$String$toInt(str);
			if (_v0.$ === 'Just') {
				var intVal = _v0.a;
				return A2(
					$elm$parser$Parser$map,
					$elm$parser$Parser$Done,
					$elm$parser$Parser$succeed(intVal));
			} else {
				return $elm$parser$Parser$problem('Invalid integer: \"' + (str + '\"'));
			}
		} else {
			return A2(
				$elm$parser$Parser$map,
				function (nextChar) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$String$append, str, nextChar));
				},
				$elm$parser$Parser$getChompedString(
					$elm$parser$Parser$chompIf($elm$core$Char$isDigit)));
		}
	};
	return A2($elm$parser$Parser$loop, '', helper);
};
var $elm$parser$Parser$ExpectingSymbol = function (a) {
	return {$: 'ExpectingSymbol', a: a};
};
var $elm$parser$Parser$Advanced$Token = F2(
	function (a, b) {
		return {$: 'Token', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$isSubString = _Parser_isSubString;
var $elm$parser$Parser$Advanced$token = function (_v0) {
	var str = _v0.a;
	var expecting = _v0.b;
	var progress = !$elm$core$String$isEmpty(str);
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v1 = A5($elm$parser$Parser$Advanced$isSubString, str, s.offset, s.row, s.col, s.src);
			var newOffset = _v1.a;
			var newRow = _v1.b;
			var newCol = _v1.c;
			return _Utils_eq(newOffset, -1) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : A3(
				$elm$parser$Parser$Advanced$Good,
				progress,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: newOffset, row: newRow, src: s.src});
		});
};
var $elm$parser$Parser$Advanced$symbol = $elm$parser$Parser$Advanced$token;
var $elm$parser$Parser$symbol = function (str) {
	return $elm$parser$Parser$Advanced$symbol(
		A2(
			$elm$parser$Parser$Advanced$Token,
			str,
			$elm$parser$Parser$ExpectingSymbol(str)));
};
var $rtfeldman$elm_iso8601_date_strings$Iso8601$epochYear = 1970;
var $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay = function (day) {
	return $elm$parser$Parser$problem(
		'Invalid day: ' + $elm$core$String$fromInt(day));
};
var $rtfeldman$elm_iso8601_date_strings$Iso8601$isLeapYear = function (year) {
	return (!A2($elm$core$Basics$modBy, 4, year)) && ((!(!A2($elm$core$Basics$modBy, 100, year))) || (!A2($elm$core$Basics$modBy, 400, year)));
};
var $rtfeldman$elm_iso8601_date_strings$Iso8601$leapYearsBefore = function (y1) {
	var y = y1 - 1;
	return (((y / 4) | 0) - ((y / 100) | 0)) + ((y / 400) | 0);
};
var $rtfeldman$elm_iso8601_date_strings$Iso8601$msPerDay = 86400000;
var $rtfeldman$elm_iso8601_date_strings$Iso8601$msPerYear = 31536000000;
var $rtfeldman$elm_iso8601_date_strings$Iso8601$yearMonthDay = function (_v0) {
	var year = _v0.a;
	var month = _v0.b;
	var dayInMonth = _v0.c;
	if (dayInMonth < 0) {
		return $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth);
	} else {
		var succeedWith = function (extraMs) {
			var yearMs = $rtfeldman$elm_iso8601_date_strings$Iso8601$msPerYear * (year - $rtfeldman$elm_iso8601_date_strings$Iso8601$epochYear);
			var days = ((month < 3) || (!$rtfeldman$elm_iso8601_date_strings$Iso8601$isLeapYear(year))) ? (dayInMonth - 1) : dayInMonth;
			var dayMs = $rtfeldman$elm_iso8601_date_strings$Iso8601$msPerDay * (days + ($rtfeldman$elm_iso8601_date_strings$Iso8601$leapYearsBefore(year) - $rtfeldman$elm_iso8601_date_strings$Iso8601$leapYearsBefore($rtfeldman$elm_iso8601_date_strings$Iso8601$epochYear)));
			return $elm$parser$Parser$succeed((extraMs + yearMs) + dayMs);
		};
		switch (month) {
			case 1:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(0);
			case 2:
				return ((dayInMonth > 29) || ((dayInMonth === 29) && (!$rtfeldman$elm_iso8601_date_strings$Iso8601$isLeapYear(year)))) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(2678400000);
			case 3:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(5097600000);
			case 4:
				return (dayInMonth > 30) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(7776000000);
			case 5:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(10368000000);
			case 6:
				return (dayInMonth > 30) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(13046400000);
			case 7:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(15638400000);
			case 8:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(18316800000);
			case 9:
				return (dayInMonth > 30) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(20995200000);
			case 10:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(23587200000);
			case 11:
				return (dayInMonth > 30) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(26265600000);
			case 12:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(28857600000);
			default:
				return $elm$parser$Parser$problem(
					'Invalid month: \"' + ($elm$core$String$fromInt(month) + '\"'));
		}
	}
};
var $rtfeldman$elm_iso8601_date_strings$Iso8601$monthYearDayInMs = A2(
	$elm$parser$Parser$andThen,
	$rtfeldman$elm_iso8601_date_strings$Iso8601$yearMonthDay,
	A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				$elm$parser$Parser$succeed(
					F3(
						function (year, month, day) {
							return _Utils_Tuple3(year, month, day);
						})),
				$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(4)),
			$elm$parser$Parser$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$succeed($elm$core$Basics$identity),
							$elm$parser$Parser$symbol('-')),
						$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
						$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)
					]))),
		$elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$succeed($elm$core$Basics$identity),
						$elm$parser$Parser$symbol('-')),
					$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
					$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)
				]))));
var $rtfeldman$elm_iso8601_date_strings$Iso8601$utcOffsetInMinutes = function () {
	var utcOffsetMinutesFromParts = F3(
		function (multiplier, hours, minutes) {
			return (multiplier * (hours * 60)) + minutes;
		});
	return A2(
		$elm$parser$Parser$keeper,
		$elm$parser$Parser$succeed($elm$core$Basics$identity),
		$elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$map,
					function (_v0) {
						return 0;
					},
					$elm$parser$Parser$symbol('Z')),
					A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$keeper,
							$elm$parser$Parser$succeed(utcOffsetMinutesFromParts),
							$elm$parser$Parser$oneOf(
								_List_fromArray(
									[
										A2(
										$elm$parser$Parser$map,
										function (_v1) {
											return 1;
										},
										$elm$parser$Parser$symbol('+')),
										A2(
										$elm$parser$Parser$map,
										function (_v2) {
											return -1;
										},
										$elm$parser$Parser$symbol('-'))
									]))),
						$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
					$elm$parser$Parser$oneOf(
						_List_fromArray(
							[
								A2(
								$elm$parser$Parser$keeper,
								A2(
									$elm$parser$Parser$ignorer,
									$elm$parser$Parser$succeed($elm$core$Basics$identity),
									$elm$parser$Parser$symbol(':')),
								$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
								$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2),
								$elm$parser$Parser$succeed(0)
							]))),
					A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(0),
					$elm$parser$Parser$end)
				])));
}();
var $rtfeldman$elm_iso8601_date_strings$Iso8601$iso8601 = A2(
	$elm$parser$Parser$andThen,
	function (datePart) {
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$keeper,
							A2(
								$elm$parser$Parser$keeper,
								A2(
									$elm$parser$Parser$keeper,
									A2(
										$elm$parser$Parser$ignorer,
										$elm$parser$Parser$succeed(
											$rtfeldman$elm_iso8601_date_strings$Iso8601$fromParts(datePart)),
										$elm$parser$Parser$symbol('T')),
									$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
								$elm$parser$Parser$oneOf(
									_List_fromArray(
										[
											A2(
											$elm$parser$Parser$keeper,
											A2(
												$elm$parser$Parser$ignorer,
												$elm$parser$Parser$succeed($elm$core$Basics$identity),
												$elm$parser$Parser$symbol(':')),
											$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
											$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)
										]))),
							$elm$parser$Parser$oneOf(
								_List_fromArray(
									[
										A2(
										$elm$parser$Parser$keeper,
										A2(
											$elm$parser$Parser$ignorer,
											$elm$parser$Parser$succeed($elm$core$Basics$identity),
											$elm$parser$Parser$symbol(':')),
										$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
										$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)
									]))),
						$elm$parser$Parser$oneOf(
							_List_fromArray(
								[
									A2(
									$elm$parser$Parser$keeper,
									A2(
										$elm$parser$Parser$ignorer,
										$elm$parser$Parser$succeed($elm$core$Basics$identity),
										$elm$parser$Parser$symbol('.')),
									$rtfeldman$elm_iso8601_date_strings$Iso8601$fractionsOfASecondInMs),
									$elm$parser$Parser$succeed(0)
								]))),
					A2($elm$parser$Parser$ignorer, $rtfeldman$elm_iso8601_date_strings$Iso8601$utcOffsetInMinutes, $elm$parser$Parser$end)),
					A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(
						A6($rtfeldman$elm_iso8601_date_strings$Iso8601$fromParts, datePart, 0, 0, 0, 0, 0)),
					$elm$parser$Parser$end)
				]));
	},
	$rtfeldman$elm_iso8601_date_strings$Iso8601$monthYearDayInMs);
var $elm$parser$Parser$DeadEnd = F3(
	function (row, col, problem) {
		return {col: col, problem: problem, row: row};
	});
var $elm$parser$Parser$problemToDeadEnd = function (p) {
	return A3($elm$parser$Parser$DeadEnd, p.row, p.col, p.problem);
};
var $elm$parser$Parser$Advanced$bagToList = F2(
	function (bag, list) {
		bagToList:
		while (true) {
			switch (bag.$) {
				case 'Empty':
					return list;
				case 'AddRight':
					var bag1 = bag.a;
					var x = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$core$List$cons, x, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
				default:
					var bag1 = bag.a;
					var bag2 = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$parser$Parser$Advanced$bagToList, bag2, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
			}
		}
	});
var $elm$parser$Parser$Advanced$run = F2(
	function (_v0, src) {
		var parse = _v0.a;
		var _v1 = parse(
			{col: 1, context: _List_Nil, indent: 1, offset: 0, row: 1, src: src});
		if (_v1.$ === 'Good') {
			var value = _v1.b;
			return $elm$core$Result$Ok(value);
		} else {
			var bag = _v1.b;
			return $elm$core$Result$Err(
				A2($elm$parser$Parser$Advanced$bagToList, bag, _List_Nil));
		}
	});
var $elm$parser$Parser$run = F2(
	function (parser, source) {
		var _v0 = A2($elm$parser$Parser$Advanced$run, parser, source);
		if (_v0.$ === 'Ok') {
			var a = _v0.a;
			return $elm$core$Result$Ok(a);
		} else {
			var problems = _v0.a;
			return $elm$core$Result$Err(
				A2($elm$core$List$map, $elm$parser$Parser$problemToDeadEnd, problems));
		}
	});
var $rtfeldman$elm_iso8601_date_strings$Iso8601$toTime = function (str) {
	return A2($elm$parser$Parser$run, $rtfeldman$elm_iso8601_date_strings$Iso8601$iso8601, str);
};
var $author$project$Models$Trip$activityDecoder = function () {
	var toDecoder = F5(
		function (location, dateString, activity, student, studentName) {
			var _v0 = $rtfeldman$elm_iso8601_date_strings$Iso8601$toTime(dateString);
			if (_v0.$ === 'Ok') {
				var date = _v0.a;
				return $elm$json$Json$Decode$succeed(
					A5($author$project$Models$Trip$StudentActivity, location, date, activity, student, studentName));
			} else {
				return $elm$json$Json$Decode$fail(dateString + ' cannot be decoded to a date');
			}
		});
	return $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$resolve(
		A4(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
			'student_name',
			$elm$json$Json$Decode$string,
			'',
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'student',
				$elm$json$Json$Decode$int,
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'activity',
					$elm$json$Json$Decode$string,
					A3(
						$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
						'time',
						$elm$json$Json$Decode$string,
						A3(
							$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
							'location',
							$author$project$Models$Location$locationDecoder,
							$elm$json$Json$Decode$succeed(toDecoder)))))));
}();
var $author$project$Models$Trip$Report = F2(
	function (location, time) {
		return {location: location, time: time};
	});
var $author$project$Models$Trip$reportDecoder = function () {
	var toDecoder = F2(
		function (location, dateString) {
			var _v0 = $rtfeldman$elm_iso8601_date_strings$Iso8601$toTime(dateString);
			if (_v0.$ === 'Ok') {
				var date = _v0.a;
				return $elm$json$Json$Decode$succeed(
					A2($author$project$Models$Trip$Report, location, date));
			} else {
				return $elm$json$Json$Decode$fail(dateString + ' cannot be decoded to a date');
			}
		});
	return $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$resolve(
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'time',
			$elm$json$Json$Decode$string,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'location',
				$author$project$Models$Location$locationDecoder,
				$elm$json$Json$Decode$succeed(toDecoder))));
}();
var $author$project$Models$Trip$tripDecoder = function () {
	var toDecoder = F5(
		function (startDateString, endDateString, reports, distanceCovered, studentActivities) {
			var _v0 = _Utils_Tuple2(
				$rtfeldman$elm_iso8601_date_strings$Iso8601$toTime(startDateString),
				$rtfeldman$elm_iso8601_date_strings$Iso8601$toTime(endDateString));
			if (_v0.a.$ === 'Ok') {
				if (_v0.b.$ === 'Ok') {
					var startDate = _v0.a.a;
					var endDate = _v0.b.a;
					return $elm$json$Json$Decode$succeed(
						{
							distanceCovered: distanceCovered,
							endTime: endDate,
							reports: $elm$core$List$reverse(reports),
							startTime: startDate,
							studentActivities: studentActivities
						});
				} else {
					return $elm$json$Json$Decode$fail(endDateString + ' cannot be decoded to a date');
				}
			} else {
				return $elm$json$Json$Decode$fail(startDateString + ' cannot be decoded to a date');
			}
		});
	return $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$resolve(
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'student_activities',
			$elm$json$Json$Decode$list($author$project$Models$Trip$activityDecoder),
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'distance_covered',
				$elm$json$Json$Decode$float,
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'reports',
					$elm$json$Json$Decode$list($author$project$Models$Trip$reportDecoder),
					A3(
						$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
						'end_time',
						$elm$json$Json$Decode$string,
						A3(
							$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
							'start_time',
							$elm$json$Json$Decode$string,
							$elm$json$Json$Decode$succeed(toDecoder)))))));
}();
var $author$project$Api$Endpoint$trips = function (_v0) {
	var bus_id = _v0.bus_id;
	return A2(
		$author$project$Api$Endpoint$url,
		_List_fromArray(
			[
				'tracking',
				'trips',
				$elm$core$String$fromInt(bus_id)
			]),
		_List_Nil);
};
var $author$project$Pages$Buses$TripsHistoryPage$fetchTripsForBus = F2(
	function (session, bus_id) {
		var params = {bus_id: bus_id};
		return A2(
			$elm$core$Platform$Cmd$map,
			$author$project$Pages$Buses$TripsHistoryPage$TripsResponse,
			A3(
				$author$project$Api$get,
				session,
				$author$project$Api$Endpoint$trips(params),
				$elm$json$Json$Decode$list($author$project$Models$Trip$tripDecoder)));
	});
var $author$project$Pages$Buses$TripsHistoryPage$init = F2(
	function (session, bus) {
		return _Utils_Tuple2(
			{
				groupedTrips: _List_Nil,
				selectedGroup: $elm$core$Maybe$Nothing,
				selectedTrip: $elm$core$Maybe$Nothing,
				showGeofence: true,
				showStops: true,
				sliderValue: 0,
				timezone: $author$project$Session$timeZone(session),
				trips: $krisajenkins$remotedata$RemoteData$Loading
			},
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						A2($author$project$Pages$Buses$TripsHistoryPage$fetchTripsForBus, session, bus.id),
						$author$project$Ports$initializeMaps(false)
					])));
	});
var $author$project$Pages$Buses$BusPage$routePage = F2(
	function (bus, session) {
		return A3(
			$author$project$Page$transformToModelMsg,
			$author$project$Pages$Buses$BusPage$RouteHistory,
			$author$project$Pages$Buses$BusPage$GotRouteHistoryMsg,
			A2($author$project$Pages$Buses$TripsHistoryPage$init, session, bus));
	});
var $author$project$Icons$timeline = $author$project$Icons$iconNamed('images/timeline.svg');
var $author$project$Pages$Buses$BusPage$allPagesFromSession = F3(
	function (bus, session, preferredPage) {
		var defaultPage = _Utils_Tuple2(
			$author$project$Icons$info,
			A2($author$project$Pages$Buses$BusPage$aboutPage, bus, session));
		var pages = _List_fromArray(
			[
				defaultPage,
				_Utils_Tuple2(
				$author$project$Icons$timeline,
				A2($author$project$Pages$Buses$BusPage$routePage, bus, session)),
				_Utils_Tuple2(
				$author$project$Icons$fuel,
				A2($author$project$Pages$Buses$BusPage$fuelPage, bus, session)),
				_Utils_Tuple2(
				$author$project$Icons$repairs,
				A2($author$project$Pages$Buses$BusPage$repairsPage, bus, session)),
				_Utils_Tuple2(
				$author$project$Icons$hardware,
				A2($author$project$Pages$Buses$BusPage$devicePage, bus, session))
			]);
		var _v0 = function () {
			if (preferredPage.$ === 'Just') {
				var preferredPage_ = preferredPage.a;
				return A2(
					$elm$core$Maybe$withDefault,
					_Utils_Tuple2(0, defaultPage),
					$elm$core$List$head(
						A2(
							$elm$core$List$filter,
							function (_v2) {
								var index = _v2.a;
								var _v3 = _v2.b;
								var _v4 = _v3.b;
								var page = _v4.a;
								return _Utils_eq(
									$elm$core$String$toLower(
										$author$project$Pages$Buses$BusPage$pageName(page)),
									$elm$core$String$toLower(
										A3($elm$core$String$replace, '%20', ' ', preferredPage_)));
							},
							A2($elm$core$List$indexedMap, $elm$core$Tuple$pair, pages))));
			} else {
				return _Utils_Tuple2(0, defaultPage);
			}
		}();
		var pageIndex = _v0.a;
		var initialPage = _v0.b;
		return {
			bus: bus,
			currentPage: initialPage.b.a,
			pageIndex: ($elm$core$List$length(pages) - pageIndex) - 1,
			pages: pages,
			pendingAction: initialPage.b.b
		};
	});
var $author$project$Models$Bus$Bus = F9(
	function (id, numberPlate, seats_available, vehicleType, stated_milage, route, device, repairs, last_seen) {
		return {device: device, id: id, last_seen: last_seen, numberPlate: numberPlate, repairs: repairs, route: route, seats_available: seats_available, stated_milage: stated_milage, vehicleType: vehicleType};
	});
var $author$project$Models$Bus$LocationUpdate = F4(
	function (bus, location, speed, bearing) {
		return {bearing: bearing, bus: bus, location: location, speed: speed};
	});
var $author$project$Models$Bus$SchoolBus = {$: 'SchoolBus'};
var $author$project$Models$Bus$Shuttle = {$: 'Shuttle'};
var $author$project$Models$Bus$Van = {$: 'Van'};
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$hardcoded = A2($elm$core$Basics$composeR, $elm$json$Json$Decode$succeed, $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom);
var $author$project$Models$Bus$locationUpdateDecoder = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'bearing',
	$elm$json$Json$Decode$float,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'speed',
		$elm$json$Json$Decode$float,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'location',
			$author$project$Models$Location$locationDecoder,
			A2(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$hardcoded,
				0,
				$elm$json$Json$Decode$succeed($author$project$Models$Bus$LocationUpdate)))));
var $elm$json$Json$Decode$nullable = function (decoder) {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				$elm$json$Json$Decode$null($elm$core$Maybe$Nothing),
				A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, decoder)
			]));
};
var $author$project$Models$Bus$Engine = {$: 'Engine'};
var $author$project$Models$Bus$FrontCrossAxis = {$: 'FrontCrossAxis'};
var $author$project$Models$Bus$FrontLeftTire = {$: 'FrontLeftTire'};
var $author$project$Models$Bus$FrontRightTire = {$: 'FrontRightTire'};
var $author$project$Models$Bus$RearCrossAxis = {$: 'RearCrossAxis'};
var $author$project$Models$Bus$RearLeftTire = {$: 'RearLeftTire'};
var $author$project$Models$Bus$RearRightTire = {$: 'RearRightTire'};
var $author$project$Models$Bus$VerticalAxis = {$: 'VerticalAxis'};
var $author$project$Models$Bus$toPart = function (partString) {
	switch (partString) {
		case 'Front Left Tire':
			return $author$project$Models$Bus$FrontLeftTire;
		case 'Front Right Tire':
			return $author$project$Models$Bus$FrontRightTire;
		case 'Rear Left Tire':
			return $author$project$Models$Bus$RearLeftTire;
		case 'Rear Right Tire':
			return $author$project$Models$Bus$RearRightTire;
		case 'Front Cross Axis':
			return $author$project$Models$Bus$FrontCrossAxis;
		case 'Rear Cross Axis':
			return $author$project$Models$Bus$RearCrossAxis;
		case 'Vertical Axis':
			return $author$project$Models$Bus$VerticalAxis;
		default:
			return $author$project$Models$Bus$Engine;
	}
};
var $author$project$Models$Bus$repairDecoder = function () {
	var decoder = F5(
		function (id, part, description, cost, dateTimeString) {
			var _v0 = $rtfeldman$elm_iso8601_date_strings$Iso8601$toTime(dateTimeString);
			if (_v0.$ === 'Ok') {
				var dateTime = _v0.a;
				return $elm$json$Json$Decode$succeed(
					{
						cost: cost,
						dateTime: dateTime,
						description: description,
						id: id,
						part: $author$project$Models$Bus$toPart(part)
					});
			} else {
				return $elm$json$Json$Decode$fail(dateTimeString + ' cannot be decoded to a date');
			}
		});
	return $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$resolve(
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'time',
			$elm$json$Json$Decode$string,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'cost',
				$elm$json$Json$Decode$int,
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'description',
					$elm$json$Json$Decode$string,
					A3(
						$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
						'part',
						$elm$json$Json$Decode$string,
						A3(
							$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
							'id',
							$elm$json$Json$Decode$int,
							$elm$json$Json$Decode$succeed(decoder)))))));
}();
var $author$project$Models$Bus$Route = F2(
	function (id, name) {
		return {id: id, name: name};
	});
var $author$project$Models$Bus$routeDecoder = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'name',
	$elm$json$Json$Decode$string,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'id',
		$elm$json$Json$Decode$string,
		$elm$json$Json$Decode$succeed($author$project$Models$Bus$Route)));
var $author$project$Models$Bus$busDecoderWithCallback = function (callback) {
	var busDataDecoder = F9(
		function (id, number_plate, seats_available, vehicle_type, stated_milage, route, device, repairs, update) {
			var bus = function () {
				var vehicleType = function () {
					switch (vehicle_type) {
						case 'van':
							return $author$project$Models$Bus$Van;
						case 'shuttle':
							return $author$project$Models$Bus$Shuttle;
						default:
							return $author$project$Models$Bus$SchoolBus;
					}
				}();
				var lastSeen = A2(
					$elm$core$Maybe$andThen,
					function (update_) {
						return $elm$core$Maybe$Just(
							A4($author$project$Models$Bus$LocationUpdate, id, update_.location, update_.speed, update_.bearing));
					},
					update);
				return A9($author$project$Models$Bus$Bus, id, number_plate, seats_available, vehicleType, stated_milage, route, device, repairs, lastSeen);
			}();
			return $elm$json$Json$Decode$succeed(
				callback(bus));
		});
	return $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$resolve(
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'last_seen',
			$elm$json$Json$Decode$nullable($author$project$Models$Bus$locationUpdateDecoder),
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'performed_repairs',
				$elm$json$Json$Decode$list($author$project$Models$Bus$repairDecoder),
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'device',
					$elm$json$Json$Decode$nullable($elm$json$Json$Decode$string),
					A3(
						$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
						'route',
						$elm$json$Json$Decode$nullable($author$project$Models$Bus$routeDecoder),
						A3(
							$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
							'stated_milage',
							$elm$json$Json$Decode$float,
							A3(
								$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
								'vehicle_type',
								$elm$json$Json$Decode$string,
								A3(
									$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
									'seats_available',
									$elm$json$Json$Decode$int,
									A3(
										$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
										'number_plate',
										$elm$json$Json$Decode$string,
										A3(
											$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
											'id',
											$elm$json$Json$Decode$int,
											$elm$json$Json$Decode$succeed(busDataDecoder)))))))))));
};
var $author$project$Pages$Buses$BusPage$busDecoder = F2(
	function (session, preferredPage) {
		return $author$project$Models$Bus$busDecoderWithCallback(
			function (bus) {
				return A3($author$project$Pages$Buses$BusPage$allPagesFromSession, bus, session, preferredPage);
			});
	});
var $author$project$Pages$Buses$BusPage$fetchBus = F3(
	function (busID, session, preferredPage) {
		return A2(
			$elm$core$Platform$Cmd$map,
			$author$project$Pages$Buses$BusPage$ServerResponse,
			A3(
				$author$project$Api$get,
				session,
				$author$project$Api$Endpoint$bus(busID),
				A2($author$project$Pages$Buses$BusPage$busDecoder, session, preferredPage)));
	});
var $elm$json$Json$Encode$null = _Json_encodeNull;
var $author$project$Ports$initializeLiveView = _Platform_outgoingPort(
	'initializeLiveView',
	function ($) {
		return $elm$json$Json$Encode$null;
	});
var $author$project$Pages$Buses$BusPage$init = F5(
	function (busID, session, height, locationUpdate, preferredPage) {
		return _Utils_Tuple2(
			{busData: $krisajenkins$remotedata$RemoteData$Loading, busID: busID, height: height, locationUpdate: locationUpdate, preferredPage: preferredPage, session: session},
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						A3($author$project$Pages$Buses$BusPage$fetchBus, busID, session, preferredPage),
						$author$project$Ports$initializeLiveView(_Utils_Tuple0)
					])));
	});
var $author$project$Pages$Buses$BusesPage$ServerResponse = function (a) {
	return {$: 'ServerResponse', a: a};
};
var $author$project$Models$Bus$busDecoder = $author$project$Models$Bus$busDecoderWithCallback($elm$core$Basics$identity);
var $author$project$Api$Endpoint$buses = A2(
	$author$project$Api$Endpoint$url,
	_List_fromArray(
		['school', 'buses']),
	_List_Nil);
var $author$project$Pages$Buses$BusesPage$fetchBuses = function (session) {
	return A2(
		$elm$core$Platform$Cmd$map,
		$author$project$Pages$Buses$BusesPage$ServerResponse,
		A3(
			$author$project$Api$get,
			session,
			$author$project$Api$Endpoint$buses,
			$elm$json$Json$Decode$list($author$project$Models$Bus$busDecoder)));
};
var $author$project$Pages$Buses$BusesPage$init = F3(
	function (session, height, locationUpdates) {
		return _Utils_Tuple2(
			{buses: $krisajenkins$remotedata$RemoteData$Loading, filterText: '', height: height, locationUpdates: locationUpdates, selectedBus: $elm$core$Maybe$Nothing, session: session},
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						$author$project$Pages$Buses$BusesPage$fetchBuses(session),
						$author$project$Ports$initializeMaps(false),
						$author$project$Ports$initializeLiveView(_Utils_Tuple0)
					])));
	});
var $author$project$Pages$Buses$CreateBusPage$ConsumptionDropdownMsg = function (a) {
	return {$: 'ConsumptionDropdownMsg', a: a};
};
var $author$project$Pages$Buses$CreateBusPage$Default = {$: 'Default'};
var $author$project$Pages$Buses$CreateBusPage$Diesel = {$: 'Diesel'};
var $author$project$Pages$Buses$CreateBusPage$FuelDropdownMsg = function (a) {
	return {$: 'FuelDropdownMsg', a: a};
};
var $krisajenkins$remotedata$RemoteData$NotAsked = {$: 'NotAsked'};
var $author$project$Pages$Buses$CreateBusPage$VehicleClass = F2(
	function (a, b) {
		return {$: 'VehicleClass', a: a, b: b};
	});
var $author$project$Pages$Buses$CreateBusPage$defaultConsumption = function (vehicleClass) {
	if (vehicleClass.b.$ === 'Gasoline') {
		switch (vehicleClass.a.$) {
			case 'Van':
				var _v1 = vehicleClass.a;
				var _v2 = vehicleClass.b;
				return 7.4;
			case 'Shuttle':
				var _v5 = vehicleClass.a;
				var _v6 = vehicleClass.b;
				return 3.3;
			default:
				var _v9 = vehicleClass.a;
				var _v10 = vehicleClass.b;
				return 2.7;
		}
	} else {
		switch (vehicleClass.a.$) {
			case 'Van':
				var _v3 = vehicleClass.a;
				var _v4 = vehicleClass.b;
				return 8.1;
			case 'Shuttle':
				var _v7 = vehicleClass.a;
				var _v8 = vehicleClass.b;
				return 3.3;
			default:
				var _v11 = vehicleClass.a;
				var _v12 = vehicleClass.b;
				return 3.0;
		}
	}
};
var $author$project$Pages$Buses$CreateBusPage$defaultSeats = function (vehicleClass) {
	switch (vehicleClass.a.$) {
		case 'Van':
			var _v1 = vehicleClass.a;
			return 12;
		case 'Shuttle':
			var _v2 = vehicleClass.a;
			return 24;
		default:
			var _v3 = vehicleClass.a;
			return 48;
	}
};
var $author$project$StyledElement$FloatInput$FloatInput = F2(
	function (a, b) {
		return {$: 'FloatInput', a: a, b: b};
	});
var $author$project$StyledElement$FloatInput$fromFloat = function (_float) {
	return A2(
		$author$project$StyledElement$FloatInput$FloatInput,
		_float,
		$elm$core$String$fromFloat(_float));
};
var $author$project$StyledElement$DropDown$State = function (a) {
	return {$: 'State', a: a};
};
var $author$project$StyledElement$DropDown$init = function (id) {
	return $author$project$StyledElement$DropDown$State(
		{filterText: '', focusedIndex: 0, id: id, isOpen: false, selectedItem: $elm$core$Maybe$Nothing});
};
var $author$project$Pages$Buses$CreateBusPage$emptyForm = function (session) {
	var defaultVehicle = A2($author$project$Pages$Buses$CreateBusPage$VehicleClass, $author$project$Models$Bus$SchoolBus, $author$project$Pages$Buses$CreateBusPage$Diesel);
	return {
		consumptionDropdownState: $author$project$StyledElement$DropDown$init('consumptionDropdown'),
		form: {
			consumptionAmount: $author$project$StyledElement$FloatInput$fromFloat(
				$author$project$Pages$Buses$CreateBusPage$defaultConsumption(defaultVehicle)),
			consumptionType: $author$project$Pages$Buses$CreateBusPage$Default,
			numberPlate: '',
			problems: _List_Nil,
			routeId: $elm$core$Maybe$Nothing,
			seatsAvailable: $author$project$Pages$Buses$CreateBusPage$defaultSeats(defaultVehicle),
			vehicleClass: defaultVehicle
		},
		fuelDropdownState: $author$project$StyledElement$DropDown$init('fuelDropdown'),
		requestState: $krisajenkins$remotedata$RemoteData$NotAsked,
		routeDropdownState: $author$project$StyledElement$DropDown$init('routeDropdown'),
		session: session
	};
};
var $author$project$StyledElement$DropDown$OnSelect = function (a) {
	return {$: 'OnSelect', a: a};
};
var $author$project$StyledElement$DropDown$selectOption = function (item) {
	return $author$project$StyledElement$DropDown$OnSelect(item);
};
var $author$project$Pages$Buses$CreateBusPage$init = function (session) {
	return _Utils_Tuple2(
		$author$project$Pages$Buses$CreateBusPage$emptyForm(session),
		$elm$core$Platform$Cmd$batch(
			_List_fromArray(
				[
					$author$project$Ports$initializeMaps(false),
					A2(
					$elm$core$Task$perform,
					$elm$core$Basics$identity,
					$elm$core$Task$succeed(
						$author$project$Pages$Buses$CreateBusPage$FuelDropdownMsg(
							$author$project$StyledElement$DropDown$selectOption($author$project$Pages$Buses$CreateBusPage$Diesel)))),
					A2(
					$elm$core$Task$perform,
					$elm$core$Basics$identity,
					$elm$core$Task$succeed(
						$author$project$Pages$Buses$CreateBusPage$ConsumptionDropdownMsg(
							$author$project$StyledElement$DropDown$selectOption($author$project$Pages$Buses$CreateBusPage$Default))))
				])));
};
var $author$project$Pages$Buses$CreateBusRepairPage$init = F3(
	function (bus, session, height) {
		return _Utils_Tuple2(
			{bus: bus, height: height, index: 0, isAboveDropOffPoint: false, pickedUpItem: $elm$core$Maybe$Nothing, problems: _List_Nil, repairs: _List_Nil, requestState: $krisajenkins$remotedata$RemoteData$NotAsked, session: session},
			$elm$core$Platform$Cmd$none);
	});
var $author$project$Models$CrewMember$Assistant = {$: 'Assistant'};
var $author$project$Pages$Crew$CrewMemberRegistrationPage$EditState = F2(
	function (requestState, crewMemberID) {
		return {crewMemberID: crewMemberID, requestState: requestState};
	});
var $author$project$Pages$Crew$CrewMemberRegistrationPage$RoleDropdownMsg = function (a) {
	return {$: 'RoleDropdownMsg', a: a};
};
var $author$project$Pages$Crew$CrewMemberRegistrationPage$CrewMemberResponse = function (a) {
	return {$: 'CrewMemberResponse', a: a};
};
var $author$project$Models$CrewMember$CrewMember = F6(
	function (id, name, role, email, phoneNumber, bus) {
		return {bus: bus, email: email, id: id, name: name, phoneNumber: phoneNumber, role: role};
	});
var $author$project$Models$CrewMember$Driver = {$: 'Driver'};
var $author$project$Models$CrewMember$crewDecoder = function () {
	var decoder = F6(
		function (id, name, role_, email, phoneNumber, bus) {
			var crewMember = function () {
				var role = function () {
					if (role_ === 'driver') {
						return $author$project$Models$CrewMember$Driver;
					} else {
						return $author$project$Models$CrewMember$Assistant;
					}
				}();
				return A6($author$project$Models$CrewMember$CrewMember, id, name, role, email, phoneNumber, bus);
			}();
			return $elm$json$Json$Decode$succeed(crewMember);
		});
	return $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$resolve(
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'bus_id',
			$elm$json$Json$Decode$nullable($elm$json$Json$Decode$int),
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'phone_number',
				$elm$json$Json$Decode$string,
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'email',
					$elm$json$Json$Decode$string,
					A3(
						$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
						'role',
						$elm$json$Json$Decode$string,
						A3(
							$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
							'name',
							$elm$json$Json$Decode$string,
							A3(
								$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
								'id',
								$elm$json$Json$Decode$int,
								$elm$json$Json$Decode$succeed(decoder))))))));
}();
var $author$project$Api$Endpoint$crewMember = function (id) {
	return A2(
		$author$project$Api$Endpoint$url,
		_List_fromArray(
			[
				'school',
				'crew',
				$elm$core$String$fromInt(id)
			]),
		_List_Nil);
};
var $author$project$Pages$Crew$CrewMemberRegistrationPage$fetchCrewMember = F2(
	function (session, id) {
		return A2(
			$elm$core$Platform$Cmd$map,
			$author$project$Pages$Crew$CrewMemberRegistrationPage$CrewMemberResponse,
			A3(
				$author$project$Api$get,
				session,
				$author$project$Api$Endpoint$crewMember(id),
				$author$project$Models$CrewMember$crewDecoder));
	});
var $author$project$Pages$Crew$CrewMemberRegistrationPage$init = F2(
	function (session, id) {
		return _Utils_Tuple2(
			{
				editState: A2(
					$elm$core$Maybe$andThen,
					A2(
						$elm$core$Basics$composeR,
						$author$project$Pages$Crew$CrewMemberRegistrationPage$EditState($krisajenkins$remotedata$RemoteData$Loading),
						$elm$core$Maybe$Just),
					id),
				form: {
					email: '',
					name: '',
					phoneNumber: '',
					problems: _List_Nil,
					role: $elm$core$Maybe$Just($author$project$Models$CrewMember$Assistant)
				},
				requestState: $krisajenkins$remotedata$RemoteData$NotAsked,
				roleDropdownState: $author$project$StyledElement$DropDown$init('rolesDropdown'),
				session: session
			},
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						A2(
						$elm$core$Task$perform,
						$elm$core$Basics$identity,
						$elm$core$Task$succeed(
							$author$project$Pages$Crew$CrewMemberRegistrationPage$RoleDropdownMsg(
								$author$project$StyledElement$DropDown$selectOption($author$project$Models$CrewMember$Assistant)))),
						function () {
						if (id.$ === 'Just') {
							var id_ = id.a;
							return A2($author$project$Pages$Crew$CrewMemberRegistrationPage$fetchCrewMember, session, id_);
						} else {
							return $elm$core$Platform$Cmd$none;
						}
					}()
					])));
	});
var $author$project$Pages$Crew$CrewMembersPage$Data = F2(
	function (crew, buses) {
		return {buses: buses, crew: crew};
	});
var $author$project$Pages$Crew$CrewMembersPage$emptyEdits = {changes: _List_Nil, draggedAbove: $elm$core$Maybe$Nothing, draggingCrewMember: $elm$core$Maybe$Nothing};
var $author$project$Pages$Crew$CrewMembersPage$ServerResponse = function (a) {
	return {$: 'ServerResponse', a: a};
};
var $author$project$Api$Endpoint$crewMembersAndBuses = A2(
	$author$project$Api$Endpoint$url,
	_List_fromArray(
		['school', 'crew_and_buses']),
	_List_Nil);
var $author$project$Pages$Crew$CrewMembersPage$dataDecoder = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'buses',
	$elm$json$Json$Decode$list($author$project$Models$Bus$busDecoder),
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'crew',
		$elm$json$Json$Decode$list($author$project$Models$CrewMember$crewDecoder),
		$elm$json$Json$Decode$succeed($author$project$Pages$Crew$CrewMembersPage$Data)));
var $author$project$Pages$Crew$CrewMembersPage$fetchCrewMembersAndBuses = function (session) {
	return A2(
		$elm$core$Platform$Cmd$map,
		$author$project$Pages$Crew$CrewMembersPage$ServerResponse,
		A3($author$project$Api$get, session, $author$project$Api$Endpoint$crewMembersAndBuses, $author$project$Pages$Crew$CrewMembersPage$dataDecoder));
};
var $author$project$Pages$Crew$CrewMembersPage$init = F2(
	function (session, height) {
		return _Utils_Tuple2(
			{
				data: $krisajenkins$remotedata$RemoteData$Loading,
				editedData: A2($author$project$Pages$Crew$CrewMembersPage$Data, _List_Nil, _List_Nil),
				edits: $author$project$Pages$Crew$CrewMembersPage$emptyEdits,
				height: height,
				inEditingMode: false,
				selectedCrewMember: $elm$core$Maybe$Nothing,
				session: session
			},
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						$author$project$Pages$Crew$CrewMembersPage$fetchCrewMembersAndBuses(session)
					])));
	});
var $author$project$Pages$Devices$DeviceRegistrationPage$CameraClosed = {$: 'CameraClosed'};
var $author$project$Pages$Devices$DeviceRegistrationPage$BusesServerResponse = function (a) {
	return {$: 'BusesServerResponse', a: a};
};
var $author$project$Pages$Devices$DeviceRegistrationPage$busDecoder = function () {
	var toBus = F3(
		function (id, number_plate, device) {
			return $elm$json$Json$Decode$succeed(
				{
					hasDevice: !_Utils_eq(device, $elm$core$Maybe$Nothing),
					id: id,
					numberPlate: number_plate
				});
		});
	return $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$resolve(
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'device',
			$elm$json$Json$Decode$nullable($elm$json$Json$Decode$string),
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'number_plate',
				$elm$json$Json$Decode$string,
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'id',
					$elm$json$Json$Decode$int,
					$elm$json$Json$Decode$succeed(toBus)))));
}();
var $author$project$Pages$Devices$DeviceRegistrationPage$fetchBuses = function (session) {
	return A2(
		$elm$core$Platform$Cmd$map,
		$author$project$Pages$Devices$DeviceRegistrationPage$BusesServerResponse,
		A3(
			$author$project$Api$get,
			session,
			$author$project$Api$Endpoint$buses,
			$elm$json$Json$Decode$list($author$project$Pages$Devices$DeviceRegistrationPage$busDecoder)));
};
var $author$project$Pages$Devices$DeviceRegistrationPage$init = F2(
	function (session, busID) {
		return _Utils_Tuple2(
			{
				busDropDownState: $author$project$StyledElement$DropDown$init('busDropDownState'),
				buses: $krisajenkins$remotedata$RemoteData$Loading,
				cameraState: $author$project$Pages$Devices$DeviceRegistrationPage$CameraClosed,
				form: {problems: _List_Nil, selectedBus: $elm$core$Maybe$Nothing, serial: ''},
				preselectedBus: busID,
				requestState: $krisajenkins$remotedata$RemoteData$NotAsked,
				session: session
			},
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						$author$project$Pages$Devices$DeviceRegistrationPage$fetchBuses(session)
					])));
	});
var $author$project$Pages$Devices$DevicesPage$Model = F2(
	function (session, devices) {
		return {devices: devices, session: session};
	});
var $author$project$Pages$Devices$DevicesPage$ServerResponse = function (a) {
	return {$: 'ServerResponse', a: a};
};
var $author$project$Pages$Devices$DevicesPage$Device = F2(
	function (imei, bus) {
		return {bus: bus, imei: imei};
	});
var $author$project$Pages$Devices$DevicesPage$Bus = F2(
	function (id, numberPlate) {
		return {id: id, numberPlate: numberPlate};
	});
var $author$project$Pages$Devices$DevicesPage$busDecoder = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'number_plate',
	$elm$json$Json$Decode$string,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'id',
		$elm$json$Json$Decode$int,
		$elm$json$Json$Decode$succeed($author$project$Pages$Devices$DevicesPage$Bus)));
var $author$project$Pages$Devices$DevicesPage$deviceDecoder = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'bus',
	$elm$json$Json$Decode$nullable($author$project$Pages$Devices$DevicesPage$busDecoder),
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'imei',
		$elm$json$Json$Decode$string,
		$elm$json$Json$Decode$succeed($author$project$Pages$Devices$DevicesPage$Device)));
var $author$project$Api$Endpoint$devices = A2(
	$author$project$Api$Endpoint$url,
	_List_fromArray(
		['school', 'devices']),
	_List_Nil);
var $author$project$Pages$Devices$DevicesPage$fetchDevices = function (session) {
	return A2(
		$elm$core$Platform$Cmd$map,
		$author$project$Pages$Devices$DevicesPage$ServerResponse,
		A3(
			$author$project$Api$get,
			session,
			$author$project$Api$Endpoint$devices,
			$elm$json$Json$Decode$list($author$project$Pages$Devices$DevicesPage$deviceDecoder)));
};
var $author$project$Pages$Devices$DevicesPage$init = function (session) {
	return _Utils_Tuple2(
		A2($author$project$Pages$Devices$DevicesPage$Model, session, $krisajenkins$remotedata$RemoteData$Loading),
		$author$project$Pages$Devices$DevicesPage$fetchDevices(session));
};
var $author$project$Pages$Home$Model = function (session) {
	return {session: session};
};
var $author$project$Pages$Home$init = function (session) {
	return _Utils_Tuple2(
		$author$project$Pages$Home$Model(session),
		$elm$core$Platform$Cmd$none);
};
var $author$project$Pages$Households$HouseholdRegistrationPage$emptyForm = function (session) {
	return {
		form: {
			canTrack: true,
			currentStudent: '',
			guardian: {email: '', name: '', phoneNumber: ''},
			homeLocation: $elm$core$Maybe$Just(
				{latitude: 1, longitude: 2}),
			pickupLocation: $elm$core$Maybe$Just(
				{latitude: 0, longitude: 0}),
			problems: _List_Nil,
			route: $elm$core$Maybe$Nothing,
			students: _List_Nil
		},
		routeDropdownState: $author$project$StyledElement$DropDown$init('routeDropdown'),
		searchDropdownState: $author$project$StyledElement$DropDown$init('searchDropdown'),
		session: session
	};
};
var $author$project$Pages$Households$HouseholdRegistrationPage$init = function (session) {
	return _Utils_Tuple2(
		$author$project$Pages$Households$HouseholdRegistrationPage$emptyForm(session),
		$author$project$Ports$initializeMaps(false));
};
var $author$project$Pages$Households$HouseholdsPage$Model = F2(
	function (session, households) {
		return {households: households, session: session};
	});
var $author$project$Pages$Households$HouseholdsPage$StudentsResponse = function (a) {
	return {$: 'StudentsResponse', a: a};
};
var $author$project$Models$Household$Guardian = F4(
	function (id, name, phoneNumber, email) {
		return {email: email, id: id, name: name, phoneNumber: phoneNumber};
	});
var $author$project$Models$Household$Household = F3(
	function (id, guardian, students) {
		return {guardian: guardian, id: id, students: students};
	});
var $author$project$Models$Household$Student = F5(
	function (name, travel_time, homeLocation, pickupLocation, route) {
		return {homeLocation: homeLocation, name: name, pickupLocation: pickupLocation, route: route, travel_time: travel_time};
	});
var $author$project$Models$Household$Location = F2(
	function (lng, lat) {
		return {lat: lat, lng: lng};
	});
var $author$project$Models$Household$locationDecoder = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'lat',
	$elm$json$Json$Decode$float,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'lng',
		$elm$json$Json$Decode$float,
		$elm$json$Json$Decode$succeed($author$project$Models$Household$Location)));
var $author$project$Models$Household$studentDecoder = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'route',
	$elm$json$Json$Decode$string,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'pickup_location',
		$author$project$Models$Household$locationDecoder,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'home_location',
			$author$project$Models$Household$locationDecoder,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'travel_time',
				$elm$json$Json$Decode$string,
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'name',
					$elm$json$Json$Decode$string,
					$elm$json$Json$Decode$succeed($author$project$Models$Household$Student))))));
var $author$project$Models$Household$householdDecoder = function () {
	var decoder = F5(
		function (id, name, email, phoneNumber, students) {
			return $elm$json$Json$Decode$succeed(
				A3(
					$author$project$Models$Household$Household,
					id,
					A4($author$project$Models$Household$Guardian, id, name, email, phoneNumber),
					students));
		});
	return $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$resolve(
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'students',
			$elm$json$Json$Decode$list($author$project$Models$Household$studentDecoder),
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'phone_number',
				$elm$json$Json$Decode$string,
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'email',
					$elm$json$Json$Decode$string,
					A3(
						$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
						'name',
						$elm$json$Json$Decode$string,
						A3(
							$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
							'id',
							$elm$json$Json$Decode$int,
							$elm$json$Json$Decode$succeed(decoder)))))));
}();
var $author$project$Api$Endpoint$households = A2(
	$author$project$Api$Endpoint$url,
	_List_fromArray(
		['school', 'households']),
	_List_Nil);
var $author$project$Pages$Households$HouseholdsPage$fetchHouseholds = function (session) {
	return A2(
		$elm$core$Platform$Cmd$map,
		$author$project$Pages$Households$HouseholdsPage$StudentsResponse,
		A3(
			$author$project$Api$get,
			session,
			$author$project$Api$Endpoint$households,
			$elm$json$Json$Decode$list($author$project$Models$Household$householdDecoder)));
};
var $author$project$Pages$Households$HouseholdsPage$init = function (session) {
	return _Utils_Tuple2(
		A2($author$project$Pages$Households$HouseholdsPage$Model, session, $krisajenkins$remotedata$RemoteData$Loading),
		$author$project$Pages$Households$HouseholdsPage$fetchHouseholds(session));
};
var $author$project$Pages$Login$Model = F5(
	function (session, form, error, message, status) {
		return {error: error, form: form, message: message, session: session, status: status};
	});
var $author$project$Pages$Login$init = F2(
	function (session, redirect) {
		var message = function () {
			if (redirect.$ === 'Nothing') {
				return $elm$core$Maybe$Nothing;
			} else {
				var _v1 = redirect.a;
				return $elm$core$Maybe$Just('We have sent you an email, please verify your account before logging in');
			}
		}();
		return _Utils_Tuple2(
			A5(
				$author$project$Pages$Login$Model,
				session,
				{email: '', password: ''},
				$elm$core$Maybe$Nothing,
				message,
				$krisajenkins$remotedata$RemoteData$NotAsked),
			$elm$core$Platform$Cmd$none);
	});
var $author$project$Pages$Logout$Model = function (session) {
	return {session: session};
};
var $elm$core$Maybe$destruct = F3(
	function (_default, func, maybe) {
		if (maybe.$ === 'Just') {
			var a = maybe.a;
			return func(a);
		} else {
			return _default;
		}
	});
var $elm$json$Json$Encode$float = _Json_wrap;
var $author$project$Models$Location$setSchoolLocation = _Platform_outgoingPort(
	'setSchoolLocation',
	function ($) {
		return A3(
			$elm$core$Maybe$destruct,
			$elm$json$Json$Encode$null,
			function ($) {
				return $elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'lat',
							$elm$json$Json$Encode$float($.lat)),
							_Utils_Tuple2(
							'lng',
							$elm$json$Json$Encode$float($.lng))
						]));
			},
			$);
	});
var $author$project$Models$Location$clearSchoolLocation = $author$project$Models$Location$setSchoolLocation($elm$core$Maybe$Nothing);
var $author$project$Api$storeCache = _Platform_outgoingPort(
	'storeCache',
	function ($) {
		return A3($elm$core$Maybe$destruct, $elm$json$Json$Encode$null, $elm$core$Basics$identity, $);
	});
var $author$project$Api$logout = $elm$core$Platform$Cmd$batch(
	_List_fromArray(
		[
			$author$project$Api$storeCache($elm$core$Maybe$Nothing),
			$author$project$Models$Location$clearSchoolLocation
		]));
var $author$project$Pages$Logout$init = function (session) {
	return _Utils_Tuple2(
		$author$project$Pages$Logout$Model(session),
		$author$project$Api$logout);
};
var $author$project$Pages$Routes$Routes$Model = F3(
	function (session, routes, filterText) {
		return {filterText: filterText, routes: routes, session: session};
	});
var $author$project$Pages$Routes$Routes$init = function (session) {
	return _Utils_Tuple2(
		A3($author$project$Pages$Routes$Routes$Model, session, $krisajenkins$remotedata$RemoteData$NotAsked, ''),
		$elm$core$Platform$Cmd$batch(
			_List_fromArray(
				[
					$author$project$Ports$initializeMaps(false)
				])));
};
var $author$project$Pages$Signup$Email = function (a) {
	return {$: 'Email', a: a};
};
var $author$project$Pages$Signup$ManagerDetails = {$: 'ManagerDetails'};
var $author$project$Pages$Signup$Model = F4(
	function (session, form, status, loadingGeocode) {
		return {form: form, loadingGeocode: loadingGeocode, session: session, status: status};
	});
var $author$project$Pages$Signup$Name = function (a) {
	return {$: 'Name', a: a};
};
var $author$project$Pages$Signup$Password = function (a) {
	return {$: 'Password', a: a};
};
var $author$project$Pages$Signup$init = function (session) {
	return _Utils_Tuple2(
		A4(
			$author$project$Pages$Signup$Model,
			session,
			{
				manager: {
					email: $author$project$Pages$Signup$Email(''),
					firstName: $author$project$Pages$Signup$Name(''),
					lastName: $author$project$Pages$Signup$Name(''),
					password: $author$project$Pages$Signup$Password('')
				},
				page: $author$project$Pages$Signup$ManagerDetails,
				problems: _List_Nil,
				school: {
					location: $elm$core$Maybe$Nothing,
					schoolName: $author$project$Pages$Signup$Name('')
				}
			},
			$krisajenkins$remotedata$RemoteData$NotAsked,
			false),
		$elm$core$Platform$Cmd$none);
};
var $author$project$Template$NavBar$maxHeight = 70;
var $author$project$Template$TabBar$maxHeight = 50;
var $author$project$Page$viewHeight = function (pageHeight) {
	return (pageHeight - $author$project$Template$NavBar$maxHeight) - $author$project$Template$TabBar$maxHeight;
};
var $author$project$Main$changeRouteWithUpdatedSessionTo = F3(
	function (maybeRoute, model, session) {
		var updateWith = F3(
			function (toModel, toMsg, _v15) {
				var subModel = _v15.a;
				var subCmd = _v15.b;
				return _Utils_Tuple2(
					toModel(subModel),
					A2($elm$core$Platform$Cmd$map, toMsg, subCmd));
			});
		var _v0 = function () {
			if (maybeRoute.$ === 'Nothing') {
				return _Utils_Tuple2(
					$author$project$Main$NotFound(session),
					$elm$core$Platform$Cmd$none);
			} else {
				switch (maybeRoute.a.$) {
					case 'Home':
						var _v2 = maybeRoute.a;
						return A3(
							updateWith,
							$author$project$Main$Home,
							$author$project$Main$GotHomeMsg,
							$author$project$Pages$Home$init(session));
					case 'Buses':
						var _v3 = maybeRoute.a;
						return A3(
							updateWith,
							$author$project$Main$BusesList,
							$author$project$Main$GotBusesListMsg,
							A3(
								$author$project$Pages$Buses$BusesPage$init,
								session,
								$author$project$Page$viewHeight(model.windowHeight),
								model.locationUpdates));
					case 'BusRegistration':
						var _v4 = maybeRoute.a;
						return A3(
							updateWith,
							$author$project$Main$BusRegistration,
							$author$project$Main$GotBusRegistrationMsg,
							$author$project$Pages$Buses$CreateBusPage$init(session));
					case 'BusDeviceRegistration':
						var busID = maybeRoute.a.a;
						return A3(
							updateWith,
							$author$project$Main$DeviceRegistration,
							$author$project$Main$GotDeviceRegistrationMsg,
							A2(
								$author$project$Pages$Devices$DeviceRegistrationPage$init,
								session,
								$elm$core$Maybe$Just(busID)));
					case 'Bus':
						var _v5 = maybeRoute.a;
						var busID = _v5.a;
						var preferredPage = _v5.b;
						return A3(
							updateWith,
							$author$project$Main$BusDetailsPage,
							$author$project$Main$GotBusDetailsPageMsg,
							A5(
								$author$project$Pages$Buses$BusPage$init,
								busID,
								session,
								$author$project$Page$viewHeight(model.windowHeight),
								A2($elm$core$Dict$get, busID, model.locationUpdates),
								preferredPage));
					case 'CreateBusRepair':
						var busID = maybeRoute.a.a;
						return A3(
							updateWith,
							$author$project$Main$CreateBusRepair,
							$author$project$Main$GotCreateBusRepairMsg,
							A3(
								$author$project$Pages$Buses$CreateBusRepairPage$init,
								busID,
								session,
								$author$project$Page$viewHeight(model.windowHeight)));
					case 'HouseholdList':
						var _v6 = maybeRoute.a;
						return A3(
							updateWith,
							$author$project$Main$HouseholdList,
							$author$project$Main$GotHouseholdListMsg,
							$author$project$Pages$Households$HouseholdsPage$init(session));
					case 'DeviceList':
						var _v7 = maybeRoute.a;
						return A3(
							updateWith,
							$author$project$Main$DevicesList,
							$author$project$Main$GotDevicesListMsg,
							$author$project$Pages$Devices$DevicesPage$init(session));
					case 'DeviceRegistration':
						var _v8 = maybeRoute.a;
						return A3(
							updateWith,
							$author$project$Main$DeviceRegistration,
							$author$project$Main$GotDeviceRegistrationMsg,
							A2($author$project$Pages$Devices$DeviceRegistrationPage$init, session, $elm$core$Maybe$Nothing));
					case 'StudentRegistration':
						var _v9 = maybeRoute.a;
						return A3(
							updateWith,
							$author$project$Main$StudentRegistration,
							$author$project$Main$GotStudentRegistrationMsg,
							$author$project$Pages$Households$HouseholdRegistrationPage$init(session));
					case 'Login':
						var redirect = maybeRoute.a.a;
						return A3(
							updateWith,
							$author$project$Main$Login,
							$author$project$Main$GotLoginMsg,
							A2($author$project$Pages$Login$init, session, redirect));
					case 'Logout':
						var _v10 = maybeRoute.a;
						return A3(
							updateWith,
							$author$project$Main$Logout,
							$author$project$Main$GotLogoutMsg,
							$author$project$Pages$Logout$init(session));
					case 'Signup':
						var _v11 = maybeRoute.a;
						return A3(
							updateWith,
							$author$project$Main$Signup,
							$author$project$Main$GotSignupMsg,
							$author$project$Pages$Signup$init(session));
					case 'Routes':
						var _v12 = maybeRoute.a;
						return A3(
							updateWith,
							$author$project$Main$RoutesList,
							$author$project$Main$GotRoutesListMsg,
							$author$project$Pages$Routes$Routes$init(session));
					case 'CrewMembers':
						var _v13 = maybeRoute.a;
						return A3(
							updateWith,
							$author$project$Main$CrewMembers,
							$author$project$Main$GotCrewMembersMsg,
							A2(
								$author$project$Pages$Crew$CrewMembersPage$init,
								session,
								$author$project$Page$viewHeight(model.windowHeight)));
					case 'CrewMemberRegistration':
						var _v14 = maybeRoute.a;
						return A3(
							updateWith,
							$author$project$Main$CrewMemberRegistration,
							$author$project$Main$GotCrewMemberRegistrationMsg,
							A2($author$project$Pages$Crew$CrewMemberRegistrationPage$init, session, $elm$core$Maybe$Nothing));
					default:
						var id = maybeRoute.a.a;
						return A3(
							updateWith,
							$author$project$Main$CrewMemberRegistration,
							$author$project$Main$GotCrewMemberRegistrationMsg,
							A2(
								$author$project$Pages$Crew$CrewMemberRegistrationPage$init,
								session,
								$elm$core$Maybe$Just(id)));
				}
			}
		}();
		var updatedPage = _v0.a;
		var msg = _v0.b;
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{page: updatedPage, route: maybeRoute}),
			msg);
	});
var $author$project$Main$toSession = function (pageModel) {
	switch (pageModel.$) {
		case 'Home':
			var home = pageModel.a;
			return home.session;
		case 'Logout':
			var model = pageModel.a;
			return model.session;
		case 'Login':
			var subModel = pageModel.a;
			return subModel.session;
		case 'Signup':
			var subModel = pageModel.a;
			return subModel.session;
		case 'Redirect':
			var session = pageModel.a;
			return session;
		case 'NotFound':
			var session = pageModel.a;
			return session;
		case 'HouseholdList':
			var subModel = pageModel.a;
			return subModel.session;
		case 'StudentRegistration':
			var subModel = pageModel.a;
			return subModel.session;
		case 'BusesList':
			var subModel = pageModel.a;
			return subModel.session;
		case 'BusRegistration':
			var subModel = pageModel.a;
			return subModel.session;
		case 'BusDetailsPage':
			var subModel = pageModel.a;
			return subModel.session;
		case 'DevicesList':
			var subModel = pageModel.a;
			return subModel.session;
		case 'DeviceRegistration':
			var subModel = pageModel.a;
			return subModel.session;
		case 'RoutesList':
			var subModel = pageModel.a;
			return subModel.session;
		case 'CrewMembers':
			var subModel = pageModel.a;
			return subModel.session;
		case 'CrewMemberRegistration':
			var subModel = pageModel.a;
			return subModel.session;
		default:
			var subModel = pageModel.a;
			return subModel.session;
	}
};
var $author$project$Main$changeRouteTo = F2(
	function (maybeRoute, model) {
		var session = $author$project$Main$toSession(model.page);
		return A3($author$project$Main$changeRouteWithUpdatedSessionTo, maybeRoute, model, session);
	});
var $author$project$Session$Cred = F4(
	function (name, email, token, school_id) {
		return {email: email, name: name, school_id: school_id, token: token};
	});
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt = F3(
	function (path, valDecoder, decoder) {
		return A2(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom,
			A2($elm$json$Json$Decode$at, path, valDecoder),
			decoder);
	});
var $author$project$Api$credDecoder = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
	_List_fromArray(
		['school_id']),
	$elm$json$Json$Decode$int,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
		_List_fromArray(
			['token']),
		$elm$json$Json$Decode$string,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
			_List_fromArray(
				['email']),
			$elm$json$Json$Decode$string,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
				_List_fromArray(
					['name']),
				$elm$json$Json$Decode$string,
				$elm$json$Json$Decode$succeed($author$project$Session$Cred)))));
var $author$project$Session$Guest = F2(
	function (a, b) {
		return {$: 'Guest', a: a, b: b};
	});
var $author$project$Session$LoggedIn = F3(
	function (a, b, c) {
		return {$: 'LoggedIn', a: a, b: b, c: c};
	});
var $author$project$Session$fromCredentials = F3(
	function (key, timezone, credentials_) {
		if (credentials_.$ === 'Nothing') {
			return A2($author$project$Session$Guest, key, timezone);
		} else {
			var credentials = credentials_.a;
			return A3($author$project$Session$LoggedIn, key, timezone, credentials);
		}
	});
var $author$project$Navigation$Buses = {$: 'Buses'};
var $author$project$Navigation$Login = function (a) {
	return {$: 'Login', a: a};
};
var $author$project$Session$isGuest = function (session) {
	return _Utils_eq(
		$author$project$Session$getCredentials(session),
		$elm$core$Maybe$Nothing);
};
var $author$project$Navigation$Bus = F2(
	function (a, b) {
		return {$: 'Bus', a: a, b: b};
	});
var $author$project$Navigation$BusDeviceRegistration = function (a) {
	return {$: 'BusDeviceRegistration', a: a};
};
var $author$project$Navigation$BusRegistration = {$: 'BusRegistration'};
var $author$project$Navigation$CreateBusRepair = function (a) {
	return {$: 'CreateBusRepair', a: a};
};
var $author$project$Navigation$CrewMemberRegistration = {$: 'CrewMemberRegistration'};
var $author$project$Navigation$CrewMembers = {$: 'CrewMembers'};
var $author$project$Navigation$DeviceList = {$: 'DeviceList'};
var $author$project$Navigation$DeviceRegistration = {$: 'DeviceRegistration'};
var $author$project$Navigation$EditCrewMember = function (a) {
	return {$: 'EditCrewMember', a: a};
};
var $author$project$Navigation$HouseholdList = {$: 'HouseholdList'};
var $author$project$Navigation$Routes = {$: 'Routes'};
var $author$project$Navigation$StudentRegistration = {$: 'StudentRegistration'};
var $elm$url$Url$Parser$Parser = function (a) {
	return {$: 'Parser', a: a};
};
var $elm$url$Url$Parser$State = F5(
	function (visited, unvisited, params, frag, value) {
		return {frag: frag, params: params, unvisited: unvisited, value: value, visited: visited};
	});
var $elm$url$Url$Parser$custom = F2(
	function (tipe, stringToSomething) {
		return $elm$url$Url$Parser$Parser(
			function (_v0) {
				var visited = _v0.visited;
				var unvisited = _v0.unvisited;
				var params = _v0.params;
				var frag = _v0.frag;
				var value = _v0.value;
				if (!unvisited.b) {
					return _List_Nil;
				} else {
					var next = unvisited.a;
					var rest = unvisited.b;
					var _v2 = stringToSomething(next);
					if (_v2.$ === 'Just') {
						var nextValue = _v2.a;
						return _List_fromArray(
							[
								A5(
								$elm$url$Url$Parser$State,
								A2($elm$core$List$cons, next, visited),
								rest,
								params,
								frag,
								value(nextValue))
							]);
					} else {
						return _List_Nil;
					}
				}
			});
	});
var $elm$url$Url$Parser$int = A2($elm$url$Url$Parser$custom, 'NUMBER', $elm$core$String$toInt);
var $elm$url$Url$Parser$mapState = F2(
	function (func, _v0) {
		var visited = _v0.visited;
		var unvisited = _v0.unvisited;
		var params = _v0.params;
		var frag = _v0.frag;
		var value = _v0.value;
		return A5(
			$elm$url$Url$Parser$State,
			visited,
			unvisited,
			params,
			frag,
			func(value));
	});
var $elm$url$Url$Parser$map = F2(
	function (subValue, _v0) {
		var parseArg = _v0.a;
		return $elm$url$Url$Parser$Parser(
			function (_v1) {
				var visited = _v1.visited;
				var unvisited = _v1.unvisited;
				var params = _v1.params;
				var frag = _v1.frag;
				var value = _v1.value;
				return A2(
					$elm$core$List$map,
					$elm$url$Url$Parser$mapState(value),
					parseArg(
						A5($elm$url$Url$Parser$State, visited, unvisited, params, frag, subValue)));
			});
	});
var $elm$url$Url$Parser$oneOf = function (parsers) {
	return $elm$url$Url$Parser$Parser(
		function (state) {
			return A2(
				$elm$core$List$concatMap,
				function (_v0) {
					var parser = _v0.a;
					return parser(state);
				},
				parsers);
		});
};
var $author$project$Navigation$routeName = function (page) {
	switch (page.$) {
		case 'Home':
			return '';
		case 'Login':
			return 'login';
		case 'Logout':
			return 'logout';
		case 'Signup':
			return 'signup';
		case 'HouseholdList':
			return 'students';
		case 'DeviceList':
			return 'devices';
		case 'DeviceRegistration':
			return 'new';
		case 'BusDeviceRegistration':
			return 'register_device';
		case 'StudentRegistration':
			return 'new';
		case 'Buses':
			return 'fleet';
		case 'Bus':
			return 'fleet';
		case 'BusRegistration':
			return 'new';
		case 'CreateBusRepair':
			return 'new';
		case 'Routes':
			return 'routes';
		case 'CrewMembers':
			return 'crew';
		case 'CrewMemberRegistration':
			return 'new';
		default:
			return 'edit';
	}
};
var $elm$url$Url$Parser$s = function (str) {
	return $elm$url$Url$Parser$Parser(
		function (_v0) {
			var visited = _v0.visited;
			var unvisited = _v0.unvisited;
			var params = _v0.params;
			var frag = _v0.frag;
			var value = _v0.value;
			if (!unvisited.b) {
				return _List_Nil;
			} else {
				var next = unvisited.a;
				var rest = unvisited.b;
				return _Utils_eq(next, str) ? _List_fromArray(
					[
						A5(
						$elm$url$Url$Parser$State,
						A2($elm$core$List$cons, next, visited),
						rest,
						params,
						frag,
						value)
					]) : _List_Nil;
			}
		});
};
var $author$project$Navigation$buildParser = function (route) {
	return A2(
		$elm$url$Url$Parser$map,
		route,
		$elm$url$Url$Parser$s(
			$author$project$Navigation$routeName(route)));
};
var $author$project$Navigation$parsersFor = function (routes) {
	return A2($elm$core$List$map, $author$project$Navigation$buildParser, routes);
};
var $elm$url$Url$Parser$slash = F2(
	function (_v0, _v1) {
		var parseBefore = _v0.a;
		var parseAfter = _v1.a;
		return $elm$url$Url$Parser$Parser(
			function (state) {
				return A2(
					$elm$core$List$concatMap,
					parseAfter,
					parseBefore(state));
			});
	});
var $author$project$Navigation$parsersFor2 = function (routes) {
	return A2(
		$elm$core$List$map,
		function (r) {
			return A2(
				$elm$url$Url$Parser$map,
				r.b,
				A2(
					$elm$url$Url$Parser$slash,
					$elm$url$Url$Parser$s(
						$author$project$Navigation$routeName(r.a)),
					$elm$url$Url$Parser$s(
						$author$project$Navigation$routeName(r.b))));
		},
		routes);
};
var $elm$url$Url$Parser$string = A2($elm$url$Url$Parser$custom, 'STRING', $elm$core$Maybe$Just);
var $elm$url$Url$Parser$top = $elm$url$Url$Parser$Parser(
	function (state) {
		return _List_fromArray(
			[state]);
	});
var $author$project$Navigation$loggedInParser = $elm$url$Url$Parser$oneOf(
	A2(
		$elm$core$List$cons,
		A2($elm$url$Url$Parser$map, $author$project$Navigation$Buses, $elm$url$Url$Parser$top),
		_Utils_ap(
			$author$project$Navigation$parsersFor(
				_List_fromArray(
					[$author$project$Navigation$Buses, $author$project$Navigation$Routes, $author$project$Navigation$HouseholdList, $author$project$Navigation$DeviceList, $author$project$Navigation$CrewMembers])),
			_Utils_ap(
				$author$project$Navigation$parsersFor2(
					_List_fromArray(
						[
							_Utils_Tuple2($author$project$Navigation$HouseholdList, $author$project$Navigation$StudentRegistration),
							_Utils_Tuple2($author$project$Navigation$CrewMembers, $author$project$Navigation$CrewMemberRegistration),
							_Utils_Tuple2($author$project$Navigation$Buses, $author$project$Navigation$BusRegistration),
							_Utils_Tuple2($author$project$Navigation$DeviceList, $author$project$Navigation$DeviceRegistration)
						])),
				_List_fromArray(
					[
						A2(
						$elm$url$Url$Parser$map,
						$author$project$Navigation$CreateBusRepair,
						A2(
							$elm$url$Url$Parser$slash,
							$elm$url$Url$Parser$s(
								$author$project$Navigation$routeName($author$project$Navigation$Buses)),
							A2(
								$elm$url$Url$Parser$slash,
								$elm$url$Url$Parser$int,
								A2(
									$elm$url$Url$Parser$slash,
									$elm$url$Url$Parser$s('maintenance'),
									$elm$url$Url$Parser$s('new'))))),
						A2(
						$elm$url$Url$Parser$map,
						F2(
							function (a, b) {
								return A2(
									$author$project$Navigation$Bus,
									a,
									$elm$core$Maybe$Just(b));
							}),
						A2(
							$elm$url$Url$Parser$slash,
							$elm$url$Url$Parser$s(
								$author$project$Navigation$routeName($author$project$Navigation$Buses)),
							A2($elm$url$Url$Parser$slash, $elm$url$Url$Parser$int, $elm$url$Url$Parser$string))),
						A2(
						$elm$url$Url$Parser$map,
						function (a) {
							return A2($author$project$Navigation$Bus, a, $elm$core$Maybe$Nothing);
						},
						A2(
							$elm$url$Url$Parser$slash,
							$elm$url$Url$Parser$s(
								$author$project$Navigation$routeName($author$project$Navigation$Buses)),
							$elm$url$Url$Parser$int)),
						A2(
						$elm$url$Url$Parser$map,
						$author$project$Navigation$EditCrewMember,
						A2(
							$elm$url$Url$Parser$slash,
							$elm$url$Url$Parser$s(
								$author$project$Navigation$routeName($author$project$Navigation$CrewMembers)),
							A2(
								$elm$url$Url$Parser$slash,
								$elm$url$Url$Parser$int,
								$elm$url$Url$Parser$s('edit')))),
						A2(
						$elm$url$Url$Parser$map,
						$author$project$Navigation$BusDeviceRegistration,
						A2(
							$elm$url$Url$Parser$slash,
							$elm$url$Url$Parser$s(
								$author$project$Navigation$routeName($author$project$Navigation$Buses)),
							A2(
								$elm$url$Url$Parser$slash,
								$elm$url$Url$Parser$int,
								$elm$url$Url$Parser$s(
									$author$project$Navigation$routeName(
										$author$project$Navigation$BusDeviceRegistration(-1))))))
					])))));
var $author$project$Navigation$Signup = {$: 'Signup'};
var $author$project$Navigation$ConfirmEmail = {$: 'ConfirmEmail'};
var $author$project$Navigation$stringToLoginRedirect = function (string) {
	if (string === 'confirmEmail') {
		return $elm$core$Maybe$Just($author$project$Navigation$ConfirmEmail);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Navigation$loginUrlParser = A2(
	$elm$url$Url$Parser$custom,
	'loginUrlParser',
	A2($elm$core$Basics$composeR, $author$project$Navigation$stringToLoginRedirect, $elm$core$Maybe$Just));
var $author$project$Navigation$notLoggedInParser = $elm$url$Url$Parser$oneOf(
	_List_fromArray(
		[
			$author$project$Navigation$buildParser(
			$author$project$Navigation$Login($elm$core$Maybe$Nothing)),
			A2(
			$elm$url$Url$Parser$map,
			$author$project$Navigation$Login,
			A2(
				$elm$url$Url$Parser$slash,
				$elm$url$Url$Parser$s(
					$author$project$Navigation$routeName(
						$author$project$Navigation$Login($elm$core$Maybe$Nothing))),
				$author$project$Navigation$loginUrlParser)),
			$author$project$Navigation$buildParser($author$project$Navigation$Signup)
		]));
var $elm$url$Url$Parser$getFirstMatch = function (states) {
	getFirstMatch:
	while (true) {
		if (!states.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			var state = states.a;
			var rest = states.b;
			var _v1 = state.unvisited;
			if (!_v1.b) {
				return $elm$core$Maybe$Just(state.value);
			} else {
				if ((_v1.a === '') && (!_v1.b.b)) {
					return $elm$core$Maybe$Just(state.value);
				} else {
					var $temp$states = rest;
					states = $temp$states;
					continue getFirstMatch;
				}
			}
		}
	}
};
var $elm$url$Url$Parser$removeFinalEmpty = function (segments) {
	if (!segments.b) {
		return _List_Nil;
	} else {
		if ((segments.a === '') && (!segments.b.b)) {
			return _List_Nil;
		} else {
			var segment = segments.a;
			var rest = segments.b;
			return A2(
				$elm$core$List$cons,
				segment,
				$elm$url$Url$Parser$removeFinalEmpty(rest));
		}
	}
};
var $elm$url$Url$Parser$preparePath = function (path) {
	var _v0 = A2($elm$core$String$split, '/', path);
	if (_v0.b && (_v0.a === '')) {
		var segments = _v0.b;
		return $elm$url$Url$Parser$removeFinalEmpty(segments);
	} else {
		var segments = _v0;
		return $elm$url$Url$Parser$removeFinalEmpty(segments);
	}
};
var $elm$url$Url$Parser$addToParametersHelp = F2(
	function (value, maybeList) {
		if (maybeList.$ === 'Nothing') {
			return $elm$core$Maybe$Just(
				_List_fromArray(
					[value]));
		} else {
			var list = maybeList.a;
			return $elm$core$Maybe$Just(
				A2($elm$core$List$cons, value, list));
		}
	});
var $elm$url$Url$percentDecode = _Url_percentDecode;
var $elm$url$Url$Parser$addParam = F2(
	function (segment, dict) {
		var _v0 = A2($elm$core$String$split, '=', segment);
		if ((_v0.b && _v0.b.b) && (!_v0.b.b.b)) {
			var rawKey = _v0.a;
			var _v1 = _v0.b;
			var rawValue = _v1.a;
			var _v2 = $elm$url$Url$percentDecode(rawKey);
			if (_v2.$ === 'Nothing') {
				return dict;
			} else {
				var key = _v2.a;
				var _v3 = $elm$url$Url$percentDecode(rawValue);
				if (_v3.$ === 'Nothing') {
					return dict;
				} else {
					var value = _v3.a;
					return A3(
						$elm$core$Dict$update,
						key,
						$elm$url$Url$Parser$addToParametersHelp(value),
						dict);
				}
			}
		} else {
			return dict;
		}
	});
var $elm$url$Url$Parser$prepareQuery = function (maybeQuery) {
	if (maybeQuery.$ === 'Nothing') {
		return $elm$core$Dict$empty;
	} else {
		var qry = maybeQuery.a;
		return A3(
			$elm$core$List$foldr,
			$elm$url$Url$Parser$addParam,
			$elm$core$Dict$empty,
			A2($elm$core$String$split, '&', qry));
	}
};
var $elm$url$Url$Parser$parse = F2(
	function (_v0, url) {
		var parser = _v0.a;
		return $elm$url$Url$Parser$getFirstMatch(
			parser(
				A5(
					$elm$url$Url$Parser$State,
					_List_Nil,
					$elm$url$Url$Parser$preparePath(url.path),
					$elm$url$Url$Parser$prepareQuery(url.query),
					url.fragment,
					$elm$core$Basics$identity)));
	});
var $author$project$Navigation$parseUrl = function (url) {
	var parts = function () {
		var _v0 = url.fragment;
		if (_v0.$ === 'Just') {
			var fragment = _v0.a;
			return A2($elm$core$String$split, '?', fragment);
		} else {
			return _List_fromArray(
				['', '']);
		}
	}();
	var path = A2(
		$elm$core$Maybe$withDefault,
		'',
		$elm$core$List$head(parts));
	var query = A2(
		$elm$core$Maybe$withDefault,
		'',
		$elm$core$List$head(
			A2($elm$core$List$drop, 1, parts)));
	return _Utils_update(
		url,
		{
			fragment: $elm$core$Maybe$Nothing,
			path: path,
			query: $elm$core$Maybe$Just(query)
		});
};
var $author$project$Navigation$publicParser = $elm$url$Url$Parser$oneOf(_List_Nil);
var $author$project$Navigation$fromUrl = F2(
	function (url, session) {
		var newUrl = $author$project$Navigation$parseUrl(url);
		var publicRoute = A2($elm$url$Url$Parser$parse, $author$project$Navigation$publicParser, newUrl);
		var loggedInRoute = A2($elm$url$Url$Parser$parse, $author$project$Navigation$loggedInParser, newUrl);
		var guestRoute = A2($elm$url$Url$Parser$parse, $author$project$Navigation$notLoggedInParser, newUrl);
		if (!_Utils_eq(publicRoute, $elm$core$Maybe$Nothing)) {
			return publicRoute;
		} else {
			if ($author$project$Session$isGuest(session)) {
				var _v0 = _Utils_Tuple2(guestRoute, loggedInRoute);
				if (_v0.a.$ === 'Just') {
					var matchedGuestRoute = _v0.a.a;
					return $elm$core$Maybe$Just(matchedGuestRoute);
				} else {
					if (_v0.b.$ === 'Just') {
						return $elm$core$Maybe$Just(
							$author$project$Navigation$Login($elm$core$Maybe$Nothing));
					} else {
						var _v1 = _v0.a;
						var _v2 = _v0.b;
						return $elm$core$Maybe$Nothing;
					}
				}
			} else {
				var _v3 = _Utils_Tuple2(guestRoute, loggedInRoute);
				if (_v3.a.$ === 'Just') {
					return $elm$core$Maybe$Just($author$project$Navigation$Buses);
				} else {
					if (_v3.b.$ === 'Just') {
						var matchedLoggedInRoute = _v3.b.a;
						return $elm$core$Maybe$Just(matchedLoggedInRoute);
					} else {
						var _v4 = _v3.a;
						var _v5 = _v3.b;
						return $elm$core$Maybe$Nothing;
					}
				}
			}
		}
	});
var $elm$time$Time$Name = function (a) {
	return {$: 'Name', a: a};
};
var $elm$time$Time$Offset = function (a) {
	return {$: 'Offset', a: a};
};
var $elm$time$Time$Zone = F2(
	function (a, b) {
		return {$: 'Zone', a: a, b: b};
	});
var $elm$time$Time$customZone = $elm$time$Time$Zone;
var $elm$time$Time$here = _Time_here(_Utils_Tuple0);
var $author$project$Template$NavBar$Model = function (a) {
	return {$: 'Model', a: a};
};
var $author$project$Template$NavBar$init = function (session) {
	return $author$project$Template$NavBar$Model(
		{dropdownVisible: false, session: session});
};
var $elm$time$Time$utc = A2($elm$time$Time$Zone, 0, _List_Nil);
var $author$project$Main$init = F3(
	function (args, url, navKey) {
		var height = A2(
			$elm$core$Maybe$withDefault,
			100,
			A2(
				$elm$core$Maybe$andThen,
				function (x) {
					var _v2 = A2(
						$elm$json$Json$Decode$decodeValue,
						A2(
							$elm$json$Json$Decode$at,
							_List_fromArray(
								['window', 'height']),
							$elm$json$Json$Decode$int),
						x);
					if (_v2.$ === 'Ok') {
						var a = _v2.a;
						return $elm$core$Maybe$Just(a);
					} else {
						return $elm$core$Maybe$Nothing;
					}
				},
				args));
		var creds = A2(
			$elm$core$Maybe$andThen,
			function (x) {
				var _v1 = A2(
					$elm$json$Json$Decode$decodeValue,
					A2(
						$elm$json$Json$Decode$at,
						_List_fromArray(
							['credentials']),
						$author$project$Api$credDecoder),
					x);
				if (_v1.$ === 'Ok') {
					var a = _v1.a;
					return $elm$core$Maybe$Just(a);
				} else {
					return $elm$core$Maybe$Nothing;
				}
			},
			args);
		var session = A3($author$project$Session$fromCredentials, navKey, $elm$time$Time$utc, creds);
		var _v0 = A2(
			$author$project$Main$changeRouteTo,
			A2($author$project$Navigation$fromUrl, url, session),
			{
				allowReroute: true,
				locationUpdates: $elm$core$Dict$fromList(_List_Nil),
				navState: $author$project$Template$NavBar$init(session),
				page: $author$project$Main$Redirect(session),
				route: $elm$core$Maybe$Nothing,
				url: url,
				windowHeight: height
			});
		var model = _v0.a;
		var cmds = _v0.b;
		return _Utils_Tuple2(
			model,
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						A2($elm$core$Task$perform, $author$project$Main$UpdatedTimeZone, $elm$time$Time$here)
					])));
	});
var $author$project$Main$BusMoved = function (a) {
	return {$: 'BusMoved', a: a};
};
var $author$project$Main$ReceivedCreds = function (a) {
	return {$: 'ReceivedCreds', a: a};
};
var $author$project$Main$WindowResized = F2(
	function (a, b) {
		return {$: 'WindowResized', a: a, b: b};
	});
var $elm$core$Platform$Sub$batch = _Platform_batch;
var $elm$core$Platform$Sub$none = $elm$core$Platform$Sub$batch(_List_Nil);
var $author$project$Ports$onBusMove = _Platform_incomingPort(
	'onBusMove',
	A2(
		$elm$json$Json$Decode$andThen,
		function (speed) {
			return A2(
				$elm$json$Json$Decode$andThen,
				function (location) {
					return A2(
						$elm$json$Json$Decode$andThen,
						function (bus) {
							return A2(
								$elm$json$Json$Decode$andThen,
								function (bearing) {
									return $elm$json$Json$Decode$succeed(
										{bearing: bearing, bus: bus, location: location, speed: speed});
								},
								A2($elm$json$Json$Decode$field, 'bearing', $elm$json$Json$Decode$float));
						},
						A2($elm$json$Json$Decode$field, 'bus', $elm$json$Json$Decode$int));
				},
				A2(
					$elm$json$Json$Decode$field,
					'location',
					A2(
						$elm$json$Json$Decode$andThen,
						function (lng) {
							return A2(
								$elm$json$Json$Decode$andThen,
								function (lat) {
									return $elm$json$Json$Decode$succeed(
										{lat: lat, lng: lng});
								},
								A2($elm$json$Json$Decode$field, 'lat', $elm$json$Json$Decode$float));
						},
						A2($elm$json$Json$Decode$field, 'lng', $elm$json$Json$Decode$float))));
		},
		A2($elm$json$Json$Decode$field, 'speed', $elm$json$Json$Decode$float)));
var $elm$browser$Browser$Events$Window = {$: 'Window'};
var $elm$browser$Browser$Events$MySub = F3(
	function (a, b, c) {
		return {$: 'MySub', a: a, b: b, c: c};
	});
var $elm$browser$Browser$Events$State = F2(
	function (subs, pids) {
		return {pids: pids, subs: subs};
	});
var $elm$browser$Browser$Events$init = $elm$core$Task$succeed(
	A2($elm$browser$Browser$Events$State, _List_Nil, $elm$core$Dict$empty));
var $elm$browser$Browser$Events$nodeToKey = function (node) {
	if (node.$ === 'Document') {
		return 'd_';
	} else {
		return 'w_';
	}
};
var $elm$browser$Browser$Events$addKey = function (sub) {
	var node = sub.a;
	var name = sub.b;
	return _Utils_Tuple2(
		_Utils_ap(
			$elm$browser$Browser$Events$nodeToKey(node),
			name),
		sub);
};
var $elm$core$Process$kill = _Scheduler_kill;
var $elm$browser$Browser$Events$Event = F2(
	function (key, event) {
		return {event: event, key: key};
	});
var $elm$core$Platform$sendToSelf = _Platform_sendToSelf;
var $elm$browser$Browser$Events$spawn = F3(
	function (router, key, _v0) {
		var node = _v0.a;
		var name = _v0.b;
		var actualNode = function () {
			if (node.$ === 'Document') {
				return _Browser_doc;
			} else {
				return _Browser_window;
			}
		}();
		return A2(
			$elm$core$Task$map,
			function (value) {
				return _Utils_Tuple2(key, value);
			},
			A3(
				_Browser_on,
				actualNode,
				name,
				function (event) {
					return A2(
						$elm$core$Platform$sendToSelf,
						router,
						A2($elm$browser$Browser$Events$Event, key, event));
				}));
	});
var $elm$core$Dict$union = F2(
	function (t1, t2) {
		return A3($elm$core$Dict$foldl, $elm$core$Dict$insert, t2, t1);
	});
var $elm$browser$Browser$Events$onEffects = F3(
	function (router, subs, state) {
		var stepRight = F3(
			function (key, sub, _v6) {
				var deads = _v6.a;
				var lives = _v6.b;
				var news = _v6.c;
				return _Utils_Tuple3(
					deads,
					lives,
					A2(
						$elm$core$List$cons,
						A3($elm$browser$Browser$Events$spawn, router, key, sub),
						news));
			});
		var stepLeft = F3(
			function (_v4, pid, _v5) {
				var deads = _v5.a;
				var lives = _v5.b;
				var news = _v5.c;
				return _Utils_Tuple3(
					A2($elm$core$List$cons, pid, deads),
					lives,
					news);
			});
		var stepBoth = F4(
			function (key, pid, _v2, _v3) {
				var deads = _v3.a;
				var lives = _v3.b;
				var news = _v3.c;
				return _Utils_Tuple3(
					deads,
					A3($elm$core$Dict$insert, key, pid, lives),
					news);
			});
		var newSubs = A2($elm$core$List$map, $elm$browser$Browser$Events$addKey, subs);
		var _v0 = A6(
			$elm$core$Dict$merge,
			stepLeft,
			stepBoth,
			stepRight,
			state.pids,
			$elm$core$Dict$fromList(newSubs),
			_Utils_Tuple3(_List_Nil, $elm$core$Dict$empty, _List_Nil));
		var deadPids = _v0.a;
		var livePids = _v0.b;
		var makeNewPids = _v0.c;
		return A2(
			$elm$core$Task$andThen,
			function (pids) {
				return $elm$core$Task$succeed(
					A2(
						$elm$browser$Browser$Events$State,
						newSubs,
						A2(
							$elm$core$Dict$union,
							livePids,
							$elm$core$Dict$fromList(pids))));
			},
			A2(
				$elm$core$Task$andThen,
				function (_v1) {
					return $elm$core$Task$sequence(makeNewPids);
				},
				$elm$core$Task$sequence(
					A2($elm$core$List$map, $elm$core$Process$kill, deadPids))));
	});
var $elm$browser$Browser$Events$onSelfMsg = F3(
	function (router, _v0, state) {
		var key = _v0.key;
		var event = _v0.event;
		var toMessage = function (_v2) {
			var subKey = _v2.a;
			var _v3 = _v2.b;
			var node = _v3.a;
			var name = _v3.b;
			var decoder = _v3.c;
			return _Utils_eq(subKey, key) ? A2(_Browser_decodeEvent, decoder, event) : $elm$core$Maybe$Nothing;
		};
		var messages = A2($elm$core$List$filterMap, toMessage, state.subs);
		return A2(
			$elm$core$Task$andThen,
			function (_v1) {
				return $elm$core$Task$succeed(state);
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Platform$sendToApp(router),
					messages)));
	});
var $elm$browser$Browser$Events$subMap = F2(
	function (func, _v0) {
		var node = _v0.a;
		var name = _v0.b;
		var decoder = _v0.c;
		return A3(
			$elm$browser$Browser$Events$MySub,
			node,
			name,
			A2($elm$json$Json$Decode$map, func, decoder));
	});
_Platform_effectManagers['Browser.Events'] = _Platform_createManager($elm$browser$Browser$Events$init, $elm$browser$Browser$Events$onEffects, $elm$browser$Browser$Events$onSelfMsg, 0, $elm$browser$Browser$Events$subMap);
var $elm$browser$Browser$Events$subscription = _Platform_leaf('Browser.Events');
var $elm$browser$Browser$Events$on = F3(
	function (node, name, decoder) {
		return $elm$browser$Browser$Events$subscription(
			A3($elm$browser$Browser$Events$MySub, node, name, decoder));
	});
var $elm$browser$Browser$Events$onResize = function (func) {
	return A3(
		$elm$browser$Browser$Events$on,
		$elm$browser$Browser$Events$Window,
		'resize',
		A2(
			$elm$json$Json$Decode$field,
			'target',
			A3(
				$elm$json$Json$Decode$map2,
				func,
				A2($elm$json$Json$Decode$field, 'innerWidth', $elm$json$Json$Decode$int),
				A2($elm$json$Json$Decode$field, 'innerHeight', $elm$json$Json$Decode$int))));
};
var $author$project$Api$onStoreChange = _Platform_incomingPort(
	'onStoreChange',
	$elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				$elm$json$Json$Decode$null($elm$core$Maybe$Nothing),
				A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, $elm$json$Json$Decode$value)
			])));
var $author$project$Api$parseCreds = function (maybeCreds) {
	return A2(
		$elm$core$Maybe$andThen,
		function (aCred) {
			var _v0 = A2($elm$json$Json$Decode$decodeValue, $author$project$Api$credDecoder, aCred);
			if (_v0.$ === 'Err') {
				var e = _v0.a;
				return $elm$core$Maybe$Nothing;
			} else {
				var resolvedCred = _v0.a;
				return $elm$core$Maybe$Just(resolvedCred);
			}
		},
		maybeCreds);
};
var $author$project$Pages$Buses$BusPage$MapReady = function (a) {
	return {$: 'MapReady', a: a};
};
var $elm$json$Json$Decode$bool = _Json_decodeBool;
var $author$project$Ports$mapReady = _Platform_incomingPort('mapReady', $elm$json$Json$Decode$bool);
var $author$project$Pages$Buses$BusPage$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$author$project$Ports$mapReady($author$project$Pages$Buses$BusPage$MapReady)
			]));
};
var $author$project$Pages$Buses$BusesPage$MapReady = function (a) {
	return {$: 'MapReady', a: a};
};
var $author$project$Pages$Buses$BusesPage$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$author$project$Ports$mapReady($author$project$Pages$Buses$BusesPage$MapReady)
			]));
};
var $author$project$Pages$Devices$DeviceRegistrationPage$CameraOpened = function (a) {
	return {$: 'CameraOpened', a: a};
};
var $author$project$Pages$Devices$DeviceRegistrationPage$GotCameraNotFoundError = {$: 'GotCameraNotFoundError'};
var $author$project$Pages$Devices$DeviceRegistrationPage$ReceivedCode = function (a) {
	return {$: 'ReceivedCode', a: a};
};
var $author$project$Ports$noCameraFoundError = _Platform_incomingPort('noCameraFoundError', $elm$json$Json$Decode$bool);
var $author$project$Ports$receiveCameraActive = _Platform_incomingPort('receiveCameraActive', $elm$json$Json$Decode$bool);
var $author$project$Ports$scannedDeviceCode = _Platform_incomingPort('scannedDeviceCode', $elm$json$Json$Decode$string);
var $author$project$Pages$Devices$DeviceRegistrationPage$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$author$project$Ports$receiveCameraActive($author$project$Pages$Devices$DeviceRegistrationPage$CameraOpened),
				$author$project$Ports$scannedDeviceCode($author$project$Pages$Devices$DeviceRegistrationPage$ReceivedCode),
				$author$project$Ports$noCameraFoundError(
				function (_v0) {
					return $author$project$Pages$Devices$DeviceRegistrationPage$GotCameraNotFoundError;
				})
			]));
};
var $author$project$Pages$Signup$LocationSelected = function (a) {
	return {$: 'LocationSelected', a: a};
};
var $author$project$Ports$receivedMapClickLocation = _Platform_incomingPort(
	'receivedMapClickLocation',
	$elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				$elm$json$Json$Decode$null($elm$core$Maybe$Nothing),
				A2(
				$elm$json$Json$Decode$map,
				$elm$core$Maybe$Just,
				A2(
					$elm$json$Json$Decode$andThen,
					function (radius) {
						return A2(
							$elm$json$Json$Decode$andThen,
							function (lng) {
								return A2(
									$elm$json$Json$Decode$andThen,
									function (lat) {
										return $elm$json$Json$Decode$succeed(
											{lat: lat, lng: lng, radius: radius});
									},
									A2($elm$json$Json$Decode$field, 'lat', $elm$json$Json$Decode$float));
							},
							A2($elm$json$Json$Decode$field, 'lng', $elm$json$Json$Decode$float));
					},
					A2($elm$json$Json$Decode$field, 'radius', $elm$json$Json$Decode$float)))
			])));
var $author$project$Pages$Signup$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$author$project$Ports$receivedMapClickLocation($author$project$Pages$Signup$LocationSelected)
			]));
};
var $author$project$Main$subscriptions = function (model_) {
	var matching = function () {
		var _v0 = model_.page;
		switch (_v0.$) {
			case 'DeviceRegistration':
				var model = _v0.a;
				return A2(
					$elm$core$Platform$Sub$map,
					$author$project$Main$GotDeviceRegistrationMsg,
					$author$project$Pages$Devices$DeviceRegistrationPage$subscriptions(model));
			case 'Signup':
				var model = _v0.a;
				return A2(
					$elm$core$Platform$Sub$map,
					$author$project$Main$GotSignupMsg,
					$author$project$Pages$Signup$subscriptions(model));
			case 'BusesList':
				var model = _v0.a;
				return A2(
					$elm$core$Platform$Sub$map,
					$author$project$Main$GotBusesListMsg,
					$author$project$Pages$Buses$BusesPage$subscriptions(model));
			case 'BusDetailsPage':
				var model = _v0.a;
				return A2(
					$elm$core$Platform$Sub$map,
					$author$project$Main$GotBusDetailsPageMsg,
					$author$project$Pages$Buses$BusPage$subscriptions(model));
			default:
				return $elm$core$Platform$Sub$none;
		}
	}();
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				matching,
				$author$project$Api$onStoreChange(
				A2($elm$core$Basics$composeR, $author$project$Api$parseCreds, $author$project$Main$ReceivedCreds)),
				$elm$browser$Browser$Events$onResize($author$project$Main$WindowResized),
				$author$project$Ports$onBusMove($author$project$Main$BusMoved)
			]));
};
var $author$project$Navigation$isSamePage = F2(
	function (url1, url2) {
		var _v0 = _Utils_Tuple2(
			A2(
				$elm$url$Url$Parser$parse,
				$author$project$Navigation$loggedInParser,
				$author$project$Navigation$parseUrl(url1)),
			A2(
				$elm$url$Url$Parser$parse,
				$author$project$Navigation$loggedInParser,
				$author$project$Navigation$parseUrl(url2)));
		if ((((_v0.a.$ === 'Just') && (_v0.a.a.$ === 'Bus')) && (_v0.b.$ === 'Just')) && (_v0.b.a.$ === 'Bus')) {
			var _v1 = _v0.a.a;
			var a = _v1.a;
			var _v2 = _v0.b.a;
			var b = _v2.a;
			return _Utils_eq(a, b);
		} else {
			var a = _v0.a;
			var b = _v0.b;
			return _Utils_eq(a, b);
		}
	});
var $elm$browser$Browser$Navigation$load = _Browser_load;
var $author$project$Session$navKey = function (session) {
	if (session.$ === 'LoggedIn') {
		var key = session.a;
		return key;
	} else {
		var key = session.a;
		return key;
	}
};
var $elm$browser$Browser$Navigation$pushUrl = _Browser_pushUrl;
var $elm$url$Url$addPort = F2(
	function (maybePort, starter) {
		if (maybePort.$ === 'Nothing') {
			return starter;
		} else {
			var port_ = maybePort.a;
			return starter + (':' + $elm$core$String$fromInt(port_));
		}
	});
var $elm$url$Url$addPrefixed = F3(
	function (prefix, maybeSegment, starter) {
		if (maybeSegment.$ === 'Nothing') {
			return starter;
		} else {
			var segment = maybeSegment.a;
			return _Utils_ap(
				starter,
				_Utils_ap(prefix, segment));
		}
	});
var $elm$url$Url$toString = function (url) {
	var http = function () {
		var _v0 = url.protocol;
		if (_v0.$ === 'Http') {
			return 'http://';
		} else {
			return 'https://';
		}
	}();
	return A3(
		$elm$url$Url$addPrefixed,
		'#',
		url.fragment,
		A3(
			$elm$url$Url$addPrefixed,
			'?',
			url.query,
			_Utils_ap(
				A2(
					$elm$url$Url$addPort,
					url.port_,
					_Utils_ap(http, url.host)),
				url.path)));
};
var $author$project$Main$GotNavBarMsg = function (a) {
	return {$: 'GotNavBarMsg', a: a};
};
var $author$project$Template$NavBar$HideDropDown = {$: 'HideDropDown'};
var $author$project$Template$NavBar$hideNavBarMsg = A2(
	$elm$core$Task$perform,
	$elm$core$Basics$identity,
	$elm$core$Task$succeed($author$project$Template$NavBar$HideDropDown));
var $author$project$Template$NavBar$isVisible = function (_v0) {
	var model = _v0.a;
	return model.dropdownVisible;
};
var $author$project$Pages$Buses$BusPage$LocationUpdate = function (a) {
	return {$: 'LocationUpdate', a: a};
};
var $author$project$Pages$Buses$BusPage$locationUpdateMsg = function (data) {
	return $author$project$Pages$Buses$BusPage$LocationUpdate(data);
};
var $author$project$Pages$Buses$BusesPage$LocationUpdate = function (a) {
	return {$: 'LocationUpdate', a: a};
};
var $author$project$Pages$Buses$BusesPage$locationUpdateMsg = function (data) {
	return $author$project$Pages$Buses$BusesPage$LocationUpdate(data);
};
var $elm$browser$Browser$Navigation$replaceUrl = _Browser_replaceUrl;
var $author$project$Navigation$loginRedirectToString = function (redirect) {
	if (redirect.$ === 'Nothing') {
		return '';
	} else {
		var _v1 = redirect.a;
		return 'confirmEmail';
	}
};
var $author$project$Navigation$routeToString = function (page) {
	var pieces = function () {
		switch (page.$) {
			case 'Home':
				return _List_Nil;
			case 'Login':
				var redirect = page.a;
				return _List_fromArray(
					[
						$author$project$Navigation$routeName(page),
						$author$project$Navigation$loginRedirectToString(redirect)
					]);
			case 'Logout':
				return _List_fromArray(
					[
						$author$project$Navigation$routeName(page)
					]);
			case 'Signup':
				return _List_fromArray(
					[
						$author$project$Navigation$routeName(page)
					]);
			case 'HouseholdList':
				return _List_fromArray(
					[
						$author$project$Navigation$routeName(page)
					]);
			case 'StudentRegistration':
				return _List_fromArray(
					[
						$author$project$Navigation$routeName($author$project$Navigation$HouseholdList),
						$author$project$Navigation$routeName(page)
					]);
			case 'DeviceList':
				return _List_fromArray(
					[
						$author$project$Navigation$routeName(page)
					]);
			case 'DeviceRegistration':
				return _List_fromArray(
					[
						$author$project$Navigation$routeName($author$project$Navigation$DeviceList),
						$author$project$Navigation$routeName(page)
					]);
			case 'BusDeviceRegistration':
				var busID = page.a;
				return _List_fromArray(
					[
						$author$project$Navigation$routeName($author$project$Navigation$Buses),
						$elm$core$String$fromInt(busID),
						$author$project$Navigation$routeName(page)
					]);
			case 'Buses':
				return _List_fromArray(
					[
						$author$project$Navigation$routeName($author$project$Navigation$Buses)
					]);
			case 'Bus':
				var busID = page.a;
				var pageStr = page.b;
				if (pageStr.$ === 'Nothing') {
					return _List_fromArray(
						[
							$author$project$Navigation$routeName($author$project$Navigation$Buses),
							$elm$core$String$fromInt(busID)
						]);
				} else {
					var pageStr_ = pageStr.a;
					return _List_fromArray(
						[
							$author$project$Navigation$routeName($author$project$Navigation$Buses),
							$elm$core$String$fromInt(busID),
							$elm$core$String$toLower(pageStr_)
						]);
				}
			case 'BusRegistration':
				return _List_fromArray(
					[
						$author$project$Navigation$routeName($author$project$Navigation$Buses),
						$author$project$Navigation$routeName($author$project$Navigation$BusRegistration)
					]);
			case 'CreateBusRepair':
				var busID = page.a;
				return _List_fromArray(
					[
						$author$project$Navigation$routeName($author$project$Navigation$Buses),
						$elm$core$String$fromInt(busID),
						'maintenance',
						'new'
					]);
			case 'Routes':
				return _List_fromArray(
					[
						$author$project$Navigation$routeName($author$project$Navigation$Routes)
					]);
			case 'CrewMembers':
				return _List_fromArray(
					[
						$author$project$Navigation$routeName($author$project$Navigation$CrewMembers)
					]);
			case 'CrewMemberRegistration':
				return _List_fromArray(
					[
						$author$project$Navigation$routeName($author$project$Navigation$CrewMembers),
						$author$project$Navigation$routeName(page)
					]);
			default:
				var id = page.a;
				return _List_fromArray(
					[
						$author$project$Navigation$routeName($author$project$Navigation$CrewMembers),
						$elm$core$String$fromInt(id),
						'edit'
					]);
		}
	}();
	return '#/' + A2($elm$core$String$join, '/', pieces);
};
var $author$project$Navigation$replaceUrl = F2(
	function (key, route) {
		return A2(
			$elm$browser$Browser$Navigation$replaceUrl,
			key,
			$author$project$Navigation$routeToString(route));
	});
var $author$project$Pages$Buses$BusPage$changeCurrentPage = F2(
	function (selectedPageIndex_, model_) {
		var _v0 = model_.busData;
		if (_v0.$ === 'Success') {
			var busData_ = _v0.a;
			var pages = busData_.pages;
			var selectedPageIndex = ($elm$core$List$length(pages) - 1) - selectedPageIndex_;
			var _v1 = function () {
				var _v2 = $elm$core$List$head(
					A2($elm$core$List$drop, selectedPageIndex, pages));
				if (_v2.$ === 'Nothing') {
					return A2($author$project$Pages$Buses$BusPage$aboutPage, busData_.bus, model_.session);
				} else {
					var _v3 = _v2.a;
					var _v4 = _v3.b;
					var page = _v4.a;
					var msg_ = _v4.b;
					return _Utils_Tuple2(page, msg_);
				}
			}();
			var selectedPage = _v1.a;
			var msg = _v1.b;
			return _Utils_Tuple2(
				_Utils_update(
					model_,
					{
						busData: $krisajenkins$remotedata$RemoteData$Success(
							_Utils_update(
								busData_,
								{currentPage: selectedPage, pageIndex: selectedPageIndex_}))
					}),
				$elm$core$Platform$Cmd$batch(
					_List_fromArray(
						[
							msg,
							A2(
							$author$project$Navigation$replaceUrl,
							$author$project$Session$navKey(model_.session),
							A2(
								$author$project$Navigation$Bus,
								model_.busID,
								$elm$core$Maybe$Just(
									$author$project$Pages$Buses$BusPage$pageName(selectedPage))))
						])));
		} else {
			return _Utils_Tuple2(model_, $elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Errors$BadRequest = function (a) {
	return {$: 'BadRequest', a: a};
};
var $author$project$Errors$Unauthorized = {$: 'Unauthorized'};
var $author$project$Errors$handleError = function (error) {
	if (error.$ === 'Unauthorized') {
		return $elm$core$Platform$Cmd$batch(
			_List_fromArray(
				[
					$author$project$Api$storeCache($elm$core$Maybe$Nothing)
				]));
	} else {
		return $elm$core$Platform$Cmd$none;
	}
};
var $elm$core$Result$withDefault = F2(
	function (def, result) {
		if (result.$ === 'Ok') {
			var a = result.a;
			return a;
		} else {
			return def;
		}
	});
var $author$project$Errors$decodeErrors = function (error) {
	var networkError = function () {
		if (error.$ === 'BadStatus') {
			var response = error.a;
			return (response.status.code === 401) ? $author$project$Errors$Unauthorized : $author$project$Errors$BadRequest(
				A2(
					$elm$core$Result$withDefault,
					'Server error',
					A2(
						$elm$json$Json$Decode$decodeString,
						A2(
							$elm$json$Json$Decode$at,
							_List_fromArray(
								['errors', 'detail']),
							$elm$json$Json$Decode$string),
						response.body)));
		} else {
			return $author$project$Errors$BadRequest('Server error');
		}
	}();
	return _Utils_Tuple2(
		networkError,
		$author$project$Errors$handleError(networkError));
};
var $author$project$Pages$Buses$AboutBus$LocationUpdate = function (a) {
	return {$: 'LocationUpdate', a: a};
};
var $author$project$Pages$Buses$AboutBus$locationUpdateMsg = $author$project$Pages$Buses$AboutBus$LocationUpdate;
var $author$project$Pages$Buses$BusPage$mapModel = F4(
	function (model, pageModelMapper, pageMsgMapper, _v0) {
		var subModel = _v0.a;
		var subCmd = _v0.b;
		var modelMapper = function (pageModel) {
			var _v1 = model.busData;
			if (_v1.$ === 'Success') {
				var busData = _v1.a;
				return _Utils_update(
					model,
					{
						busData: $krisajenkins$remotedata$RemoteData$Success(
							_Utils_update(
								busData,
								{currentPage: pageModel}))
					});
			} else {
				return model;
			}
		};
		return A3(
			$author$project$Page$transformToModelMsg,
			A2($elm$core$Basics$composeR, pageModelMapper, modelMapper),
			pageMsgMapper,
			_Utils_Tuple2(subModel, subCmd));
	});
var $author$project$Pages$Buses$AboutBus$Crew = {$: 'Crew'};
var $author$project$Pages$Buses$AboutBus$Route = {$: 'Route'};
var $author$project$Pages$Buses$AboutBus$Students = function (a) {
	return {$: 'Students', a: a};
};
var $author$project$Pages$Buses$AboutBus$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'ClickedStatisticsPage':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{currentPage: $author$project$Pages$Buses$AboutBus$Statistics}),
					$author$project$Ports$initializeMaps(false));
			case 'ClickedStudentsPage':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							currentPage: $author$project$Pages$Buses$AboutBus$Students($elm$core$Maybe$Nothing)
						}),
					$elm$core$Platform$Cmd$none);
			case 'SelectedStudent':
				var index = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							currentPage: $author$project$Pages$Buses$AboutBus$Students(
								$elm$core$Maybe$Just(index))
						}),
					$author$project$Ports$initializeMaps(false));
			case 'ClickedRoute':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{currentPage: $author$project$Pages$Buses$AboutBus$Route}),
					$author$project$Ports$initializeMaps(false));
			case 'ClickedCrewPage':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{currentPage: $author$project$Pages$Buses$AboutBus$Crew}),
					$elm$core$Platform$Cmd$none);
			default:
				var locationUpdate = msg.a;
				var currentBus = model.bus;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							bus: _Utils_update(
								currentBus,
								{
									last_seen: $elm$core$Maybe$Just(locationUpdate)
								})
						}),
					$elm$core$Platform$Cmd$none);
		}
	});
var $elm$json$Json$Encode$int = _Json_wrap;
var $author$project$Ports$updateBusMap = _Platform_outgoingPort(
	'updateBusMap',
	function ($) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'bearing',
					$elm$json$Json$Encode$float($.bearing)),
					_Utils_Tuple2(
					'bus',
					$elm$json$Json$Encode$int($.bus)),
					_Utils_Tuple2(
					'location',
					function ($) {
						return $elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'lat',
									$elm$json$Json$Encode$float($.lat)),
									_Utils_Tuple2(
									'lng',
									$elm$json$Json$Encode$float($.lng))
								]));
					}($.location)),
					_Utils_Tuple2(
					'speed',
					$elm$json$Json$Encode$float($.speed))
				]));
	});
var $author$project$Pages$Buses$BusDevicePage$Features = {$: 'Features'};
var $author$project$Navigation$rerouteTo = F2(
	function (a, route) {
		return A2(
			$elm$browser$Browser$Navigation$pushUrl,
			$author$project$Session$navKey(a.session),
			$author$project$Navigation$routeToString(route));
	});
var $author$project$Pages$Buses$BusDevicePage$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'AddDevice':
				return _Utils_Tuple2(
					model,
					A2(
						$author$project$Navigation$rerouteTo,
						model,
						$author$project$Navigation$BusDeviceRegistration(model.bus.id)));
			case 'ClickedAboutPage':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{currentPage: $author$project$Pages$Buses$BusDevicePage$About}),
					$author$project$Ports$initializeMaps(false));
			case 'ClickedFeaturesPage':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{currentPage: $author$project$Pages$Buses$BusDevicePage$Features}),
					$elm$core$Platform$Cmd$none);
			default:
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Pages$Buses$BusRepairsPage$PastRepairs = {$: 'PastRepairs'};
var $author$project$Pages$Buses$BusRepairsPage$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'ClickedSummaryPage':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{currentPage: $author$project$Pages$Buses$BusRepairsPage$Summary}),
					$elm$core$Platform$Cmd$none);
			case 'ClickedPastRepairsPage':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{currentPage: $author$project$Pages$Buses$BusRepairsPage$PastRepairs}),
					$elm$core$Platform$Cmd$none);
			default:
				var repair = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{highlightedRepair: repair}),
					$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Pages$Buses$FuelHistoryPage$ConsumptionSpikes = {$: 'ConsumptionSpikes'};
var $author$project$Pages$Buses$FuelHistoryPage$update = F2(
	function (msg, model) {
		if (msg.$ === 'ClickedSummaryPage') {
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{currentPage: $author$project$Pages$Buses$FuelHistoryPage$Summary}),
				$elm$core$Platform$Cmd$none);
		} else {
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{currentPage: $author$project$Pages$Buses$FuelHistoryPage$ConsumptionSpikes}),
				$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Ports$deselectPoint = _Platform_outgoingPort(
	'deselectPoint',
	function ($) {
		return $elm$json$Json$Encode$null;
	});
var $author$project$Pages$Buses$TripsHistoryPage$groupTrips = F2(
	function (trips, timezone) {
		return A3(
			$author$project$Utils$GroupByDate$group,
			trips,
			timezone,
			function ($) {
				return $.startTime;
			});
	});
var $author$project$Pages$Buses$TripsHistoryPage$pointAt = F2(
	function (index, trip) {
		return $elm$core$List$head(
			A2($elm$core$List$drop, index, trip.reports));
	});
var $author$project$Ports$selectPoint = _Platform_outgoingPort(
	'selectPoint',
	function ($) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'lat',
					$elm$json$Json$Encode$float($.lat)),
					_Utils_Tuple2(
					'lng',
					$elm$json$Json$Encode$float($.lng))
				]));
	});
var $author$project$Pages$Buses$TripsHistoryPage$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'AdjustedValue':
				var sliderValue = msg.a;
				var currentPoint = function () {
					var _v2 = model.selectedTrip;
					if (_v2.$ === 'Nothing') {
						return $elm$core$Maybe$Nothing;
					} else {
						var trip = _v2.a;
						return A2($author$project$Pages$Buses$TripsHistoryPage$pointAt, sliderValue, trip);
					}
				}();
				if (currentPoint.$ === 'Nothing') {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{sliderValue: sliderValue}),
						$author$project$Ports$deselectPoint(_Utils_Tuple0));
				} else {
					var report = currentPoint.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{sliderValue: sliderValue}),
						$author$project$Ports$selectPoint(report.location));
				}
			case 'ToggledShowGeofence':
				var show = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{showGeofence: show}),
					$elm$core$Platform$Cmd$none);
			case 'ToggledShowStops':
				var show = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{showStops: show}),
					$elm$core$Platform$Cmd$none);
			case 'TripsResponse':
				var response = msg.a;
				var groupedTrips = function () {
					if (response.$ === 'Success') {
						var trips = response.a;
						return A2($author$project$Pages$Buses$TripsHistoryPage$groupTrips, trips, model.timezone);
					} else {
						return _List_Nil;
					}
				}();
				var command = function () {
					switch (response.$) {
						case 'Success':
							return $author$project$Ports$initializeMaps(false);
						case 'Failure':
							var error = response.a;
							return $author$project$Errors$decodeErrors(error).b;
						default:
							return $elm$core$Platform$Cmd$none;
					}
				}();
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{groupedTrips: groupedTrips, trips: response}),
					command);
			case 'ClickedOn':
				var trip = msg.a;
				if (_Utils_eq(
					$elm$core$Maybe$Just(trip),
					model.selectedTrip)) {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{selectedTrip: $elm$core$Maybe$Nothing, sliderValue: 0}),
						$author$project$Ports$deselectPoint(_Utils_Tuple0));
				} else {
					var _v5 = $elm$core$List$head(trip.reports);
					if (_v5.$ === 'Just') {
						var firstReport = _v5.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									selectedTrip: $elm$core$Maybe$Just(trip),
									sliderValue: 0
								}),
							$author$project$Ports$selectPoint(firstReport.location));
					} else {
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									selectedTrip: $elm$core$Maybe$Just(trip),
									sliderValue: 0
								}),
							$author$project$Ports$deselectPoint(_Utils_Tuple0));
					}
				}
			default:
				var selection = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							selectedGroup: $elm$core$Maybe$Just(selection),
							selectedTrip: $elm$core$List$head(selection.b),
							sliderValue: 0
						}),
					$author$project$Ports$deselectPoint(_Utils_Tuple0));
		}
	});
var $author$project$Pages$Buses$BusPage$updatePage = F2(
	function (msg, fullModel) {
		var _v0 = fullModel.busData;
		if (_v0.$ === 'Success') {
			var busData = _v0.a;
			var _v1 = _Utils_Tuple2(msg, busData.currentPage);
			_v1$5:
			while (true) {
				switch (_v1.b.$) {
					case 'About':
						if (_v1.a.$ === 'GotAboutMsg') {
							var msg_ = _v1.a.a;
							var model = _v1.b.a;
							return A4(
								$author$project$Pages$Buses$BusPage$mapModel,
								fullModel,
								$author$project$Pages$Buses$BusPage$About,
								$author$project$Pages$Buses$BusPage$GotAboutMsg,
								A2($author$project$Pages$Buses$AboutBus$update, msg_, model));
						} else {
							break _v1$5;
						}
					case 'RouteHistory':
						if (_v1.a.$ === 'GotRouteHistoryMsg') {
							var msg_ = _v1.a.a;
							var model = _v1.b.a;
							return A4(
								$author$project$Pages$Buses$BusPage$mapModel,
								fullModel,
								$author$project$Pages$Buses$BusPage$RouteHistory,
								$author$project$Pages$Buses$BusPage$GotRouteHistoryMsg,
								A2($author$project$Pages$Buses$TripsHistoryPage$update, msg_, model));
						} else {
							break _v1$5;
						}
					case 'FuelHistory':
						if (_v1.a.$ === 'GotFuelHistoryMsg') {
							var msg_ = _v1.a.a;
							var model = _v1.b.a;
							return A4(
								$author$project$Pages$Buses$BusPage$mapModel,
								fullModel,
								$author$project$Pages$Buses$BusPage$FuelHistory,
								$author$project$Pages$Buses$BusPage$GotFuelHistoryMsg,
								A2($author$project$Pages$Buses$FuelHistoryPage$update, msg_, model));
						} else {
							break _v1$5;
						}
					case 'BusDevice':
						if (_v1.a.$ === 'GotBusDeviceMsg') {
							var msg_ = _v1.a.a;
							var model = _v1.b.a;
							return A4(
								$author$project$Pages$Buses$BusPage$mapModel,
								fullModel,
								$author$project$Pages$Buses$BusPage$BusDevice,
								$author$project$Pages$Buses$BusPage$GotBusDeviceMsg,
								A2($author$project$Pages$Buses$BusDevicePage$update, msg_, model));
						} else {
							break _v1$5;
						}
					default:
						if (_v1.a.$ === 'GotBusRepairsMsg') {
							var msg_ = _v1.a.a;
							var model = _v1.b.a;
							return A4(
								$author$project$Pages$Buses$BusPage$mapModel,
								fullModel,
								$author$project$Pages$Buses$BusPage$BusRepairs,
								$author$project$Pages$Buses$BusPage$GotBusRepairsMsg,
								A2($author$project$Pages$Buses$BusRepairsPage$update, msg_, model));
						} else {
							break _v1$5;
						}
				}
			}
			return _Utils_Tuple2(fullModel, $elm$core$Platform$Cmd$none);
		} else {
			return _Utils_Tuple2(fullModel, $elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Pages$Buses$BusPage$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'GotAboutMsg':
				return A2($author$project$Pages$Buses$BusPage$updatePage, msg, model);
			case 'GotRouteHistoryMsg':
				return A2($author$project$Pages$Buses$BusPage$updatePage, msg, model);
			case 'GotFuelHistoryMsg':
				return A2($author$project$Pages$Buses$BusPage$updatePage, msg, model);
			case 'GotBusDeviceMsg':
				return A2($author$project$Pages$Buses$BusPage$updatePage, msg, model);
			case 'GotBusRepairsMsg':
				return A2($author$project$Pages$Buses$BusPage$updatePage, msg, model);
			case 'SelectedPage':
				var selectedPage = msg.a;
				return A2($author$project$Pages$Buses$BusPage$changeCurrentPage, selectedPage, model);
			case 'LocationUpdate':
				var locationUpdate = msg.a;
				var busData_ = function () {
					var _v5 = model.busData;
					if (_v5.$ === 'Success') {
						var busData__ = _v5.a;
						return $elm$core$Maybe$Just(busData__);
					} else {
						return $elm$core$Maybe$Nothing;
					}
				}();
				if (busData_.$ === 'Just') {
					var busData = busData_.a;
					var bus = busData.bus;
					var _v2 = _Utils_Tuple2(
						_Utils_update(
							model,
							{
								busData: $krisajenkins$remotedata$RemoteData$Success(
									_Utils_update(
										busData,
										{
											bus: _Utils_update(
												bus,
												{
													last_seen: $elm$core$Maybe$Just(locationUpdate)
												})
										}))
							}),
						$author$project$Ports$updateBusMap(locationUpdate));
					var newModel = _v2.a;
					var busPageMsg = _v2.b;
					var _v3 = busData.currentPage;
					if (_v3.$ === 'About') {
						var pageModel = _v3.a;
						var _v4 = A4(
							$author$project$Pages$Buses$BusPage$mapModel,
							newModel,
							$author$project$Pages$Buses$BusPage$About,
							$author$project$Pages$Buses$BusPage$GotAboutMsg,
							A2(
								$author$project$Pages$Buses$AboutBus$update,
								$author$project$Pages$Buses$AboutBus$locationUpdateMsg(locationUpdate),
								pageModel));
						var newerModel = _v4.a;
						var childMsg = _v4.b;
						return _Utils_Tuple2(
							newerModel,
							$elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[childMsg, busPageMsg])));
					} else {
						return _Utils_Tuple2(newModel, busPageMsg);
					}
				} else {
					return _Utils_Tuple2(
						model,
						$author$project$Ports$updateBusMap(locationUpdate));
				}
			case 'ServerResponse':
				var response = msg.a;
				var next_msg = function () {
					switch (response.$) {
						case 'Success':
							var busData = response.a;
							var pages = busData.pages;
							var selectedPageIndex = ($elm$core$List$length(pages) - 1) - busData.pageIndex;
							var _v7 = function () {
								var _v8 = $elm$core$List$head(
									A2($elm$core$List$drop, selectedPageIndex, pages));
								if (_v8.$ === 'Nothing') {
									return A2($author$project$Pages$Buses$BusPage$aboutPage, busData.bus, model.session);
								} else {
									var _v9 = _v8.a;
									var _v10 = _v9.b;
									var page = _v10.a;
									var msg_ = _v10.b;
									return _Utils_Tuple2(page, msg_);
								}
							}();
							var pageMsg = _v7.b;
							return $elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										function () {
										var _v11 = _Utils_Tuple2(model.locationUpdate, busData.bus.last_seen);
										if (_v11.a.$ === 'Just') {
											var locationUpdate_ = _v11.a.a;
											return $author$project$Ports$updateBusMap(locationUpdate_);
										} else {
											if (_v11.b.$ === 'Just') {
												var locationUpdate_ = _v11.b.a;
												return $author$project$Ports$updateBusMap(locationUpdate_);
											} else {
												return $elm$core$Platform$Cmd$none;
											}
										}
									}(),
										pageMsg
									]));
						case 'Failure':
							var error = response.a;
							var _v12 = $author$project$Errors$decodeErrors(error);
							var error_msg = _v12.b;
							return error_msg;
						default:
							return $elm$core$Platform$Cmd$none;
					}
				}();
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{busData: response}),
					next_msg);
			default:
				var msg_ = function () {
					var _v13 = model.locationUpdate;
					if (_v13.$ === 'Just') {
						var locationUpdate_ = _v13.a;
						return $author$project$Ports$updateBusMap(locationUpdate_);
					} else {
						var _v14 = model.busData;
						if (_v14.$ === 'Success') {
							var busData__ = _v14.a;
							var _v15 = busData__.bus.last_seen;
							if (_v15.$ === 'Just') {
								var locationUpdate_ = _v15.a;
								return $author$project$Ports$updateBusMap(locationUpdate_);
							} else {
								return $elm$core$Platform$Cmd$none;
							}
						} else {
							return $elm$core$Platform$Cmd$none;
						}
					}
				}();
				return _Utils_Tuple2(model, msg_);
		}
	});
var $author$project$Ports$bulkUpdateBusMap = _Platform_outgoingPort(
	'bulkUpdateBusMap',
	$elm$json$Json$Encode$list(
		function ($) {
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'bearing',
						$elm$json$Json$Encode$float($.bearing)),
						_Utils_Tuple2(
						'bus',
						$elm$json$Json$Encode$int($.bus)),
						_Utils_Tuple2(
						'location',
						function ($) {
							return $elm$json$Json$Encode$object(
								_List_fromArray(
									[
										_Utils_Tuple2(
										'lat',
										$elm$json$Json$Encode$float($.lat)),
										_Utils_Tuple2(
										'lng',
										$elm$json$Json$Encode$float($.lng))
									]));
						}($.location)),
						_Utils_Tuple2(
						'speed',
						$elm$json$Json$Encode$float($.speed))
					]));
		}));
var $author$project$Pages$Buses$BusesPage$locationUpdatesFrom = function (model) {
	var locationUpdates = function () {
		var _v0 = model.buses;
		if (_v0.$ === 'Success') {
			var buses = _v0.a;
			return $elm$core$List$concat(
				A2(
					$elm$core$List$map,
					function (bus) {
						var _v1 = A2($elm$core$Dict$get, bus.id, model.locationUpdates);
						if (_v1.$ === 'Just') {
							var locationUpdate = _v1.a;
							return _List_fromArray(
								[locationUpdate]);
						} else {
							var _v2 = bus.last_seen;
							if (_v2.$ === 'Just') {
								var locationUpdate_ = _v2.a;
								return _List_fromArray(
									[locationUpdate_]);
							} else {
								return _List_Nil;
							}
						}
					},
					buses));
		} else {
			return $elm$core$Dict$values(model.locationUpdates);
		}
	}();
	return locationUpdates;
};
var $author$project$Pages$Buses$BusesPage$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'ServerResponse':
				var response = msg.a;
				var newModel = _Utils_update(
					model,
					{buses: response});
				if (response.$ === 'Failure') {
					var error = response.a;
					var _v2 = $author$project$Errors$decodeErrors(error);
					var error_msg = _v2.b;
					return _Utils_Tuple2(newModel, error_msg);
				} else {
					return _Utils_Tuple2(
						newModel,
						$author$project$Ports$bulkUpdateBusMap(
							$author$project$Pages$Buses$BusesPage$locationUpdatesFrom(newModel)));
				}
			case 'ChangedFilterText':
				var filterText = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{filterText: filterText}),
					$elm$core$Platform$Cmd$none);
			case 'SelectedBus':
				var bus = msg.a;
				return _Utils_Tuple2(
					model,
					A2(
						$author$project$Navigation$rerouteTo,
						model,
						A2($author$project$Navigation$Bus, bus.id, $elm$core$Maybe$Nothing)));
			case 'CreateBus':
				return _Utils_Tuple2(
					model,
					A2($author$project$Navigation$rerouteTo, model, $author$project$Navigation$BusRegistration));
			case 'LocationUpdate':
				var locationUpdates = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{locationUpdates: locationUpdates}),
					$author$project$Ports$bulkUpdateBusMap(
						$author$project$Pages$Buses$BusesPage$locationUpdatesFrom(model)));
			case 'MapReady':
				return _Utils_Tuple2(
					model,
					$author$project$Ports$bulkUpdateBusMap(
						$author$project$Pages$Buses$BusesPage$locationUpdatesFrom(model)));
			default:
				var bus = msg.a;
				return _Utils_eq(bus, model.selectedBus) ? _Utils_Tuple2(
					_Utils_update(
						model,
						{selectedBus: $elm$core$Maybe$Nothing}),
					$elm$core$Platform$Cmd$none) : _Utils_Tuple2(
					_Utils_update(
						model,
						{selectedBus: bus}),
					$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Pages$Buses$CreateBusPage$Changed = function (a) {
	return {$: 'Changed', a: a};
};
var $author$project$Pages$Buses$CreateBusPage$Custom = {$: 'Custom'};
var $author$project$Pages$Buses$CreateBusPage$FuelConsumptionType = function (a) {
	return {$: 'FuelConsumptionType', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$AlignY = function (a) {
	return {$: 'AlignY', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Top = {$: 'Top'};
var $mdgriffith$elm_ui$Element$alignTop = $mdgriffith$elm_ui$Internal$Model$AlignY($mdgriffith$elm_ui$Internal$Model$Top);
var $author$project$Icons$chevronDown = $author$project$Icons$iconNamed('images/chevron_down.svg');
var $mdgriffith$elm_ui$Internal$Model$Class = F2(
	function (a, b) {
		return {$: 'Class', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$overflow = $mdgriffith$elm_ui$Internal$Flag$flag(20);
var $mdgriffith$elm_ui$Element$clip = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.clip);
var $mdgriffith$elm_ui$Internal$Model$Colored = F3(
	function (a, b, c) {
		return {$: 'Colored', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Flag$bgColor = $mdgriffith$elm_ui$Internal$Flag$flag(8);
var $mdgriffith$elm_ui$Internal$Model$formatColorClass = function (_v0) {
	var red = _v0.a;
	var green = _v0.b;
	var blue = _v0.c;
	var alpha = _v0.d;
	return $mdgriffith$elm_ui$Internal$Model$floatClass(red) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(green) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(blue) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(alpha))))));
};
var $mdgriffith$elm_ui$Element$Background$color = function (clr) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$bgColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
			'background-color',
			clr));
};
var $mdgriffith$elm_ui$Internal$Flag$borderColor = $mdgriffith$elm_ui$Internal$Flag$flag(28);
var $mdgriffith$elm_ui$Element$Border$color = function (clr) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'bc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
			'border-color',
			clr));
};
var $mdgriffith$elm_ui$Internal$Flag$fontColor = $mdgriffith$elm_ui$Internal$Flag$flag(14);
var $mdgriffith$elm_ui$Element$Font$color = function (fontColor) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'fc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(fontColor),
			'color',
			fontColor));
};
var $mdgriffith$elm_ui$Internal$Model$Rgba = F4(
	function (a, b, c, d) {
		return {$: 'Rgba', a: a, b: b, c: c, d: d};
	});
var $mdgriffith$elm_ui$Element$rgb255 = F3(
	function (red, green, blue) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, red / 255, green / 255, blue / 255, 1);
	});
var $author$project$Colors$darkGreen = A3($mdgriffith$elm_ui$Element$rgb255, 30, 165, 145);
var $mdgriffith$elm_ui$Internal$Model$Height = function (a) {
	return {$: 'Height', a: a};
};
var $mdgriffith$elm_ui$Element$height = $mdgriffith$elm_ui$Internal$Model$Height;
var $mdgriffith$elm_ui$Internal$Model$Content = {$: 'Content'};
var $mdgriffith$elm_ui$Element$shrink = $mdgriffith$elm_ui$Internal$Model$Content;
var $mdgriffith$elm_ui$Internal$Model$Width = function (a) {
	return {$: 'Width', a: a};
};
var $mdgriffith$elm_ui$Element$width = $mdgriffith$elm_ui$Internal$Model$Width;
var $mdgriffith$elm_ui$Element$el = F2(
	function (attrs, child) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					attrs)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[child])));
	});
var $mdgriffith$elm_ui$Internal$Model$Fill = function (a) {
	return {$: 'Fill', a: a};
};
var $mdgriffith$elm_ui$Element$fill = $mdgriffith$elm_ui$Internal$Model$Fill(1);
var $author$project$StyledElement$DropDown$Config = function (a) {
	return {$: 'Config', a: a};
};
var $author$project$StyledElement$DropDown$Filterable = {$: 'Filterable'};
var $mdgriffith$elm_ui$Internal$Model$Px = function (a) {
	return {$: 'Px', a: a};
};
var $mdgriffith$elm_ui$Element$px = $mdgriffith$elm_ui$Internal$Model$Px;
var $mdgriffith$elm_ui$Internal$Model$Text = function (a) {
	return {$: 'Text', a: a};
};
var $mdgriffith$elm_ui$Element$text = function (content) {
	return $mdgriffith$elm_ui$Internal$Model$Text(content);
};
var $author$project$StyledElement$DropDown$filterable = F6(
	function (dropdownMsg, onSelectMsg, itemToPrompt, itemToElement, itemToText, icon) {
		var iconAttrs = _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$px(24)),
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px(24))
			]);
		return $author$project$StyledElement$DropDown$Config(
			{
				closeButton: $mdgriffith$elm_ui$Element$text('▲'),
				containerAttributes: _List_Nil,
				dropdownMsg: dropdownMsg,
				dropdownType: $author$project$StyledElement$DropDown$Filterable,
				filterPlaceholder: 'Search...',
				icon: A2(
					$elm$core$Maybe$map,
					function (x) {
						return x(iconAttrs);
					},
					icon),
				isLoading: false,
				itemToElement: itemToElement,
				itemToPrompt: itemToPrompt,
				itemToText: itemToText,
				listAttributes: _List_Nil,
				onSelectMsg: onSelectMsg,
				openButton: $mdgriffith$elm_ui$Element$text('▼'),
				promptElement: A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					$mdgriffith$elm_ui$Element$text('-- Select --')),
				searchAttributes: _List_Nil,
				selectAttributes: _List_Nil
			});
	});
var $mdgriffith$elm_ui$Internal$Model$FontFamily = F2(
	function (a, b) {
		return {$: 'FontFamily', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$fontFamily = $mdgriffith$elm_ui$Internal$Flag$flag(5);
var $elm$core$String$words = _String_words;
var $mdgriffith$elm_ui$Internal$Model$renderFontClassName = F2(
	function (font, current) {
		return _Utils_ap(
			current,
			function () {
				switch (font.$) {
					case 'Serif':
						return 'serif';
					case 'SansSerif':
						return 'sans-serif';
					case 'Monospace':
						return 'monospace';
					case 'Typeface':
						var name = font.a;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
					case 'ImportFont':
						var name = font.a;
						var url = font.b;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
					default:
						var name = font.a.name;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
				}
			}());
	});
var $mdgriffith$elm_ui$Element$Font$family = function (families) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontFamily,
		A2(
			$mdgriffith$elm_ui$Internal$Model$FontFamily,
			A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderFontClassName, 'ff-', families),
			families));
};
var $mdgriffith$elm_ui$Internal$Model$SansSerif = {$: 'SansSerif'};
var $mdgriffith$elm_ui$Element$Font$sansSerif = $mdgriffith$elm_ui$Internal$Model$SansSerif;
var $mdgriffith$elm_ui$Internal$Model$Typeface = function (a) {
	return {$: 'Typeface', a: a};
};
var $mdgriffith$elm_ui$Element$Font$typeface = $mdgriffith$elm_ui$Internal$Model$Typeface;
var $author$project$Style$defaultFontFace = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$Font$family(
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$typeface('SF Pro Text'),
				$mdgriffith$elm_ui$Element$Font$sansSerif
			]))
	]);
var $mdgriffith$elm_ui$Internal$Model$Min = F2(
	function (a, b) {
		return {$: 'Min', a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$minimum = F2(
	function (i, l) {
		return A2($mdgriffith$elm_ui$Internal$Model$Min, i, l);
	});
var $mdgriffith$elm_ui$Internal$Model$FontSize = function (a) {
	return {$: 'FontSize', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$fontSize = $mdgriffith$elm_ui$Internal$Flag$flag(4);
var $mdgriffith$elm_ui$Element$Font$size = function (i) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontSize,
		$mdgriffith$elm_ui$Internal$Model$FontSize(i));
};
var $mdgriffith$elm_ui$Internal$Flag$borderStyle = $mdgriffith$elm_ui$Internal$Flag$flag(11);
var $mdgriffith$elm_ui$Element$Border$solid = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$borderStyle, $mdgriffith$elm_ui$Internal$Style$classes.borderSolid);
var $mdgriffith$elm_ui$Internal$Model$BorderWidth = F5(
	function (a, b, c, d, e) {
		return {$: 'BorderWidth', a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Element$Border$width = function (v) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderWidth,
		A5(
			$mdgriffith$elm_ui$Internal$Model$BorderWidth,
			'b-' + $elm$core$String$fromInt(v),
			v,
			v,
			v,
			v));
};
var $mdgriffith$elm_ui$Element$Border$widthXY = F2(
	function (x, y) {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$borderWidth,
			A5(
				$mdgriffith$elm_ui$Internal$Model$BorderWidth,
				'b-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y))),
				y,
				x,
				y,
				x));
	});
var $mdgriffith$elm_ui$Element$Border$widthEach = function (_v0) {
	var bottom = _v0.bottom;
	var top = _v0.top;
	var left = _v0.left;
	var right = _v0.right;
	return (_Utils_eq(top, bottom) && _Utils_eq(left, right)) ? (_Utils_eq(top, right) ? $mdgriffith$elm_ui$Element$Border$width(top) : A2($mdgriffith$elm_ui$Element$Border$widthXY, left, top)) : A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderWidth,
		A5(
			$mdgriffith$elm_ui$Internal$Model$BorderWidth,
			'b-' + ($elm$core$String$fromInt(top) + ('-' + ($elm$core$String$fromInt(right) + ('-' + ($elm$core$String$fromInt(bottom) + ('-' + $elm$core$String$fromInt(left))))))),
			top,
			right,
			bottom,
			left));
};
var $author$project$Style$inputStyle = _Utils_ap(
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Background$color(
			A3($mdgriffith$elm_ui$Element$rgb255, 245, 245, 245)),
			$mdgriffith$elm_ui$Element$Border$color($author$project$Colors$darkGreen),
			$mdgriffith$elm_ui$Element$Border$widthEach(
			{bottom: 2, left: 0, right: 0, top: 0}),
			$mdgriffith$elm_ui$Element$Border$solid,
			$mdgriffith$elm_ui$Element$Font$size(16),
			$mdgriffith$elm_ui$Element$height(
			A2($mdgriffith$elm_ui$Element$minimum, 46, $mdgriffith$elm_ui$Element$fill))
		]),
	$author$project$Style$defaultFontFace);
var $author$project$Style$labelStyle = _Utils_ap(
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Font$size(16),
			$mdgriffith$elm_ui$Element$Font$color(
			A3($mdgriffith$elm_ui$Element$rgb255, 51, 63, 78))
		]),
	$author$project$Style$defaultFontFace);
var $mdgriffith$elm_ui$Internal$Model$Max = F2(
	function (a, b) {
		return {$: 'Max', a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$maximum = F2(
	function (i, l) {
		return A2($mdgriffith$elm_ui$Internal$Model$Max, i, l);
	});
var $mdgriffith$elm_ui$Internal$Model$PaddingStyle = F5(
	function (a, b, c, d, e) {
		return {$: 'PaddingStyle', a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Internal$Flag$padding = $mdgriffith$elm_ui$Internal$Flag$flag(2);
var $mdgriffith$elm_ui$Element$padding = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$padding,
		A5(
			$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
			'p-' + $elm$core$String$fromInt(x),
			x,
			x,
			x,
			x));
};
var $mdgriffith$elm_ui$Element$paddingXY = F2(
	function (x, y) {
		return _Utils_eq(x, y) ? A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$padding,
			A5(
				$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
				'p-' + $elm$core$String$fromInt(x),
				x,
				x,
				x,
				x)) : A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$padding,
			A5(
				$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
				'p-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y))),
				y,
				x,
				y,
				x));
	});
var $elm$core$Basics$pi = _Basics_pi;
var $mdgriffith$elm_ui$Element$rgb = F3(
	function (r, g, b) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, r, g, b, 1);
	});
var $mdgriffith$elm_ui$Element$rgba = $mdgriffith$elm_ui$Internal$Model$Rgba;
var $mdgriffith$elm_ui$Internal$Model$Rotate = F2(
	function (a, b) {
		return {$: 'Rotate', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$TransformComponent = F2(
	function (a, b) {
		return {$: 'TransformComponent', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$rotate = $mdgriffith$elm_ui$Internal$Flag$flag(24);
var $mdgriffith$elm_ui$Element$rotate = function (angle) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$rotate,
		A2(
			$mdgriffith$elm_ui$Internal$Model$Rotate,
			_Utils_Tuple3(0, 0, 1),
			angle));
};
var $mdgriffith$elm_ui$Element$scrollbarY = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.scrollbarsY);
var $mdgriffith$elm_ui$Internal$Model$boxShadowClass = function (shadow) {
	return $elm$core$String$concat(
		_List_fromArray(
			[
				shadow.inset ? 'box-inset' : 'box-',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.offset.a) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.offset.b) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.blur) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.size) + 'px',
				$mdgriffith$elm_ui$Internal$Model$formatColorClass(shadow.color)
			]));
};
var $mdgriffith$elm_ui$Internal$Flag$shadows = $mdgriffith$elm_ui$Internal$Flag$flag(19);
var $mdgriffith$elm_ui$Element$Border$shadow = function (almostShade) {
	var shade = {blur: almostShade.blur, color: almostShade.color, inset: false, offset: almostShade.offset, size: almostShade.size};
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$shadows,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			$mdgriffith$elm_ui$Internal$Model$boxShadowClass(shade),
			'box-shadow',
			$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(shade)));
};
var $mdgriffith$elm_ui$Internal$Model$SpacingStyle = F3(
	function (a, b, c) {
		return {$: 'SpacingStyle', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Flag$spacing = $mdgriffith$elm_ui$Internal$Flag$flag(3);
var $mdgriffith$elm_ui$Internal$Model$spacingName = F2(
	function (x, y) {
		return 'spacing-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y)));
	});
var $mdgriffith$elm_ui$Element$spacing = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$spacing,
		A3(
			$mdgriffith$elm_ui$Internal$Model$SpacingStyle,
			A2($mdgriffith$elm_ui$Internal$Model$spacingName, x, x),
			x,
			x));
};
var $author$project$Colors$teal = A3($mdgriffith$elm_ui$Element$rgb255, 102, 218, 213);
var $mdgriffith$elm_ui$Element$toRgb = function (_v0) {
	var r = _v0.a;
	var g = _v0.b;
	var b = _v0.c;
	var a = _v0.d;
	return {alpha: a, blue: b, green: g, red: r};
};
var $author$project$Colors$withAlpha = F2(
	function (color, alpha) {
		var _v0 = $mdgriffith$elm_ui$Element$toRgb(color);
		var red = _v0.red;
		var green = _v0.green;
		var blue = _v0.blue;
		return A4($mdgriffith$elm_ui$Element$rgba, red, green, blue, alpha);
	});
var $author$project$StyledElement$DropDown$withContainerAttributes = F2(
	function (attrs, _v0) {
		var config = _v0.a;
		return $author$project$StyledElement$DropDown$Config(
			_Utils_update(
				config,
				{containerAttributes: attrs}));
	});
var $author$project$StyledElement$DropDown$withListAttributes = F2(
	function (attrs, _v0) {
		var config = _v0.a;
		return $author$project$StyledElement$DropDown$Config(
			_Utils_update(
				config,
				{listAttributes: attrs}));
	});
var $author$project$StyledElement$DropDown$withLoadingStatus = F2(
	function (isLoading, _v0) {
		var config = _v0.a;
		return $author$project$StyledElement$DropDown$Config(
			_Utils_update(
				config,
				{isLoading: isLoading}));
	});
var $author$project$StyledElement$DropDown$withOpenCloseButtons = F2(
	function (_v0, _v1) {
		var openButton = _v0.openButton;
		var closeButton = _v0.closeButton;
		var config = _v1.a;
		return $author$project$StyledElement$DropDown$Config(
			_Utils_update(
				config,
				{closeButton: closeButton, openButton: openButton}));
	});
var $author$project$StyledElement$DropDown$withPromptElement = F2(
	function (promptElement, _v0) {
		var config = _v0.a;
		return $author$project$StyledElement$DropDown$Config(
			_Utils_update(
				config,
				{promptElement: promptElement}));
	});
var $author$project$StyledElement$DropDown$withSearchAttributes = F2(
	function (attrs, _v0) {
		var config = _v0.a;
		return $author$project$StyledElement$DropDown$Config(
			_Utils_update(
				config,
				{searchAttributes: attrs}));
	});
var $author$project$StyledElement$DropDown$withSelectAttributes = F2(
	function (attrs, _v0) {
		var config = _v0.a;
		return $author$project$StyledElement$DropDown$Config(
			_Utils_update(
				config,
				{selectAttributes: attrs}));
	});
var $author$project$StyledElement$DropDown$dropDownConfig = F6(
	function (dropDownMsgWrapper, onPickMsg, toString, icon, isLoading, prompt) {
		var selectAttrs = _Utils_ap(
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Element$paddingXY, 16, 8),
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(46)),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_Utils_ap(
				$author$project$Style$inputStyle,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Border$width(0)
					])));
		var searchAttrs = _Utils_ap(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Border$width(0),
					$mdgriffith$elm_ui$Element$padding(0),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Background$color(
					A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0))
				]),
			$author$project$Style$labelStyle);
		var listAttrs = _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Background$color(
				A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
				$mdgriffith$elm_ui$Element$Border$shadow(
				{
					blur: 16,
					color: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.1),
					offset: _Utils_Tuple2(0, 8),
					size: 0
				}),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$clip,
				$mdgriffith$elm_ui$Element$scrollbarY,
				$mdgriffith$elm_ui$Element$height(
				A2($mdgriffith$elm_ui$Element$maximum, 210, $mdgriffith$elm_ui$Element$fill)),
				$mdgriffith$elm_ui$Element$Border$widthEach(
				{bottom: 2, left: 0, right: 0, top: 0}),
				$mdgriffith$elm_ui$Element$Border$color($author$project$Colors$darkGreen)
			]);
		var itemToPrompt = function (item) {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				$author$project$Style$labelStyle,
				$mdgriffith$elm_ui$Element$text(
					toString(item)));
		};
		var itemToElement = F3(
			function (selected, _v0, i) {
				var bgColor = selected ? A2($author$project$Colors$withAlpha, $author$project$Colors$teal, 0.3) : A3($mdgriffith$elm_ui$Element$rgb255, 255, 255, 255);
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_Utils_ap(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Background$color(bgColor),
								A2($mdgriffith$elm_ui$Element$paddingXY, 12, 12),
								$mdgriffith$elm_ui$Element$spacing(10),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Border$color(
								A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.2)),
								$mdgriffith$elm_ui$Element$Border$widthEach(
								{bottom: 1, left: 0, right: 0, top: 0})
							]),
						$author$project$Style$labelStyle),
					$mdgriffith$elm_ui$Element$text(
						toString(i)));
			});
		var containerAttrs = _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$Background$color(
				A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
				$mdgriffith$elm_ui$Element$Font$size(16)
			]);
		return A2(
			$author$project$StyledElement$DropDown$withLoadingStatus,
			isLoading,
			A2(
				$author$project$StyledElement$DropDown$withOpenCloseButtons,
				{
					closeButton: $author$project$Icons$chevronDown(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$rotate($elm$core$Basics$pi),
								$mdgriffith$elm_ui$Element$alpha(1)
							])),
					openButton: $author$project$Icons$chevronDown(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$alpha(1)
							]))
				},
				A2(
					$author$project$StyledElement$DropDown$withPromptElement,
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$color(
								A3($mdgriffith$elm_ui$Element$rgb255, 123, 123, 123))
							]),
						$mdgriffith$elm_ui$Element$text(prompt)),
					A2(
						$author$project$StyledElement$DropDown$withSearchAttributes,
						searchAttrs,
						A2(
							$author$project$StyledElement$DropDown$withListAttributes,
							listAttrs,
							A2(
								$author$project$StyledElement$DropDown$withSelectAttributes,
								selectAttrs,
								A2(
									$author$project$StyledElement$DropDown$withContainerAttributes,
									containerAttrs,
									A6($author$project$StyledElement$DropDown$filterable, dropDownMsgWrapper, onPickMsg, itemToPrompt, itemToElement, toString, icon))))))));
	});
var $mdgriffith$elm_ui$Internal$Model$Below = {$: 'Below'};
var $mdgriffith$elm_ui$Internal$Model$Nearby = F2(
	function (a, b) {
		return {$: 'Nearby', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$NoAttribute = {$: 'NoAttribute'};
var $mdgriffith$elm_ui$Element$createNearby = F2(
	function (loc, element) {
		if (element.$ === 'Empty') {
			return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
		} else {
			return A2($mdgriffith$elm_ui$Internal$Model$Nearby, loc, element);
		}
	});
var $mdgriffith$elm_ui$Element$below = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, $mdgriffith$elm_ui$Internal$Model$Below, element);
};
var $mdgriffith$elm_ui$Internal$Model$AlignX = function (a) {
	return {$: 'AlignX', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$CenterX = {$: 'CenterX'};
var $mdgriffith$elm_ui$Element$centerX = $mdgriffith$elm_ui$Internal$Model$AlignX($mdgriffith$elm_ui$Internal$Model$CenterX);
var $mdgriffith$elm_ui$Internal$Model$AsColumn = {$: 'AsColumn'};
var $mdgriffith$elm_ui$Internal$Model$asColumn = $mdgriffith$elm_ui$Internal$Model$AsColumn;
var $mdgriffith$elm_ui$Element$column = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asColumn,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentTop + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.contentLeft)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $mdgriffith$elm_ui$Element$Events$onClick = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Events$onClick);
var $author$project$StyledElement$DropDown$onClick = function (message) {
	return $mdgriffith$elm_ui$Element$Events$onClick(message);
};
var $elm$html$Html$Attributes$attribute = $elm$virtual_dom$VirtualDom$attribute;
var $author$project$StyledElement$DropDown$referenceDataName = 'data-dropdown-id';
var $author$project$StyledElement$DropDown$referenceAttr = function (model) {
	return $mdgriffith$elm_ui$Element$htmlAttribute(
		A2($elm$html$Html$Attributes$attribute, $author$project$StyledElement$DropDown$referenceDataName, model.id));
};
var $elm$html$Html$Attributes$tabindex = function (n) {
	return A2(
		_VirtualDom_attribute,
		'tabIndex',
		$elm$core$String$fromInt(n));
};
var $author$project$StyledElement$DropDown$tabIndexAttr = function (tabIndex) {
	return $mdgriffith$elm_ui$Element$htmlAttribute(
		$elm$html$Html$Attributes$tabindex(tabIndex));
};
var $author$project$StyledElement$DropDown$itemView = F4(
	function (config, state, i, item) {
		var selected = _Utils_eq(
			state.selectedItem,
			$elm$core$Maybe$Just(item));
		var itemAttrs = _List_fromArray(
			[
				$author$project$StyledElement$DropDown$onClick(
				config.dropdownMsg(
					$author$project$StyledElement$DropDown$OnSelect(item))),
				$author$project$StyledElement$DropDown$referenceAttr(state),
				$author$project$StyledElement$DropDown$tabIndexAttr(-1),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]);
		var highlighed = _Utils_eq(i, state.focusedIndex);
		return A2(
			$mdgriffith$elm_ui$Element$el,
			itemAttrs,
			A3(config.itemToElement, selected, highlighed, item));
	});
var $author$project$Icons$loading = function (attrs) {
	return A2(
		$author$project$Icons$iconNamed,
		'images/loading.svg',
		A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$px(48)),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(48)),
				attrs)));
};
var $mdgriffith$elm_ui$Internal$Model$Empty = {$: 'Empty'};
var $mdgriffith$elm_ui$Element$none = $mdgriffith$elm_ui$Internal$Model$Empty;
var $author$project$StyledElement$DropDown$bodyView = F3(
	function (config, state, data) {
		if (state.isOpen) {
			var items = A2(
				$mdgriffith$elm_ui$Element$column,
				config.listAttributes,
				$elm$core$List$concat(
					_List_fromArray(
						[
							A2(
							$elm$core$List$indexedMap,
							A2($author$project$StyledElement$DropDown$itemView, config, state),
							data),
							config.isLoading ? _List_fromArray(
							[
								$author$project$Icons$loading(
								_List_fromArray(
									[$mdgriffith$elm_ui$Element$centerX]))
							]) : _List_Nil
						])));
			var body = A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				items);
			return body;
		} else {
			return $mdgriffith$elm_ui$Element$none;
		}
	});
var $author$project$StyledElement$DropDown$idAttr = function (id) {
	return $mdgriffith$elm_ui$Element$htmlAttribute(
		$elm$html$Html$Attributes$id(id));
};
var $author$project$StyledElement$DropDown$Basic = {$: 'Basic'};
var $author$project$StyledElement$DropDown$NoOp = {$: 'NoOp'};
var $author$project$StyledElement$DropDown$OnClickPrompt = {$: 'OnClickPrompt'};
var $author$project$StyledElement$DropDown$OnFilterTyped = function (a) {
	return {$: 'OnFilterTyped', a: a};
};
var $author$project$StyledElement$DropDown$OnKeyDown = function (a) {
	return {$: 'OnKeyDown', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Focus = {$: 'Focus'};
var $mdgriffith$elm_ui$Internal$Model$PseudoSelector = F2(
	function (a, b) {
		return {$: 'PseudoSelector', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$focus = $mdgriffith$elm_ui$Internal$Flag$flag(31);
var $mdgriffith$elm_ui$Internal$Model$Describe = function (a) {
	return {$: 'Describe', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$map = F2(
	function (fn, el) {
		switch (el.$) {
			case 'Styled':
				var styled = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						html: F2(
							function (add, context) {
								return A2(
									$elm$virtual_dom$VirtualDom$map,
									fn,
									A2(styled.html, add, context));
							}),
						styles: styled.styles
					});
			case 'Unstyled':
				var html = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A2(
						$elm$core$Basics$composeL,
						$elm$virtual_dom$VirtualDom$map(fn),
						html));
			case 'Text':
				var str = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Text(str);
			default:
				return $mdgriffith$elm_ui$Internal$Model$Empty;
		}
	});
var $elm$virtual_dom$VirtualDom$mapAttribute = _VirtualDom_mapAttribute;
var $mdgriffith$elm_ui$Internal$Model$mapAttrFromStyle = F2(
	function (fn, attr) {
		switch (attr.$) {
			case 'NoAttribute':
				return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
			case 'Describe':
				var description = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Describe(description);
			case 'AlignX':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignX(x);
			case 'AlignY':
				var y = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignY(y);
			case 'Width':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Width(x);
			case 'Height':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Height(x);
			case 'Class':
				var x = attr.a;
				var y = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Class, x, y);
			case 'StyleClass':
				var flag = attr.a;
				var style = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, flag, style);
			case 'Nearby':
				var location = attr.a;
				var elem = attr.b;
				return A2(
					$mdgriffith$elm_ui$Internal$Model$Nearby,
					location,
					A2($mdgriffith$elm_ui$Internal$Model$map, fn, elem));
			case 'Attr':
				var htmlAttr = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Attr(
					A2($elm$virtual_dom$VirtualDom$mapAttribute, fn, htmlAttr));
			default:
				var fl = attr.a;
				var trans = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$TransformComponent, fl, trans);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$removeNever = function (style) {
	return A2($mdgriffith$elm_ui$Internal$Model$mapAttrFromStyle, $elm$core$Basics$never, style);
};
var $mdgriffith$elm_ui$Internal$Model$unwrapDecsHelper = F2(
	function (attr, _v0) {
		var styles = _v0.a;
		var trans = _v0.b;
		var _v1 = $mdgriffith$elm_ui$Internal$Model$removeNever(attr);
		switch (_v1.$) {
			case 'StyleClass':
				var style = _v1.b;
				return _Utils_Tuple2(
					A2($elm$core$List$cons, style, styles),
					trans);
			case 'TransformComponent':
				var flag = _v1.a;
				var component = _v1.b;
				return _Utils_Tuple2(
					styles,
					A2($mdgriffith$elm_ui$Internal$Model$composeTransformation, trans, component));
			default:
				return _Utils_Tuple2(styles, trans);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$unwrapDecorations = function (attrs) {
	var _v0 = A3(
		$elm$core$List$foldl,
		$mdgriffith$elm_ui$Internal$Model$unwrapDecsHelper,
		_Utils_Tuple2(_List_Nil, $mdgriffith$elm_ui$Internal$Model$Untransformed),
		attrs);
	var styles = _v0.a;
	var transform = _v0.b;
	return A2(
		$elm$core$List$cons,
		$mdgriffith$elm_ui$Internal$Model$Transform(transform),
		styles);
};
var $mdgriffith$elm_ui$Element$focused = function (decs) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$focus,
		A2(
			$mdgriffith$elm_ui$Internal$Model$PseudoSelector,
			$mdgriffith$elm_ui$Internal$Model$Focus,
			$mdgriffith$elm_ui$Internal$Model$unwrapDecorations(decs)));
};
var $mdgriffith$elm_ui$Element$Input$HiddenLabel = function (a) {
	return {$: 'HiddenLabel', a: a};
};
var $mdgriffith$elm_ui$Element$Input$labelHidden = $mdgriffith$elm_ui$Element$Input$HiddenLabel;
var $author$project$StyledElement$DropDown$OnBlur = {$: 'OnBlur'};
var $elm$json$Json$Decode$maybe = function (decoder) {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, decoder),
				$elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing)
			]));
};
var $author$project$StyledElement$DropDown$onBlurAttribute = F2(
	function (config, state) {
		var dataDecoder = A2(
			$elm$json$Json$Decode$at,
			_List_fromArray(
				['relatedTarget', 'attributes', $author$project$StyledElement$DropDown$referenceDataName, 'value']),
			$elm$json$Json$Decode$string);
		var attrToMsg = function (attr) {
			return _Utils_eq(attr, state.id) ? config.dropdownMsg($author$project$StyledElement$DropDown$NoOp) : config.dropdownMsg($author$project$StyledElement$DropDown$OnBlur);
		};
		var blur = A2(
			$elm$json$Json$Decode$map,
			$elm$core$Maybe$withDefault(
				config.dropdownMsg($author$project$StyledElement$DropDown$OnBlur)),
			A2(
				$elm$json$Json$Decode$map,
				$elm$core$Maybe$map(attrToMsg),
				$elm$json$Json$Decode$maybe(dataDecoder)));
		return $mdgriffith$elm_ui$Element$htmlAttribute(
			A2($elm$html$Html$Events$on, 'blur', blur));
	});
var $elm$virtual_dom$VirtualDom$Custom = function (a) {
	return {$: 'Custom', a: a};
};
var $elm$html$Html$Events$custom = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$Custom(decoder));
	});
var $author$project$StyledElement$DropDown$onClickNoPropagation = function (msg) {
	return $mdgriffith$elm_ui$Element$htmlAttribute(
		A2(
			$elm$html$Html$Events$custom,
			'click',
			$elm$json$Json$Decode$succeed(
				{message: msg, preventDefault: true, stopPropagation: true})));
};
var $author$project$StyledElement$DropDown$ArrowDown = {$: 'ArrowDown'};
var $author$project$StyledElement$DropDown$ArrowUp = {$: 'ArrowUp'};
var $author$project$StyledElement$DropDown$Enter = {$: 'Enter'};
var $author$project$StyledElement$DropDown$Esc = {$: 'Esc'};
var $author$project$StyledElement$DropDown$onKeyDown = function (msg) {
	var stringToKey = function (str) {
		switch (str) {
			case 'ArrowDown':
				return $elm$json$Json$Decode$succeed($author$project$StyledElement$DropDown$ArrowDown);
			case 'ArrowUp':
				return $elm$json$Json$Decode$succeed($author$project$StyledElement$DropDown$ArrowUp);
			case 'Enter':
				return $elm$json$Json$Decode$succeed($author$project$StyledElement$DropDown$Enter);
			case 'Escape':
				return $elm$json$Json$Decode$succeed($author$project$StyledElement$DropDown$Esc);
			default:
				return $elm$json$Json$Decode$fail('not used key');
		}
	};
	var keyDecoder = A2(
		$elm$json$Json$Decode$andThen,
		stringToKey,
		A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string));
	return $mdgriffith$elm_ui$Element$htmlAttribute(
		A2(
			$elm$html$Html$Events$on,
			'keydown',
			A2($elm$json$Json$Decode$map, msg, keyDecoder)));
};
var $mdgriffith$elm_ui$Element$Input$Placeholder = F2(
	function (a, b) {
		return {$: 'Placeholder', a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$Input$placeholder = $mdgriffith$elm_ui$Element$Input$Placeholder;
var $mdgriffith$elm_ui$Internal$Model$AsRow = {$: 'AsRow'};
var $mdgriffith$elm_ui$Internal$Model$asRow = $mdgriffith$elm_ui$Internal$Model$AsRow;
var $mdgriffith$elm_ui$Element$row = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asRow,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $mdgriffith$elm_ui$Element$Input$TextInputNode = function (a) {
	return {$: 'TextInputNode', a: a};
};
var $mdgriffith$elm_ui$Element$Input$TextArea = {$: 'TextArea'};
var $mdgriffith$elm_ui$Internal$Model$LivePolite = {$: 'LivePolite'};
var $mdgriffith$elm_ui$Element$Region$announce = $mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$LivePolite);
var $mdgriffith$elm_ui$Element$Input$applyLabel = F3(
	function (attrs, label, input) {
		if (label.$ === 'HiddenLabel') {
			var labelText = label.a;
			return A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asColumn,
				$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
				attrs,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[input])));
		} else {
			var position = label.a;
			var labelAttrs = label.b;
			var labelChild = label.c;
			var labelElement = A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				labelAttrs,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[labelChild])));
			switch (position.$) {
				case 'Above':
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asColumn,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						attrs,
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[labelElement, input])));
				case 'Below':
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asColumn,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						attrs,
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[input, labelElement])));
				case 'OnRight':
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asRow,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						attrs,
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[input, labelElement])));
				default:
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asRow,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						attrs,
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[labelElement, input])));
			}
		}
	});
var $mdgriffith$elm_ui$Element$Input$autofill = A2(
	$elm$core$Basics$composeL,
	$mdgriffith$elm_ui$Internal$Model$Attr,
	$elm$html$Html$Attributes$attribute('autocomplete'));
var $mdgriffith$elm_ui$Internal$Model$Behind = {$: 'Behind'};
var $mdgriffith$elm_ui$Element$behindContent = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, $mdgriffith$elm_ui$Internal$Model$Behind, element);
};
var $mdgriffith$elm_ui$Internal$Model$MoveY = function (a) {
	return {$: 'MoveY', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$moveY = $mdgriffith$elm_ui$Internal$Flag$flag(26);
var $mdgriffith$elm_ui$Element$moveUp = function (y) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveY,
		$mdgriffith$elm_ui$Internal$Model$MoveY(-y));
};
var $mdgriffith$elm_ui$Element$Input$calcMoveToCompensateForPadding = function (attrs) {
	var gatherSpacing = F2(
		function (attr, found) {
			if ((attr.$ === 'StyleClass') && (attr.b.$ === 'SpacingStyle')) {
				var _v2 = attr.b;
				var x = _v2.b;
				var y = _v2.c;
				if (found.$ === 'Nothing') {
					return $elm$core$Maybe$Just(y);
				} else {
					return found;
				}
			} else {
				return found;
			}
		});
	var _v0 = A3($elm$core$List$foldr, gatherSpacing, $elm$core$Maybe$Nothing, attrs);
	if (_v0.$ === 'Nothing') {
		return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
	} else {
		var vSpace = _v0.a;
		return $mdgriffith$elm_ui$Element$moveUp(
			$elm$core$Basics$floor(vSpace / 2));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$cursor = $mdgriffith$elm_ui$Internal$Flag$flag(21);
var $mdgriffith$elm_ui$Element$Input$darkGrey = A3($mdgriffith$elm_ui$Element$rgb, 186 / 255, 189 / 255, 182 / 255);
var $mdgriffith$elm_ui$Element$Input$defaultTextPadding = A2($mdgriffith$elm_ui$Element$paddingXY, 12, 12);
var $mdgriffith$elm_ui$Internal$Flag$borderRound = $mdgriffith$elm_ui$Internal$Flag$flag(17);
var $mdgriffith$elm_ui$Element$Border$rounded = function (radius) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderRound,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			'br-' + $elm$core$String$fromInt(radius),
			'border-radius',
			$elm$core$String$fromInt(radius) + 'px'));
};
var $mdgriffith$elm_ui$Element$Input$white = A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1);
var $mdgriffith$elm_ui$Element$Input$defaultTextBoxStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$Input$defaultTextPadding,
		$mdgriffith$elm_ui$Element$Border$rounded(3),
		$mdgriffith$elm_ui$Element$Border$color($mdgriffith$elm_ui$Element$Input$darkGrey),
		$mdgriffith$elm_ui$Element$Background$color($mdgriffith$elm_ui$Element$Input$white),
		$mdgriffith$elm_ui$Element$Border$width(1),
		$mdgriffith$elm_ui$Element$spacing(5),
		$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
		$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink)
	]);
var $mdgriffith$elm_ui$Element$Input$getHeight = function (attr) {
	if (attr.$ === 'Height') {
		var h = attr.a;
		return $elm$core$Maybe$Just(h);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Element$Input$hasFocusStyle = function (attr) {
	if (((attr.$ === 'StyleClass') && (attr.b.$ === 'PseudoSelector')) && (attr.b.a.$ === 'Focus')) {
		var _v1 = attr.b;
		var _v2 = _v1.a;
		return true;
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Internal$Model$Label = function (a) {
	return {$: 'Label', a: a};
};
var $mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute = function (label) {
	if (label.$ === 'HiddenLabel') {
		var textLabel = label.a;
		return $mdgriffith$elm_ui$Internal$Model$Describe(
			$mdgriffith$elm_ui$Internal$Model$Label(textLabel));
	} else {
		return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
	}
};
var $mdgriffith$elm_ui$Internal$Model$InFront = {$: 'InFront'};
var $mdgriffith$elm_ui$Element$inFront = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, $mdgriffith$elm_ui$Internal$Model$InFront, element);
};
var $mdgriffith$elm_ui$Element$Input$isConstrained = function (len) {
	isConstrained:
	while (true) {
		switch (len.$) {
			case 'Content':
				return false;
			case 'Px':
				return true;
			case 'Fill':
				return true;
			case 'Min':
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isConstrained;
			default:
				var l = len.b;
				return true;
		}
	}
};
var $mdgriffith$elm_ui$Element$Input$isHiddenLabel = function (label) {
	if (label.$ === 'HiddenLabel') {
		return true;
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Element$Input$isStacked = function (label) {
	if (label.$ === 'Label') {
		var loc = label.a;
		switch (loc.$) {
			case 'OnRight':
				return false;
			case 'OnLeft':
				return false;
			case 'Above':
				return true;
			default:
				return true;
		}
	} else {
		return true;
	}
};
var $mdgriffith$elm_ui$Element$Input$negateBox = function (box) {
	return {bottom: -box.bottom, left: -box.left, right: -box.right, top: -box.top};
};
var $mdgriffith$elm_ui$Internal$Model$paddingName = F4(
	function (top, right, bottom, left) {
		return 'pad-' + ($elm$core$String$fromInt(top) + ('-' + ($elm$core$String$fromInt(right) + ('-' + ($elm$core$String$fromInt(bottom) + ('-' + $elm$core$String$fromInt(left)))))));
	});
var $mdgriffith$elm_ui$Element$paddingEach = function (_v0) {
	var top = _v0.top;
	var right = _v0.right;
	var bottom = _v0.bottom;
	var left = _v0.left;
	return (_Utils_eq(top, right) && (_Utils_eq(top, bottom) && _Utils_eq(top, left))) ? A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$padding,
		A5(
			$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
			'p-' + $elm$core$String$fromInt(top),
			top,
			top,
			top,
			top)) : A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$padding,
		A5(
			$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
			A4($mdgriffith$elm_ui$Internal$Model$paddingName, top, right, bottom, left),
			top,
			right,
			bottom,
			left));
};
var $mdgriffith$elm_ui$Element$Input$isFill = function (len) {
	isFill:
	while (true) {
		switch (len.$) {
			case 'Fill':
				return true;
			case 'Content':
				return false;
			case 'Px':
				return false;
			case 'Min':
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isFill;
			default:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isFill;
		}
	}
};
var $mdgriffith$elm_ui$Element$Input$isPixel = function (len) {
	isPixel:
	while (true) {
		switch (len.$) {
			case 'Content':
				return false;
			case 'Px':
				return true;
			case 'Fill':
				return false;
			case 'Min':
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isPixel;
			default:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isPixel;
		}
	}
};
var $mdgriffith$elm_ui$Element$Input$redistributeOver = F4(
	function (isMultiline, stacked, attr, els) {
		switch (attr.$) {
			case 'Nearby':
				return _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					});
			case 'Width':
				var width = attr.a;
				return $mdgriffith$elm_ui$Element$Input$isFill(width) ? _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent),
						input: A2($elm$core$List$cons, attr, els.input),
						parent: A2($elm$core$List$cons, attr, els.parent)
					}) : (stacked ? _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent)
					}) : _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					}));
			case 'Height':
				var height = attr.a;
				return (!stacked) ? _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent),
						parent: A2($elm$core$List$cons, attr, els.parent)
					}) : ($mdgriffith$elm_ui$Element$Input$isFill(height) ? _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent),
						parent: A2($elm$core$List$cons, attr, els.parent)
					}) : ($mdgriffith$elm_ui$Element$Input$isPixel(height) ? _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					}) : _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					})));
			case 'AlignX':
				return _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent)
					});
			case 'AlignY':
				return _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent)
					});
			case 'StyleClass':
				switch (attr.b.$) {
					case 'SpacingStyle':
						var _v1 = attr.b;
						return _Utils_update(
							els,
							{
								fullParent: A2($elm$core$List$cons, attr, els.fullParent),
								input: A2($elm$core$List$cons, attr, els.input),
								parent: A2($elm$core$List$cons, attr, els.parent),
								wrapper: A2($elm$core$List$cons, attr, els.wrapper)
							});
					case 'PaddingStyle':
						var cls = attr.a;
						var _v2 = attr.b;
						var pad = _v2.a;
						var t = _v2.b;
						var r = _v2.c;
						var b = _v2.d;
						var l = _v2.e;
						if (isMultiline) {
							return _Utils_update(
								els,
								{
									cover: A2($elm$core$List$cons, attr, els.cover),
									parent: A2($elm$core$List$cons, attr, els.parent)
								});
						} else {
							var reducedVerticalPadding = $mdgriffith$elm_ui$Element$paddingEach(
								{
									bottom: b - A2($elm$core$Basics$min, t, b),
									left: l,
									right: r,
									top: t - A2($elm$core$Basics$min, t, b)
								});
							var newLineHeight = $mdgriffith$elm_ui$Element$htmlAttribute(
								A2(
									$elm$html$Html$Attributes$style,
									'line-height',
									'calc(1.0em + ' + ($elm$core$String$fromInt(
										2 * A2($elm$core$Basics$min, t, b)) + 'px)')));
							var newHeight = $mdgriffith$elm_ui$Element$htmlAttribute(
								A2(
									$elm$html$Html$Attributes$style,
									'height',
									'calc(1.0em + ' + ($elm$core$String$fromInt(
										2 * A2($elm$core$Basics$min, t, b)) + 'px)')));
							return _Utils_update(
								els,
								{
									cover: A2($elm$core$List$cons, attr, els.cover),
									input: A2(
										$elm$core$List$cons,
										newHeight,
										A2($elm$core$List$cons, newLineHeight, els.input)),
									parent: A2($elm$core$List$cons, reducedVerticalPadding, els.parent)
								});
						}
					case 'BorderWidth':
						var _v3 = attr.b;
						return _Utils_update(
							els,
							{
								cover: A2($elm$core$List$cons, attr, els.cover),
								parent: A2($elm$core$List$cons, attr, els.parent)
							});
					case 'Transform':
						return _Utils_update(
							els,
							{
								cover: A2($elm$core$List$cons, attr, els.cover),
								parent: A2($elm$core$List$cons, attr, els.parent)
							});
					case 'FontSize':
						return _Utils_update(
							els,
							{
								fullParent: A2($elm$core$List$cons, attr, els.fullParent)
							});
					case 'FontFamily':
						var _v4 = attr.b;
						return _Utils_update(
							els,
							{
								fullParent: A2($elm$core$List$cons, attr, els.fullParent)
							});
					default:
						var flag = attr.a;
						var cls = attr.b;
						return _Utils_update(
							els,
							{
								parent: A2($elm$core$List$cons, attr, els.parent)
							});
				}
			case 'NoAttribute':
				return els;
			case 'Attr':
				var a = attr.a;
				return _Utils_update(
					els,
					{
						input: A2($elm$core$List$cons, attr, els.input)
					});
			case 'Describe':
				return _Utils_update(
					els,
					{
						input: A2($elm$core$List$cons, attr, els.input)
					});
			case 'Class':
				return _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					});
			default:
				return _Utils_update(
					els,
					{
						input: A2($elm$core$List$cons, attr, els.input)
					});
		}
	});
var $mdgriffith$elm_ui$Element$Input$redistribute = F3(
	function (isMultiline, stacked, attrs) {
		return function (redist) {
			return {
				cover: $elm$core$List$reverse(redist.cover),
				fullParent: $elm$core$List$reverse(redist.fullParent),
				input: $elm$core$List$reverse(redist.input),
				parent: $elm$core$List$reverse(redist.parent),
				wrapper: $elm$core$List$reverse(redist.wrapper)
			};
		}(
			A3(
				$elm$core$List$foldl,
				A2($mdgriffith$elm_ui$Element$Input$redistributeOver, isMultiline, stacked),
				{cover: _List_Nil, fullParent: _List_Nil, input: _List_Nil, parent: _List_Nil, wrapper: _List_Nil},
				attrs));
	});
var $mdgriffith$elm_ui$Element$Input$renderBox = function (_v0) {
	var top = _v0.top;
	var right = _v0.right;
	var bottom = _v0.bottom;
	var left = _v0.left;
	return $elm$core$String$fromInt(top) + ('px ' + ($elm$core$String$fromInt(right) + ('px ' + ($elm$core$String$fromInt(bottom) + ('px ' + ($elm$core$String$fromInt(left) + 'px'))))));
};
var $mdgriffith$elm_ui$Element$Input$charcoal = A3($mdgriffith$elm_ui$Element$rgb, 136 / 255, 138 / 255, 133 / 255);
var $mdgriffith$elm_ui$Element$Input$renderPlaceholder = F3(
	function (_v0, forPlaceholder, on) {
		var placeholderAttrs = _v0.a;
		var placeholderEl = _v0.b;
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_Utils_ap(
				forPlaceholder,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($mdgriffith$elm_ui$Element$Input$charcoal),
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.noTextSelection + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.passPointerEvents)),
							$mdgriffith$elm_ui$Element$clip,
							$mdgriffith$elm_ui$Element$Border$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0)),
							$mdgriffith$elm_ui$Element$Background$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0)),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$alpha(
							on ? 1 : 0)
						]),
					placeholderAttrs)),
			placeholderEl);
	});
var $elm$html$Html$Attributes$boolProperty = F2(
	function (key, bool) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$bool(bool));
	});
var $elm$html$Html$Attributes$spellcheck = $elm$html$Html$Attributes$boolProperty('spellcheck');
var $mdgriffith$elm_ui$Element$Input$spellcheck = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$spellcheck);
var $mdgriffith$elm_ui$Internal$Model$unstyled = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Unstyled, $elm$core$Basics$always);
var $mdgriffith$elm_ui$Element$Input$value = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$value);
var $mdgriffith$elm_ui$Element$Input$textHelper = F3(
	function (textInput, attrs, textOptions) {
		var withDefaults = _Utils_ap($mdgriffith$elm_ui$Element$Input$defaultTextBoxStyle, attrs);
		var redistributed = A3(
			$mdgriffith$elm_ui$Element$Input$redistribute,
			_Utils_eq(textInput.type_, $mdgriffith$elm_ui$Element$Input$TextArea),
			$mdgriffith$elm_ui$Element$Input$isStacked(textOptions.label),
			withDefaults);
		var onlySpacing = function (attr) {
			if ((attr.$ === 'StyleClass') && (attr.b.$ === 'SpacingStyle')) {
				var _v9 = attr.b;
				return true;
			} else {
				return false;
			}
		};
		var heightConstrained = function () {
			var _v7 = textInput.type_;
			if (_v7.$ === 'TextInputNode') {
				var inputType = _v7.a;
				return false;
			} else {
				return A2(
					$elm$core$Maybe$withDefault,
					false,
					A2(
						$elm$core$Maybe$map,
						$mdgriffith$elm_ui$Element$Input$isConstrained,
						$elm$core$List$head(
							$elm$core$List$reverse(
								A2($elm$core$List$filterMap, $mdgriffith$elm_ui$Element$Input$getHeight, withDefaults)))));
			}
		}();
		var getPadding = function (attr) {
			if ((attr.$ === 'StyleClass') && (attr.b.$ === 'PaddingStyle')) {
				var cls = attr.a;
				var _v6 = attr.b;
				var pad = _v6.a;
				var t = _v6.b;
				var r = _v6.c;
				var b = _v6.d;
				var l = _v6.e;
				return $elm$core$Maybe$Just(
					{
						bottom: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(b - 3)),
						left: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(l - 3)),
						right: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(r - 3)),
						top: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(t - 3))
					});
			} else {
				return $elm$core$Maybe$Nothing;
			}
		};
		var parentPadding = A2(
			$elm$core$Maybe$withDefault,
			{bottom: 0, left: 0, right: 0, top: 0},
			$elm$core$List$head(
				$elm$core$List$reverse(
					A2($elm$core$List$filterMap, getPadding, withDefaults))));
		var inputElement = A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			function () {
				var _v3 = textInput.type_;
				if (_v3.$ === 'TextInputNode') {
					var inputType = _v3.a;
					return $mdgriffith$elm_ui$Internal$Model$NodeName('input');
				} else {
					return $mdgriffith$elm_ui$Internal$Model$NodeName('textarea');
				}
			}(),
			_Utils_ap(
				function () {
					var _v4 = textInput.type_;
					if (_v4.$ === 'TextInputNode') {
						var inputType = _v4.a;
						return _List_fromArray(
							[
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$type_(inputType)),
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputText)
							]);
					} else {
						return _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$clip,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputMultiline),
								$mdgriffith$elm_ui$Element$Input$calcMoveToCompensateForPadding(withDefaults),
								$mdgriffith$elm_ui$Element$paddingEach(parentPadding),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								A2(
									$elm$html$Html$Attributes$style,
									'margin',
									$mdgriffith$elm_ui$Element$Input$renderBox(
										$mdgriffith$elm_ui$Element$Input$negateBox(parentPadding)))),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$style, 'box-sizing', 'content-box'))
							]);
					}
				}(),
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Input$value(textOptions.text),
							$mdgriffith$elm_ui$Internal$Model$Attr(
							$elm$html$Html$Events$onInput(textOptions.onChange)),
							$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(textOptions.label),
							$mdgriffith$elm_ui$Element$Input$spellcheck(textInput.spellchecked),
							A2(
							$elm$core$Maybe$withDefault,
							$mdgriffith$elm_ui$Internal$Model$NoAttribute,
							A2($elm$core$Maybe$map, $mdgriffith$elm_ui$Element$Input$autofill, textInput.autofill))
						]),
					redistributed.input)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_Nil));
		var wrappedInput = function () {
			var _v0 = textInput.type_;
			if (_v0.$ === 'TextArea') {
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					_Utils_ap(
						(heightConstrained ? $elm$core$List$cons($mdgriffith$elm_ui$Element$scrollbarY) : $elm$core$Basics$identity)(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, withDefaults) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.focusedWithin),
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineWrapper)
								])),
						redistributed.parent),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[
								A4(
								$mdgriffith$elm_ui$Internal$Model$element,
								$mdgriffith$elm_ui$Internal$Model$asParagraph,
								$mdgriffith$elm_ui$Internal$Model$div,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
										A2(
											$elm$core$List$cons,
											$mdgriffith$elm_ui$Element$inFront(inputElement),
											A2(
												$elm$core$List$cons,
												$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineParent),
												redistributed.wrapper)))),
								$mdgriffith$elm_ui$Internal$Model$Unkeyed(
									function () {
										if (textOptions.text === '') {
											var _v1 = textOptions.placeholder;
											if (_v1.$ === 'Nothing') {
												return _List_fromArray(
													[
														$mdgriffith$elm_ui$Element$text('\u00A0')
													]);
											} else {
												var place = _v1.a;
												return _List_fromArray(
													[
														A3($mdgriffith$elm_ui$Element$Input$renderPlaceholder, place, _List_Nil, textOptions.text === '')
													]);
											}
										} else {
											return _List_fromArray(
												[
													$mdgriffith$elm_ui$Internal$Model$unstyled(
													A2(
														$elm$html$Html$span,
														_List_fromArray(
															[
																$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineFiller)
															]),
														_List_fromArray(
															[
																$elm$html$Html$text(textOptions.text + '\u00A0')
															])))
												]);
										}
									}()))
							])));
			} else {
				var inputType = _v0.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						A2(
							$elm$core$List$cons,
							A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, withDefaults) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.focusedWithin),
							$elm$core$List$concat(
								_List_fromArray(
									[
										redistributed.parent,
										function () {
										var _v2 = textOptions.placeholder;
										if (_v2.$ === 'Nothing') {
											return _List_Nil;
										} else {
											var place = _v2.a;
											return _List_fromArray(
												[
													$mdgriffith$elm_ui$Element$behindContent(
													A3($mdgriffith$elm_ui$Element$Input$renderPlaceholder, place, redistributed.cover, textOptions.text === ''))
												]);
										}
									}()
									])))),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[inputElement])));
			}
		}();
		return A3(
			$mdgriffith$elm_ui$Element$Input$applyLabel,
			A2(
				$elm$core$List$cons,
				A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$cursor, $mdgriffith$elm_ui$Internal$Style$classes.cursorText),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$Input$isHiddenLabel(textOptions.label) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Element$spacing(5),
					A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$Region$announce, redistributed.fullParent))),
			textOptions.label,
			wrappedInput);
	});
var $mdgriffith$elm_ui$Element$Input$search = $mdgriffith$elm_ui$Element$Input$textHelper(
	{
		autofill: $elm$core$Maybe$Nothing,
		spellchecked: false,
		type_: $mdgriffith$elm_ui$Element$Input$TextInputNode('search')
	});
var $author$project$StyledElement$DropDown$triggerView = F2(
	function (config, state) {
		var wrapView = function (wrappedView) {
			return A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing(16)
					]),
				_List_fromArray(
					[
						A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$none, config.icon),
						wrappedView
					]));
		};
		var selectAttrs = _Utils_ap(
			_List_fromArray(
				[
					$author$project$StyledElement$DropDown$onClick(
					config.dropdownMsg($author$project$StyledElement$DropDown$OnClickPrompt)),
					$author$project$StyledElement$DropDown$onKeyDown(
					A2($elm$core$Basics$composeL, config.dropdownMsg, $author$project$StyledElement$DropDown$OnKeyDown)),
					$author$project$StyledElement$DropDown$tabIndexAttr(0),
					$author$project$StyledElement$DropDown$referenceAttr(state)
				]),
			_Utils_ap(
				_Utils_eq(config.dropdownType, $author$project$StyledElement$DropDown$Basic) ? _List_fromArray(
					[
						A2($author$project$StyledElement$DropDown$onBlurAttribute, config, state)
					]) : _List_Nil,
				config.selectAttributes));
		var prompt = A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			function () {
				var _v2 = state.selectedItem;
				if (_v2.$ === 'Just') {
					var selectedItem = _v2.a;
					return config.itemToPrompt(selectedItem);
				} else {
					return config.promptElement;
				}
			}());
		var search = function () {
			var _v1 = config.dropdownType;
			if (_v1.$ === 'Basic') {
				return prompt;
			} else {
				return A2(
					$mdgriffith$elm_ui$Element$Input$search,
					_Utils_ap(
						_List_fromArray(
							[
								$author$project$StyledElement$DropDown$idAttr(state.id + 'input-search'),
								$mdgriffith$elm_ui$Element$focused(_List_Nil),
								$author$project$StyledElement$DropDown$onClickNoPropagation(
								config.dropdownMsg($author$project$StyledElement$DropDown$NoOp)),
								A2($author$project$StyledElement$DropDown$onBlurAttribute, config, state)
							]),
						config.searchAttributes),
					{
						label: $mdgriffith$elm_ui$Element$Input$labelHidden('Search...'),
						onChange: A2($elm$core$Basics$composeL, config.dropdownMsg, $author$project$StyledElement$DropDown$OnFilterTyped),
						placeholder: $elm$core$Maybe$Just(
							A2(
								$mdgriffith$elm_ui$Element$Input$placeholder,
								_List_Nil,
								$mdgriffith$elm_ui$Element$text(config.filterPlaceholder))),
						text: state.filterText
					});
			}
		}();
		var _v0 = state.isOpen ? _Utils_Tuple2(
			wrapView(search),
			A2($mdgriffith$elm_ui$Element$el, _List_Nil, config.closeButton)) : _Utils_Tuple2(
			wrapView(prompt),
			A2($mdgriffith$elm_ui$Element$el, _List_Nil, config.openButton));
		var promptOrSearch = _v0.a;
		var button = _v0.b;
		return A2(
			$mdgriffith$elm_ui$Element$row,
			selectAttrs,
			_List_fromArray(
				[promptOrSearch, button]));
	});
var $author$project$StyledElement$DropDown$view = F3(
	function (_v0, _v1, data) {
		var config = _v0.a;
		var state = _v1.a;
		var trigger = A2($author$project$StyledElement$DropDown$triggerView, config, state);
		var filter = function (item) {
			return A2(
				$elm$core$String$contains,
				$elm$core$String$toLower(state.filterText),
				$elm$core$String$toLower(
					config.itemToText(item)));
		};
		var filteredData = A2($elm$core$List$filter, filter, data);
		var body = A3($author$project$StyledElement$DropDown$bodyView, config, state, filteredData);
		var containerAttrs = _Utils_ap(
			_List_fromArray(
				[
					$author$project$StyledElement$DropDown$idAttr(state.id),
					$mdgriffith$elm_ui$Element$below(body)
				]),
			config.containerAttributes);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			containerAttrs,
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$below(body)
						]),
					trigger)
				]));
	});
var $author$project$Style$captionLabelStyle = _Utils_ap(
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Font$size(13),
			$mdgriffith$elm_ui$Element$Font$color(
			A2(
				$author$project$Colors$withAlpha,
				A3($mdgriffith$elm_ui$Element$rgb255, 4, 30, 37),
				0.69))
		]),
	$author$project$Style$defaultFontFace);
var $mdgriffith$elm_ui$Internal$Model$CenterY = {$: 'CenterY'};
var $mdgriffith$elm_ui$Element$centerY = $mdgriffith$elm_ui$Internal$Model$AlignY($mdgriffith$elm_ui$Internal$Model$CenterY);
var $author$project$Style$edges = {bottom: 0, left: 0, right: 0, top: 0};
var $author$project$Colors$errorRed = A3($mdgriffith$elm_ui$Element$rgb255, 200, 0, 0);
var $author$project$StyledElement$errorBorder = function (hideBorder) {
	return hideBorder ? _List_Nil : _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Border$color($author$project$Colors$errorRed),
			$mdgriffith$elm_ui$Element$Border$solid,
			$mdgriffith$elm_ui$Element$Border$width(2)
		]);
};
var $author$project$Style$errorStyle = _Utils_ap(
	$author$project$Style$labelStyle,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Font$color($author$project$Colors$errorRed)
		]));
var $mdgriffith$elm_ui$Internal$Model$Paragraph = {$: 'Paragraph'};
var $mdgriffith$elm_ui$Element$paragraph = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asParagraph,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Paragraph),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$spacing(5),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $author$project$StyledElement$wrappedInput = F7(
	function (input, title, caption, errorCaption, icon, attributes, trailingElements) {
		var textBoxIcon = function () {
			if (icon.$ === 'Just') {
				var iconElement = icon.a;
				return iconElement(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerY,
							$mdgriffith$elm_ui$Element$paddingEach(
							_Utils_update(
								$author$project$Style$edges,
								{left: 12}))
						]));
			} else {
				return $mdgriffith$elm_ui$Element$none;
			}
		}();
		var errorCaptionLabel = function () {
			if (errorCaption.$ === 'Just') {
				var errors = errorCaption.a.a;
				return A2(
					$mdgriffith$elm_ui$Element$paragraph,
					$author$project$Style$errorStyle,
					A2($elm$core$List$map, $mdgriffith$elm_ui$Element$text, errors));
			} else {
				return $mdgriffith$elm_ui$Element$none;
			}
		}();
		var captionLabel = function () {
			if (caption.$ === 'Just') {
				var captionText = caption.a;
				return A2(
					$mdgriffith$elm_ui$Element$paragraph,
					$author$project$Style$captionLabelStyle,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text(captionText)
						]));
			} else {
				return $mdgriffith$elm_ui$Element$none;
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(6),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink)
					]),
				attributes),
			_List_fromArray(
				[
					(title !== '') ? A2(
					$mdgriffith$elm_ui$Element$el,
					$author$project$Style$labelStyle,
					$mdgriffith$elm_ui$Element$text(title)) : $mdgriffith$elm_ui$Element$none,
					A2(
					$mdgriffith$elm_ui$Element$row,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$spacing(12),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$centerY,
								_Utils_ap(
									$author$project$Style$inputStyle,
									$author$project$StyledElement$errorBorder(
										_Utils_eq(errorCaption, $elm$core$Maybe$Nothing)))))),
					_Utils_ap(
						_List_fromArray(
							[textBoxIcon, input]),
						trailingElements)),
					captionLabel,
					errorCaptionLabel
				]));
	});
var $author$project$StyledElement$dropDown = F2(
	function (attributes, _v0) {
		var title = _v0.title;
		var caption = _v0.caption;
		var dropdownState = _v0.dropdownState;
		var dropDownMsg = _v0.dropDownMsg;
		var onSelect = _v0.onSelect;
		var errorCaption = _v0.errorCaption;
		var options = _v0.options;
		var ariaLabel = _v0.ariaLabel;
		var icon = _v0.icon;
		var toString = _v0.toString;
		var isLoading = _v0.isLoading;
		var prompt = _v0.prompt;
		var config = A6(
			$author$project$StyledElement$DropDown$dropDownConfig,
			dropDownMsg,
			onSelect,
			toString,
			icon,
			isLoading,
			A2($elm$core$Maybe$withDefault, 'Pick one', prompt));
		var input = A3($author$project$StyledElement$DropDown$view, config, dropdownState, options);
		var body = A7(
			$author$project$StyledElement$wrappedInput,
			input,
			title,
			caption,
			errorCaption,
			$elm$core$Maybe$Nothing,
			_Utils_ap(
				attributes,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Border$width(0)
					])),
			_List_Nil);
		return _Utils_Tuple3(body, config, options);
	});
var $author$project$Pages$Buses$CreateBusPage$consumptionDropDown = function (model) {
	var vehicleClass = model.form.vehicleClass;
	var justConsumptionType = function (x) {
		return A2($elm$core$Maybe$withDefault, $author$project$Pages$Buses$CreateBusPage$Default, x);
	};
	return A2(
		$author$project$StyledElement$dropDown,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width(
				A2($mdgriffith$elm_ui$Element$maximum, 300, $mdgriffith$elm_ui$Element$fill)),
				$mdgriffith$elm_ui$Element$alignTop
			]),
		{
			ariaLabel: 'Select the consumption rate of the vehicle in kilometers per litre',
			caption: $elm$core$Maybe$Nothing,
			dropDownMsg: $author$project$Pages$Buses$CreateBusPage$ConsumptionDropdownMsg,
			dropdownState: model.consumptionDropdownState,
			errorCaption: $elm$core$Maybe$Nothing,
			icon: $elm$core$Maybe$Nothing,
			isLoading: false,
			onSelect: A2(
				$elm$core$Basics$composeR,
				justConsumptionType,
				A2($elm$core$Basics$composeR, $author$project$Pages$Buses$CreateBusPage$FuelConsumptionType, $author$project$Pages$Buses$CreateBusPage$Changed)),
			options: _List_fromArray(
				[$author$project$Pages$Buses$CreateBusPage$Default, $author$project$Pages$Buses$CreateBusPage$Custom]),
			prompt: $elm$core$Maybe$Nothing,
			title: 'Fuel Consumption per Kilometer',
			toString: function (x) {
				if (x.$ === 'Custom') {
					return 'Custom Mileage';
				} else {
					return 'Default - ' + ($elm$core$String$fromFloat(
						$author$project$Pages$Buses$CreateBusPage$defaultConsumption(vehicleClass)) + ' Km / Litre');
				}
			}
		});
};
var $author$project$Pages$Buses$CreateBusPage$FuelType = function (a) {
	return {$: 'FuelType', a: a};
};
var $author$project$Pages$Buses$CreateBusPage$Gasoline = {$: 'Gasoline'};
var $author$project$Errors$ClientSideError = F2(
	function (a, b) {
		return {$: 'ClientSideError', a: a, b: b};
	});
var $author$project$Errors$InputError = function (a) {
	return {$: 'InputError', a: a};
};
var $author$project$Errors$ServerSideError = F2(
	function (a, b) {
		return {$: 'ServerSideError', a: a, b: b};
	});
var $author$project$Errors$contains = F2(
	function (anError, listOfErrors) {
		return A2(
			$elm$core$List$any,
			function (x) {
				var _v0 = _Utils_Tuple2(anError, x);
				_v0$2:
				while (true) {
					if (_v0.a.$ === 'ServerSideError') {
						if (_v0.b.$ === 'ServerSideError') {
							var _v1 = _v0.a;
							var aFieldName = _v1.a;
							var _v2 = _v0.b;
							var xFieldName = _v2.a;
							return _Utils_eq(aFieldName, xFieldName);
						} else {
							break _v0$2;
						}
					} else {
						if (_v0.b.$ === 'ClientSideError') {
							var _v3 = _v0.a;
							var aError = _v3.a;
							var _v4 = _v0.b;
							var xError = _v4.a;
							return _Utils_eq(aError, xError);
						} else {
							break _v0$2;
						}
					}
				}
				return false;
			},
			listOfErrors);
	});
var $author$project$Errors$errorWhenContains = F4(
	function (matchFields, formProblems, fieldName, visibleFieldName) {
		var errorsForField = A2(
			$elm$core$List$filter,
			function (x) {
				return A2(
					$author$project$Errors$contains,
					x,
					A2(
						$elm$core$List$cons,
						A2($author$project$Errors$ServerSideError, fieldName, _List_Nil),
						matchFields));
			},
			formProblems);
		var beautifyError = function (x) {
			if (x.$ === 'ClientSideError') {
				var string = x.b;
				return _List_fromArray(
					[string]);
			} else {
				var fieldName2 = x.a;
				var strings = x.b;
				return A2(
					$elm$core$List$map,
					function (str) {
						return 'The ' + (A3($elm$core$String$replace, '_', ' ', visibleFieldName) + (' ' + str));
					},
					strings);
			}
		};
		var _v0 = A2($elm$core$List$concatMap, beautifyError, errorsForField);
		if (!_v0.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			var errorStrings = _v0;
			return $elm$core$Maybe$Just(errorStrings);
		}
	});
var $author$project$Errors$customInputErrorsFor = F4(
	function (formProblems, fieldName, visibleName, errorsToMatch) {
		var clientSideErrors = A2(
			$elm$core$List$map,
			function (x) {
				return A2($author$project$Errors$ClientSideError, x, '');
			},
			errorsToMatch);
		return A2(
			$elm$core$Maybe$map,
			$author$project$Errors$InputError,
			A4($author$project$Errors$errorWhenContains, clientSideErrors, formProblems, fieldName, visibleName));
	});
var $author$project$Errors$inputErrorsFor = F3(
	function (formProblems, fieldName, errorsToMatch) {
		return A4($author$project$Errors$customInputErrorsFor, formProblems, fieldName, fieldName, errorsToMatch);
	});
var $author$project$Pages$Buses$CreateBusPage$toFuelType = function (_class) {
	var fuelType = _class.b;
	return fuelType;
};
var $author$project$Pages$Buses$CreateBusPage$fuelDropDown = function (model) {
	var problems = model.form.problems;
	var justFuelType = function (x) {
		return A2(
			$elm$core$Maybe$withDefault,
			$author$project$Pages$Buses$CreateBusPage$toFuelType(model.form.vehicleClass),
			x);
	};
	var errorMapper = $author$project$Errors$inputErrorsFor(model.form.problems);
	return A2(
		$author$project$StyledElement$dropDown,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width(
				A2($mdgriffith$elm_ui$Element$maximum, 300, $mdgriffith$elm_ui$Element$fill)),
				$mdgriffith$elm_ui$Element$alignTop
			]),
		{
			ariaLabel: 'Select fuel type',
			caption: $elm$core$Maybe$Nothing,
			dropDownMsg: $author$project$Pages$Buses$CreateBusPage$FuelDropdownMsg,
			dropdownState: model.fuelDropdownState,
			errorCaption: A2(errorMapper, 'fuel_type', _List_Nil),
			icon: $elm$core$Maybe$Just($author$project$Icons$fuel),
			isLoading: false,
			onSelect: A2(
				$elm$core$Basics$composeR,
				justFuelType,
				A2($elm$core$Basics$composeR, $author$project$Pages$Buses$CreateBusPage$FuelType, $author$project$Pages$Buses$CreateBusPage$Changed)),
			options: _List_fromArray(
				[$author$project$Pages$Buses$CreateBusPage$Diesel, $author$project$Pages$Buses$CreateBusPage$Gasoline]),
			prompt: $elm$core$Maybe$Nothing,
			title: 'Fuel Type',
			toString: function (x) {
				if (x.$ === 'Diesel') {
					return 'Diesel';
				} else {
					return 'Gasoline';
				}
			}
		});
};
var $author$project$Pages$Buses$CreateBusPage$Route = function (a) {
	return {$: 'Route', a: a};
};
var $author$project$Pages$Buses$CreateBusPage$RouteDropdownMsg = function (a) {
	return {$: 'RouteDropdownMsg', a: a};
};
var $author$project$Pages$Buses$CreateBusPage$routeDropDown = function (model) {
	return A2(
		$author$project$StyledElement$dropDown,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width(
				A2($mdgriffith$elm_ui$Element$maximum, 300, $mdgriffith$elm_ui$Element$fill)),
				$mdgriffith$elm_ui$Element$alignTop
			]),
		{
			ariaLabel: 'Select bus dropdown',
			caption: $elm$core$Maybe$Just('Which route will the bus ply?'),
			dropDownMsg: $author$project$Pages$Buses$CreateBusPage$RouteDropdownMsg,
			dropdownState: model.routeDropdownState,
			errorCaption: $elm$core$Maybe$Nothing,
			icon: $elm$core$Maybe$Just($author$project$Icons$timeline),
			isLoading: false,
			onSelect: A2($elm$core$Basics$composeR, $author$project$Pages$Buses$CreateBusPage$Route, $author$project$Pages$Buses$CreateBusPage$Changed),
			options: _List_fromArray(
				['a', 'b', 'c', 'd', 'e', 'f']),
			prompt: $elm$core$Maybe$Nothing,
			title: 'Route',
			toString: $elm$core$Basics$identity
		});
};
var $author$project$Pages$Buses$CreateBusPage$ServerResponse = function (a) {
	return {$: 'ServerResponse', a: a};
};
var $author$project$Pages$Buses$CreateBusPage$busDecoder = A2($elm$json$Json$Decode$field, 'id', $elm$json$Json$Decode$int);
var $elm$http$Http$Internal$StringBody = F2(
	function (a, b) {
		return {$: 'StringBody', a: a, b: b};
	});
var $elm$http$Http$jsonBody = function (value) {
	return A2(
		$elm$http$Http$Internal$StringBody,
		'application/json',
		A2($elm$json$Json$Encode$encode, 0, value));
};
var $author$project$Api$Endpoint$post = F4(
	function (endpoint, session, body, decoder) {
		return $krisajenkins$remotedata$RemoteData$sendRequest(
			$elm$http$Http$request(
				{
					body: body,
					expect: $elm$http$Http$expectJson(decoder),
					headers: $author$project$Session$authHeader(session),
					method: 'POST',
					timeout: $elm$core$Maybe$Nothing,
					url: $author$project$Api$Endpoint$unwrap(endpoint),
					withCredentials: false
				}));
	});
var $author$project$Api$post = F4(
	function (session, url, body, decoder) {
		return A4($author$project$Api$Endpoint$post, url, session, body, decoder);
	});
var $author$project$Pages$Buses$CreateBusPage$submit = F2(
	function (session, form) {
		var params = $elm$http$Http$jsonBody(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'number_plate',
						$elm$json$Json$Encode$string(form.numberPlate)),
						_Utils_Tuple2(
						'seats_available',
						$elm$json$Json$Encode$int(form.seatsAvailable)),
						_Utils_Tuple2(
						'vehicle_type',
						$elm$json$Json$Encode$string(form.vehicleType)),
						_Utils_Tuple2(
						'stated_milage',
						$elm$json$Json$Encode$float(form.consumptionAmount)),
						_Utils_Tuple2(
						'fuel_type',
						$elm$json$Json$Encode$string(form.fuelType))
					])));
		return A2(
			$elm$core$Platform$Cmd$map,
			$author$project$Pages$Buses$CreateBusPage$ServerResponse,
			A4($author$project$Api$post, session, $author$project$Api$Endpoint$buses, params, $author$project$Pages$Buses$CreateBusPage$busDecoder));
	});
var $author$project$Errors$toClientSideErrors = function (problems) {
	return A2(
		$elm$core$List$map,
		function (x) {
			return A2($author$project$Errors$ClientSideError, x.a, x.b);
		},
		problems);
};
var $author$project$Errors$decodeFormErrors = function (error) {
	var fieldDecoder = A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['errors', 'detail']),
		$elm$json$Json$Decode$dict(
			$elm$json$Json$Decode$list($elm$json$Json$Decode$string)));
	var decodeField = function (response) {
		return A2($elm$json$Json$Decode$decodeString, fieldDecoder, response.body);
	};
	if (error.$ === 'BadStatus') {
		var response = error.a;
		var _v1 = decodeField(response);
		if (_v1.$ === 'Err') {
			return _List_Nil;
		} else {
			var dictionary = _v1.a;
			return $elm$core$Dict$toList(dictionary);
		}
	} else {
		return _List_Nil;
	}
};
var $author$project$Errors$toServerSideErrors = function (formErrors) {
	return A2(
		$elm$core$List$map,
		function (x) {
			return A2($author$project$Errors$ServerSideError, x.a, x.b);
		},
		$author$project$Errors$decodeFormErrors(formErrors));
};
var $elm$browser$Browser$Dom$focus = _Browser_call('focus');
var $author$project$StyledElement$DropDown$update = F4(
	function (_v0, msg, _v1, data) {
		var config = _v0.a;
		var state = _v1.a;
		var _v2 = function () {
			switch (msg.$) {
				case 'NoOp':
					return _Utils_Tuple2(state, $elm$core$Platform$Cmd$none);
				case 'OnBlur':
					return _Utils_Tuple2(
						_Utils_update(
							state,
							{isOpen: false}),
						$elm$core$Platform$Cmd$none);
				case 'OnClickPrompt':
					var isOpen = !state.isOpen;
					var cmd = isOpen ? A2(
						$elm$core$Task$attempt,
						$elm$core$Basics$always($author$project$StyledElement$DropDown$NoOp),
						$elm$browser$Browser$Dom$focus(state.id + 'input-search')) : $elm$core$Platform$Cmd$none;
					return _Utils_Tuple2(
						_Utils_update(
							state,
							{filterText: '', focusedIndex: 0, isOpen: isOpen}),
						A2($elm$core$Platform$Cmd$map, config.dropdownMsg, cmd));
				case 'OnSelect':
					var item = msg.a;
					var cmd = A2(
						$elm$core$Task$perform,
						config.onSelectMsg,
						$elm$core$Task$succeed(
							$elm$core$Maybe$Just(item)));
					return _Utils_Tuple2(
						_Utils_update(
							state,
							{
								isOpen: false,
								selectedItem: $elm$core$Maybe$Just(item)
							}),
						cmd);
				case 'OnFilterTyped':
					var val = msg.a;
					return _Utils_Tuple2(
						_Utils_update(
							state,
							{filterText: val}),
						$elm$core$Platform$Cmd$none);
				default:
					var key = msg.a;
					var newIndex = function () {
						switch (key.$) {
							case 'ArrowUp':
								return (state.focusedIndex > 0) ? (state.focusedIndex - 1) : 0;
							case 'ArrowDown':
								return (_Utils_cmp(
									state.focusedIndex,
									$elm$core$List$length(data) - 1) < 0) ? (state.focusedIndex + 1) : ($elm$core$List$length(data) - 1);
							default:
								return state.focusedIndex;
						}
					}();
					var isOpen = function () {
						switch (key.$) {
							case 'Esc':
								return false;
							case 'Enter':
								return false;
							default:
								return true;
						}
					}();
					var focusedItem = A2(
						$elm$core$Maybe$map,
						$elm$core$Tuple$second,
						$elm$core$List$head(
							A2(
								$elm$core$List$filter,
								function (_v6) {
									var i = _v6.a;
									return _Utils_eq(i, state.focusedIndex);
								},
								A2(
									$elm$core$List$indexedMap,
									F2(
										function (i, item) {
											return _Utils_Tuple2(i, item);
										}),
									data))));
					var _v4 = function () {
						if (key.$ === 'Enter') {
							return _Utils_Tuple2(
								A2(
									$elm$core$Task$perform,
									config.onSelectMsg,
									$elm$core$Task$succeed(focusedItem)),
								focusedItem);
						} else {
							return _Utils_Tuple2($elm$core$Platform$Cmd$none, state.selectedItem);
						}
					}();
					var cmd = _v4.a;
					var newSelectedItem = _v4.b;
					return _Utils_Tuple2(
						_Utils_update(
							state,
							{focusedIndex: newIndex, isOpen: isOpen, selectedItem: newSelectedItem}),
						cmd);
			}
		}();
		var newState = _v2.a;
		var newCommand = _v2.b;
		return _Utils_Tuple2(
			$author$project$StyledElement$DropDown$State(newState),
			newCommand);
	});
var $author$project$Pages$Buses$CreateBusPage$toVehicleType = function (_class) {
	var vehicleType = _class.a;
	return vehicleType;
};
var $author$project$Pages$Buses$CreateBusPage$updateField = F2(
	function (field, model) {
		var form = model.form;
		switch (field.$) {
			case 'VehicleType':
				var vehicleType = field.a;
				var vehicleClass = A2(
					$author$project$Pages$Buses$CreateBusPage$VehicleClass,
					vehicleType,
					$author$project$Pages$Buses$CreateBusPage$toFuelType(form.vehicleClass));
				var updated_form = _Utils_update(
					form,
					{
						consumptionAmount: _Utils_eq(form.consumptionType, $author$project$Pages$Buses$CreateBusPage$Default) ? $author$project$StyledElement$FloatInput$fromFloat(
							$author$project$Pages$Buses$CreateBusPage$defaultConsumption(vehicleClass)) : form.consumptionAmount,
						seatsAvailable: $author$project$Pages$Buses$CreateBusPage$defaultSeats(vehicleClass),
						vehicleClass: vehicleClass
					});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{form: updated_form}),
					$elm$core$Platform$Cmd$none);
			case 'FuelType':
				var fuelType = field.a;
				var updated_form = _Utils_update(
					form,
					{
						vehicleClass: A2(
							$author$project$Pages$Buses$CreateBusPage$VehicleClass,
							$author$project$Pages$Buses$CreateBusPage$toVehicleType(form.vehicleClass),
							fuelType)
					});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{form: updated_form}),
					$elm$core$Platform$Cmd$none);
			case 'NumberPlate':
				var plate = field.a;
				var updated_form = _Utils_update(
					form,
					{numberPlate: plate});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{form: updated_form}),
					$elm$core$Platform$Cmd$none);
			case 'SeatsAvailable':
				var seats = field.a;
				var updated_form = _Utils_update(
					form,
					{seatsAvailable: seats});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{form: updated_form}),
					$elm$core$Platform$Cmd$none);
			case 'Route':
				var route = field.a;
				var updated_form = _Utils_update(
					form,
					{routeId: route});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{form: updated_form}),
					$elm$core$Platform$Cmd$none);
			case 'FuelConsumptionType':
				var consumptionType = field.a;
				var updated_form = _Utils_update(
					form,
					{
						consumptionAmount: _Utils_eq(consumptionType, $author$project$Pages$Buses$CreateBusPage$Default) ? $author$project$StyledElement$FloatInput$fromFloat(
							$author$project$Pages$Buses$CreateBusPage$defaultConsumption(form.vehicleClass)) : form.consumptionAmount,
						consumptionType: consumptionType
					});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{form: updated_form}),
					$elm$core$Platform$Cmd$none);
			default:
				var consumptionAmount = field.a;
				var updated_form = _Utils_update(
					form,
					{consumptionAmount: consumptionAmount});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{form: updated_form}),
					$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Pages$Buses$CreateBusPage$InvalidNumberPlate = {$: 'InvalidNumberPlate'};
var $elm$regex$Regex$Match = F4(
	function (match, index, number, submatches) {
		return {index: index, match: match, number: number, submatches: submatches};
	});
var $elm$regex$Regex$contains = _Regex_contains;
var $elm$regex$Regex$fromStringWith = _Regex_fromStringWith;
var $elm$regex$Regex$fromString = function (string) {
	return A2(
		$elm$regex$Regex$fromStringWith,
		{caseInsensitive: false, multiline: false},
		string);
};
var $elm$regex$Regex$never = _Regex_never;
var $author$project$Utils$Validator$matchOnPattern = function (pattern) {
	return $elm$regex$Regex$contains(
		A2(
			$elm$core$Maybe$withDefault,
			$elm$regex$Regex$never,
			$elm$regex$Regex$fromString(pattern)));
};
var $author$project$Utils$Validator$isValidNumberPlate = function () {
	var letters = 'ABCDEFGHJKLMNPQRSTUVWXYZ';
	var pattern = '^K[' + (letters + (']{2}\\d{3}[' + (letters + ']{0,1}$')));
	return $author$project$Utils$Validator$matchOnPattern(pattern);
}();
var $author$project$StyledElement$FloatInput$toFloat = function (floatInput_) {
	var _float = floatInput_.a;
	return _float;
};
var $author$project$Models$Bus$vehicleTypeToString = function (vehicleType) {
	switch (vehicleType.$) {
		case 'Van':
			return 'van';
		case 'Shuttle':
			return 'shuttle';
		default:
			return 'bus';
	}
};
var $author$project$Pages$Buses$CreateBusPage$validateForm = function (form) {
	var vehicleType = $author$project$Models$Bus$vehicleTypeToString(
		$author$project$Pages$Buses$CreateBusPage$toVehicleType(form.vehicleClass));
	var problems = $author$project$Utils$Validator$isValidNumberPlate(form.numberPlate) ? _List_Nil : _List_fromArray(
		[
			_Utils_Tuple2($author$project$Pages$Buses$CreateBusPage$InvalidNumberPlate, 'There\'s something wrong with this number plate')
		]);
	var fuelType = function () {
		var _v1 = $author$project$Pages$Buses$CreateBusPage$toFuelType(form.vehicleClass);
		if (_v1.$ === 'Diesel') {
			return 'diesel';
		} else {
			return 'gasoline';
		}
	}();
	if (!problems.b) {
		return $elm$core$Result$Ok(
			{
				consumptionAmount: $author$project$StyledElement$FloatInput$toFloat(form.consumptionAmount),
				fuelType: fuelType,
				numberPlate: form.numberPlate,
				routeId: $elm$core$Maybe$Nothing,
				seatsAvailable: form.seatsAvailable,
				vehicleType: vehicleType
			});
	} else {
		return $elm$core$Result$Err(problems);
	}
};
var $author$project$Pages$Buses$CreateBusPage$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'Changed':
				var field = msg.a;
				return A2($author$project$Pages$Buses$CreateBusPage$updateField, field, model);
			case 'RouteDropdownMsg':
				var subMsg = msg.a;
				var _v1 = $author$project$Pages$Buses$CreateBusPage$routeDropDown(model);
				var config = _v1.b;
				var options = _v1.c;
				var _v2 = A4($author$project$StyledElement$DropDown$update, config, subMsg, model.routeDropdownState, options);
				var state = _v2.a;
				var cmd = _v2.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{routeDropdownState: state}),
					cmd);
			case 'FuelDropdownMsg':
				var subMsg = msg.a;
				var _v3 = $author$project$Pages$Buses$CreateBusPage$fuelDropDown(model);
				var config = _v3.b;
				var options = _v3.c;
				var _v4 = A4($author$project$StyledElement$DropDown$update, config, subMsg, model.fuelDropdownState, options);
				var state = _v4.a;
				var cmd = _v4.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{fuelDropdownState: state}),
					cmd);
			case 'ConsumptionDropdownMsg':
				var subMsg = msg.a;
				var _v5 = $author$project$Pages$Buses$CreateBusPage$consumptionDropDown(model);
				var config = _v5.b;
				var options = _v5.c;
				var _v6 = A4($author$project$StyledElement$DropDown$update, config, subMsg, model.consumptionDropdownState, options);
				var state = _v6.a;
				var cmd = _v6.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{consumptionDropdownState: state}),
					cmd);
			case 'SubmitButtonMsg':
				var form = model.form;
				var _v7 = $author$project$Pages$Buses$CreateBusPage$validateForm(form);
				if (_v7.$ === 'Ok') {
					var validForm = _v7.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								form: _Utils_update(
									form,
									{problems: _List_Nil}),
								requestState: $krisajenkins$remotedata$RemoteData$Loading
							}),
						A2($author$project$Pages$Buses$CreateBusPage$submit, model.session, validForm));
				} else {
					var problems = _v7.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								form: _Utils_update(
									form,
									{
										problems: $author$project$Errors$toClientSideErrors(problems)
									})
							}),
						$elm$core$Platform$Cmd$none);
				}
			default:
				var response = msg.a;
				var newModel = _Utils_update(
					model,
					{requestState: response});
				var form = newModel.form;
				switch (response.$) {
					case 'Success':
						var bus_id = response.a;
						return _Utils_Tuple2(
							newModel,
							A2(
								$author$project$Navigation$rerouteTo,
								newModel,
								A2($author$project$Navigation$Bus, bus_id, $elm$core$Maybe$Nothing)));
					case 'Failure':
						var error = response.a;
						var apiFormError = $author$project$Errors$toServerSideErrors(error);
						var updatedForm = _Utils_update(
							form,
							{
								problems: _Utils_ap(form.problems, apiFormError)
							});
						var _v9 = $author$project$Errors$decodeErrors(error);
						var error_msg = _v9.b;
						return _Utils_Tuple2(
							_Utils_update(
								newModel,
								{form: updatedForm}),
							error_msg);
					default:
						return _Utils_Tuple2(
							_Utils_update(
								newModel,
								{
									form: _Utils_update(
										form,
										{problems: _List_Nil})
								}),
							$elm$core$Platform$Cmd$none);
				}
		}
	});
var $author$project$Pages$Buses$CreateBusRepairPage$NoOp = {$: 'NoOp'};
var $author$project$Models$Bus$Repair = F5(
	function (id, part, description, cost, dateTime) {
		return {cost: cost, dateTime: dateTime, description: description, id: id, part: part};
	});
var $elm$browser$Browser$Dom$getViewportOf = _Browser_getViewportOf;
var $elm$browser$Browser$Dom$setViewportOf = _Browser_setViewportOf;
var $author$project$Pages$Buses$CreateBusRepairPage$ServerResponse = function (a) {
	return {$: 'ServerResponse', a: a};
};
var $author$project$Pages$Buses$CreateBusRepairPage$decoder = $elm$json$Json$Decode$succeed(_Utils_Tuple0);
var $author$project$Api$Endpoint$performedBusRepairs = function (busID) {
	return A2(
		$author$project$Api$Endpoint$url,
		_List_fromArray(
			[
				'school',
				'buses',
				$elm$core$String$fromInt(busID),
				'performed_repairs'
			]),
		_List_Nil);
};
var $author$project$Pages$Buses$CreateBusRepairPage$submit = F3(
	function (session, busID, repairs) {
		var paramsFor = function (repair) {
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'id',
						$elm$json$Json$Encode$int(repair.id)),
						_Utils_Tuple2(
						'part',
						$elm$json$Json$Encode$string(repair.part)),
						_Utils_Tuple2(
						'cost',
						$elm$json$Json$Encode$int(repair.cost)),
						_Utils_Tuple2(
						'description',
						$elm$json$Json$Encode$string(repair.description))
					]));
		};
		var params = $elm$http$Http$jsonBody(
			A2($elm$json$Json$Encode$list, paramsFor, repairs));
		return A2(
			$elm$core$Platform$Cmd$map,
			$author$project$Pages$Buses$CreateBusRepairPage$ServerResponse,
			A4(
				$author$project$Api$post,
				session,
				$author$project$Api$Endpoint$performedBusRepairs(busID),
				params,
				$author$project$Pages$Buses$CreateBusRepairPage$decoder));
	});
var $author$project$Pages$Buses$CreateBusRepairPage$RepairProblem = F2(
	function (a, b) {
		return {$: 'RepairProblem', a: a, b: b};
	});
var $author$project$Pages$Buses$CreateBusRepairPage$ZeroCost = {$: 'ZeroCost'};
var $author$project$Pages$Buses$CreateBusRepairPage$NoRecordsCreated = {$: 'NoRecordsCreated'};
var $author$project$Pages$Buses$CreateBusRepairPage$noRecordsError = _Utils_Tuple2($author$project$Pages$Buses$CreateBusRepairPage$NoRecordsCreated, 'At least one record is required');
var $author$project$Models$Bus$titleForPart = function (part) {
	switch (part.$) {
		case 'FrontLeftTire':
			return 'Front Left Tire';
		case 'FrontRightTire':
			return 'Front Right Tire';
		case 'RearLeftTire':
			return 'Rear Left Tire';
		case 'RearRightTire':
			return 'Rear Right Tire';
		case 'Engine':
			return 'Engine';
		case 'FrontCrossAxis':
			return 'Front Cross Axis';
		case 'RearCrossAxis':
			return 'Rear Cross Axis';
		default:
			return 'Vertical Axis';
	}
};
var $author$project$Pages$Buses$CreateBusRepairPage$validateForm = function (repairs) {
	var problemsFor = function (repair) {
		return $elm$core$List$concat(
			_List_fromArray(
				[
					(!repair.cost) ? _List_fromArray(
					[
						_Utils_Tuple2(
						A2($author$project$Pages$Buses$CreateBusRepairPage$RepairProblem, repair.id, $author$project$Pages$Buses$CreateBusRepairPage$ZeroCost),
						'Please provide the cost for this repair')
					]) : _List_Nil
				]));
	};
	var generalProblems = _Utils_eq(repairs, _List_Nil) ? _List_fromArray(
		[$author$project$Pages$Buses$CreateBusRepairPage$noRecordsError]) : _List_Nil;
	var _v0 = _Utils_ap(
		$elm$core$List$concat(
			A2($elm$core$List$map, problemsFor, repairs)),
		generalProblems);
	if (!_v0.b) {
		return $elm$core$Result$Ok(
			A2(
				$elm$core$List$map,
				function (x) {
					return {
						cost: x.cost,
						description: x.description,
						id: x.id,
						part: $author$project$Models$Bus$titleForPart(x.part)
					};
				},
				repairs));
	} else {
		var problems = _v0;
		return $elm$core$Result$Err(problems);
	}
};
var $author$project$Pages$Buses$CreateBusRepairPage$viewRecordsID = 'viewRecords';
var $author$project$Pages$Buses$CreateBusRepairPage$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'NoOp':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'Submit':
				var _v1 = $author$project$Pages$Buses$CreateBusRepairPage$validateForm(model.repairs);
				if (_v1.$ === 'Ok') {
					var validForm = _v1.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{problems: _List_Nil, requestState: $krisajenkins$remotedata$RemoteData$Loading}),
						A3($author$project$Pages$Buses$CreateBusRepairPage$submit, model.session, model.bus, validForm));
				} else {
					var problems = _v1.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								problems: $author$project$Errors$toClientSideErrors(problems)
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 'StartedDragging':
				var part = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							pickedUpItem: $elm$core$Maybe$Just(part)
						}),
					$elm$core$Platform$Cmd$none);
			case 'StoppedDragging':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{isAboveDropOffPoint: false, pickedUpItem: $elm$core$Maybe$Nothing}),
					$elm$core$Platform$Cmd$none);
			case 'DropOn':
				var _v2 = model.pickedUpItem;
				if ((_v2.$ === 'Just') && (_v2.a.$ === 'Part')) {
					var part = _v2.a.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								index: model.index + 1,
								isAboveDropOffPoint: false,
								pickedUpItem: $elm$core$Maybe$Nothing,
								problems: _List_Nil,
								repairs: _Utils_ap(
									model.repairs,
									_List_fromArray(
										[
											A5(
											$author$project$Models$Bus$Repair,
											model.index,
											part,
											'',
											0,
											$elm$time$Time$millisToPosix(0))
										]))
							}),
						A2(
							$elm$core$Task$perform,
							function (_v4) {
								return $author$project$Pages$Buses$CreateBusRepairPage$NoOp;
							},
							A2(
								$elm$core$Task$onError,
								function (_v3) {
									return $elm$core$Task$succeed(_Utils_Tuple0);
								},
								A2(
									$elm$core$Task$andThen,
									A2(
										$elm$core$Basics$composeR,
										function ($) {
											return $.scene;
										},
										A2(
											$elm$core$Basics$composeR,
											function ($) {
												return $.height;
											},
											A2($elm$browser$Browser$Dom$setViewportOf, $author$project$Pages$Buses$CreateBusRepairPage$viewRecordsID, 0))),
									$elm$browser$Browser$Dom$getViewportOf($author$project$Pages$Buses$CreateBusRepairPage$viewRecordsID)))));
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{isAboveDropOffPoint: false, pickedUpItem: $elm$core$Maybe$Nothing}),
						$elm$core$Platform$Cmd$none);
				}
			case 'DraggedOver':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{isAboveDropOffPoint: true}),
					$elm$core$Platform$Cmd$none);
			case 'ChangedDescription':
				var reportID = msg.a;
				var description = msg.b;
				var repairs = A2(
					$elm$core$List$map,
					function (report) {
						return (_Utils_eq(report.id, reportID) && ($elm$core$String$length(description) <= 600)) ? _Utils_update(
							report,
							{description: description}) : report;
					},
					model.repairs);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{repairs: repairs}),
					$elm$core$Platform$Cmd$none);
			case 'ChangedCost':
				var reportID = msg.a;
				var cost = msg.b;
				var repairs = A2(
					$elm$core$List$map,
					function (report) {
						if (_Utils_eq(report.id, reportID)) {
							if (cost === '') {
								return _Utils_update(
									report,
									{cost: 0});
							} else {
								var _v5 = $elm$core$String$toInt(cost);
								if (_v5.$ === 'Just') {
									var costInt = _v5.a;
									return (costInt >= 0) ? _Utils_update(
										report,
										{cost: costInt}) : report;
								} else {
									return report;
								}
							}
						} else {
							return report;
						}
					},
					model.repairs);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{repairs: repairs}),
					$elm$core$Platform$Cmd$none);
			case 'Delete':
				var reportID = msg.a;
				var repairs = A2(
					$elm$core$List$filter,
					function (report) {
						return !_Utils_eq(report.id, reportID);
					},
					model.repairs);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{repairs: repairs}),
					$elm$core$Platform$Cmd$none);
			default:
				var response = msg.a;
				var newModel = _Utils_update(
					model,
					{requestState: response});
				switch (response.$) {
					case 'Success':
						return _Utils_Tuple2(
							newModel,
							A2(
								$author$project$Navigation$rerouteTo,
								newModel,
								A2(
									$author$project$Navigation$Bus,
									model.bus,
									$elm$core$Maybe$Just('Maintenance'))));
					case 'Failure':
						var error = response.a;
						var apiFormError = $author$project$Errors$toServerSideErrors(error);
						var _v7 = $author$project$Errors$decodeErrors(error);
						var error_msg = _v7.b;
						return _Utils_Tuple2(
							_Utils_update(
								newModel,
								{
									problems: _Utils_ap(model.problems, apiFormError)
								}),
							error_msg);
					default:
						return _Utils_Tuple2(
							_Utils_update(
								newModel,
								{problems: _List_Nil}),
							$elm$core$Platform$Cmd$none);
				}
		}
	});
var $author$project$Pages$Crew$CrewMemberRegistrationPage$Changed = function (a) {
	return {$: 'Changed', a: a};
};
var $author$project$Pages$Crew$CrewMemberRegistrationPage$Role = function (a) {
	return {$: 'Role', a: a};
};
var $author$project$Pages$Crew$CrewMemberRegistrationPage$roleToString = function (role) {
	if (role.$ === 'Driver') {
		return 'Driver';
	} else {
		return 'Assistant';
	}
};
var $author$project$Pages$Crew$CrewMemberRegistrationPage$routeDropDown = function (model) {
	return A2(
		$author$project$StyledElement$dropDown,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width(
				A2($mdgriffith$elm_ui$Element$maximum, 300, $mdgriffith$elm_ui$Element$fill)),
				$mdgriffith$elm_ui$Element$alignTop
			]),
		{
			ariaLabel: 'Select role dropdown',
			caption: $elm$core$Maybe$Nothing,
			dropDownMsg: $author$project$Pages$Crew$CrewMemberRegistrationPage$RoleDropdownMsg,
			dropdownState: model.roleDropdownState,
			errorCaption: $elm$core$Maybe$Nothing,
			icon: $elm$core$Maybe$Nothing,
			isLoading: false,
			onSelect: A2($elm$core$Basics$composeR, $author$project$Pages$Crew$CrewMemberRegistrationPage$Role, $author$project$Pages$Crew$CrewMemberRegistrationPage$Changed),
			options: _List_fromArray(
				[$author$project$Models$CrewMember$Assistant, $author$project$Models$CrewMember$Driver]),
			prompt: $elm$core$Maybe$Nothing,
			title: 'Role',
			toString: $author$project$Pages$Crew$CrewMemberRegistrationPage$roleToString
		});
};
var $author$project$Pages$Crew$CrewMemberRegistrationPage$ServerResponse = function (a) {
	return {$: 'ServerResponse', a: a};
};
var $author$project$Api$Endpoint$crewMembers = A2(
	$author$project$Api$Endpoint$url,
	_List_fromArray(
		['school', 'crew']),
	_List_Nil);
var $author$project$Pages$Crew$CrewMemberRegistrationPage$decoder = $elm$json$Json$Decode$succeed(_Utils_Tuple0);
var $author$project$Api$Endpoint$patch = F4(
	function (endpoint, session, body, decoder) {
		return $krisajenkins$remotedata$RemoteData$sendRequest(
			$elm$http$Http$request(
				{
					body: body,
					expect: $elm$http$Http$expectJson(decoder),
					headers: $author$project$Session$authHeader(session),
					method: 'PATCH',
					timeout: $elm$core$Maybe$Nothing,
					url: $author$project$Api$Endpoint$unwrap(endpoint),
					withCredentials: false
				}));
	});
var $author$project$Api$patch = F4(
	function (session, url, body, decoder) {
		return A4($author$project$Api$Endpoint$patch, url, session, body, decoder);
	});
var $author$project$Pages$Crew$CrewMemberRegistrationPage$submit = F3(
	function (session, form, editingID) {
		var params = $elm$http$Http$jsonBody(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'name',
						$elm$json$Json$Encode$string(form.name)),
						_Utils_Tuple2(
						'phone_number',
						$elm$json$Json$Encode$string(form.phoneNumber)),
						_Utils_Tuple2(
						'email',
						$elm$json$Json$Encode$string(form.email)),
						_Utils_Tuple2(
						'role',
						$elm$json$Json$Encode$string(form.role))
					])));
		if (editingID.$ === 'Just') {
			var id = editingID.a;
			return A2(
				$elm$core$Platform$Cmd$map,
				$author$project$Pages$Crew$CrewMemberRegistrationPage$ServerResponse,
				A4(
					$author$project$Api$patch,
					session,
					$author$project$Api$Endpoint$crewMember(id),
					params,
					$author$project$Pages$Crew$CrewMemberRegistrationPage$decoder));
		} else {
			return A2(
				$elm$core$Platform$Cmd$map,
				$author$project$Pages$Crew$CrewMemberRegistrationPage$ServerResponse,
				A4($author$project$Api$post, session, $author$project$Api$Endpoint$crewMembers, params, $author$project$Pages$Crew$CrewMemberRegistrationPage$decoder));
		}
	});
var $author$project$Pages$Crew$CrewMemberRegistrationPage$updateField = F2(
	function (field, model) {
		var form = model.form;
		switch (field.$) {
			case 'Name':
				var name = field.a;
				var updated_form = _Utils_update(
					form,
					{name: name});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{form: updated_form}),
					$elm$core$Platform$Cmd$none);
			case 'PhoneNumber':
				var phoneNumber = field.a;
				var updated_form = _Utils_update(
					form,
					{phoneNumber: phoneNumber});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{form: updated_form}),
					$elm$core$Platform$Cmd$none);
			case 'Email':
				var email = field.a;
				var updated_form = _Utils_update(
					form,
					{email: email});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{form: updated_form}),
					$elm$core$Platform$Cmd$none);
			default:
				var role = field.a;
				var updated_form = _Utils_update(
					form,
					{role: role});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{form: updated_form}),
					$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Pages$Crew$CrewMemberRegistrationPage$EmptyEmail = {$: 'EmptyEmail'};
var $author$project$Pages$Crew$CrewMemberRegistrationPage$EmptyName = {$: 'EmptyName'};
var $author$project$Pages$Crew$CrewMemberRegistrationPage$EmptyPhoneNumber = {$: 'EmptyPhoneNumber'};
var $author$project$Pages$Crew$CrewMemberRegistrationPage$EmptyRole = {$: 'EmptyRole'};
var $author$project$Pages$Crew$CrewMemberRegistrationPage$InvalidEmail = {$: 'InvalidEmail'};
var $author$project$Pages$Crew$CrewMemberRegistrationPage$InvalidPhoneNumber = {$: 'InvalidPhoneNumber'};
var $author$project$Utils$Validator$isValidEmail = function () {
	var pattern = '[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}';
	return $author$project$Utils$Validator$matchOnPattern(pattern);
}();
var $author$project$Utils$Validator$isValidPhoneNumber = function () {
	var pattern = '^(?:254|\\+254|0)?(7[0-9]{8})$';
	return $author$project$Utils$Validator$matchOnPattern(pattern);
}();
var $elm$core$String$trim = _String_trim;
var $author$project$Pages$Crew$CrewMemberRegistrationPage$validateForm = function (form) {
	var problems = $elm$core$List$concat(
		_List_fromArray(
			[
				$elm$core$String$isEmpty(
				$elm$core$String$trim(form.name)) ? _List_fromArray(
				[
					_Utils_Tuple2($author$project$Pages$Crew$CrewMemberRegistrationPage$EmptyName, 'Required')
				]) : _List_Nil,
				$elm$core$String$isEmpty(
				$elm$core$String$trim(form.email)) ? _List_fromArray(
				[
					_Utils_Tuple2($author$project$Pages$Crew$CrewMemberRegistrationPage$EmptyEmail, 'Required')
				]) : ((!$author$project$Utils$Validator$isValidEmail(form.email)) ? _List_fromArray(
				[
					_Utils_Tuple2($author$project$Pages$Crew$CrewMemberRegistrationPage$InvalidEmail, 'There\'s something wrong with this email')
				]) : _List_Nil),
				$elm$core$String$isEmpty(
				$elm$core$String$trim(form.phoneNumber)) ? _List_fromArray(
				[
					_Utils_Tuple2($author$project$Pages$Crew$CrewMemberRegistrationPage$EmptyPhoneNumber, 'Required')
				]) : ((!$author$project$Utils$Validator$isValidPhoneNumber(form.phoneNumber)) ? _List_fromArray(
				[
					_Utils_Tuple2($author$project$Pages$Crew$CrewMemberRegistrationPage$InvalidPhoneNumber, 'There\'s something wrong with this phone number')
				]) : _List_Nil)
			]));
	var _v0 = _Utils_Tuple2(problems, form.role);
	if (_v0.b.$ === 'Just') {
		if (!_v0.a.b) {
			var role = _v0.b.a;
			return $elm$core$Result$Ok(
				{
					email: form.email,
					name: form.name,
					phoneNumber: form.phoneNumber,
					role: $elm$core$String$toLower(
						$author$project$Pages$Crew$CrewMemberRegistrationPage$roleToString(role))
				});
		} else {
			return $elm$core$Result$Err(problems);
		}
	} else {
		var _v1 = _v0.b;
		return $elm$core$Result$Err(
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2($author$project$Pages$Crew$CrewMemberRegistrationPage$EmptyRole, 'Required'),
				problems));
	}
};
var $author$project$Pages$Crew$CrewMemberRegistrationPage$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'Changed':
				var field = msg.a;
				return A2($author$project$Pages$Crew$CrewMemberRegistrationPage$updateField, field, model);
			case 'RoleDropdownMsg':
				var subMsg = msg.a;
				var _v1 = $author$project$Pages$Crew$CrewMemberRegistrationPage$routeDropDown(model);
				var config = _v1.b;
				var options = _v1.c;
				var _v2 = A4($author$project$StyledElement$DropDown$update, config, subMsg, model.roleDropdownState, options);
				var state = _v2.a;
				var cmd = _v2.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{roleDropdownState: state}),
					cmd);
			case 'SubmitButtonMsg':
				var form = model.form;
				var _v3 = $author$project$Pages$Crew$CrewMemberRegistrationPage$validateForm(form);
				if (_v3.$ === 'Ok') {
					var validForm = _v3.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								form: _Utils_update(
									form,
									{problems: _List_Nil}),
								requestState: $krisajenkins$remotedata$RemoteData$Loading
							}),
						A3(
							$author$project$Pages$Crew$CrewMemberRegistrationPage$submit,
							model.session,
							validForm,
							A2(
								$elm$core$Maybe$andThen,
								A2(
									$elm$core$Basics$composeR,
									function ($) {
										return $.crewMemberID;
									},
									$elm$core$Maybe$Just),
								model.editState)));
				} else {
					var problems = _v3.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								form: _Utils_update(
									form,
									{
										problems: $author$project$Errors$toClientSideErrors(problems)
									})
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 'ServerResponse':
				var response = msg.a;
				var newModel = _Utils_update(
					model,
					{requestState: response});
				var form = newModel.form;
				switch (response.$) {
					case 'Success':
						var bus_id = response.a;
						return _Utils_Tuple2(
							newModel,
							A2($author$project$Navigation$rerouteTo, newModel, $author$project$Navigation$CrewMembers));
					case 'Failure':
						var error = response.a;
						var apiFormError = $author$project$Errors$toServerSideErrors(error);
						var updatedForm = _Utils_update(
							form,
							{
								problems: _Utils_ap(form.problems, apiFormError)
							});
						var _v5 = $author$project$Errors$decodeErrors(error);
						var error_msg = _v5.b;
						return _Utils_Tuple2(
							_Utils_update(
								newModel,
								{form: updatedForm}),
							error_msg);
					default:
						return _Utils_Tuple2(
							_Utils_update(
								newModel,
								{
									form: _Utils_update(
										form,
										{problems: _List_Nil})
								}),
							$elm$core$Platform$Cmd$none);
				}
			default:
				var response = msg.a;
				var editState = model.editState;
				var newModel = _Utils_update(
					model,
					{
						editState: A2(
							$elm$core$Maybe$andThen,
							function (x) {
								return $elm$core$Maybe$Just(
									_Utils_update(
										x,
										{requestState: response}));
							},
							editState)
					});
				if (response.$ === 'Success') {
					var crewMember = response.a;
					var form = {
						email: crewMember.email,
						name: crewMember.name,
						phoneNumber: crewMember.phoneNumber,
						problems: _List_Nil,
						role: $elm$core$Maybe$Just(crewMember.role)
					};
					return _Utils_Tuple2(
						_Utils_update(
							newModel,
							{form: form}),
						A2(
							$elm$core$Task$perform,
							$elm$core$Basics$identity,
							$elm$core$Task$succeed(
								$author$project$Pages$Crew$CrewMemberRegistrationPage$RoleDropdownMsg(
									$author$project$StyledElement$DropDown$selectOption(crewMember.role)))));
				} else {
					return _Utils_Tuple2(newModel, $elm$core$Platform$Cmd$none);
				}
		}
	});
var $author$project$Models$CrewMember$Add = F2(
	function (a, b) {
		return {$: 'Add', a: a, b: b};
	});
var $author$project$Models$CrewMember$Remove = F2(
	function (a, b) {
		return {$: 'Remove', a: a, b: b};
	});
var $author$project$Models$CrewMember$applyChanges = F2(
	function (changes, data) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (change, editedData) {
					var crew = function () {
						if (change.$ === 'Add') {
							var crewMember_id = change.a;
							var bus = change.b;
							return A2(
								$elm$core$List$map,
								function (c) {
									return _Utils_eq(crewMember_id, c.id) ? _Utils_update(
										c,
										{
											bus: $elm$core$Maybe$Just(bus)
										}) : c;
								},
								editedData.crew);
						} else {
							var crewMember_id = change.a;
							return A2(
								$elm$core$List$map,
								function (c) {
									return _Utils_eq(crewMember_id, c.id) ? _Utils_update(
										c,
										{bus: $elm$core$Maybe$Nothing}) : c;
								},
								editedData.crew);
						}
					}();
					return _Utils_update(
						editedData,
						{crew: crew});
				}),
			data,
			$elm$core$List$reverse(changes));
	});
var $author$project$Models$CrewMember$trimChanges = F2(
	function (dataOld, dataNew) {
		var zipped = A3($elm$core$List$map2, $elm$core$Tuple$pair, dataOld.crew, dataNew.crew);
		var changes = $elm$core$List$concat(
			A2(
				$elm$core$List$map,
				function (_v1) {
					var old = _v1.a;
					var _new = _v1.b;
					var _v2 = _Utils_Tuple2(old.bus, _new.bus);
					if (_v2.a.$ === 'Nothing') {
						if (_v2.b.$ === 'Just') {
							var _v3 = _v2.a;
							var bus = _v2.b.a;
							return _List_fromArray(
								[
									A2($author$project$Models$CrewMember$Add, _new.id, bus)
								]);
						} else {
							return _List_Nil;
						}
					} else {
						if (_v2.b.$ === 'Nothing') {
							var bus = _v2.a.a;
							var _v4 = _v2.b;
							return _List_fromArray(
								[
									A2($author$project$Models$CrewMember$Remove, _new.id, bus)
								]);
						} else {
							var bus1 = _v2.a.a;
							var bus2 = _v2.b.a;
							return _List_fromArray(
								[
									A2($author$project$Models$CrewMember$Add, _new.id, bus2),
									A2($author$project$Models$CrewMember$Remove, _new.id, bus1)
								]);
						}
					}
				},
				A2(
					$elm$core$List$filter,
					function (_v0) {
						var old = _v0.a;
						var _new = _v0.b;
						return !_Utils_eq(old.bus, _new.bus);
					},
					zipped)));
		return changes;
	});
var $author$project$Api$Endpoint$crewAssignmentChanges = A2(
	$author$project$Api$Endpoint$url,
	_List_fromArray(
		['school', 'crew_and_buses']),
	_List_Nil);
var $author$project$Models$CrewMember$changeToBusID = function (change) {
	if (change.$ === 'Add') {
		var bus_id = change.b;
		return bus_id;
	} else {
		var bus_id = change.b;
		return bus_id;
	}
};
var $author$project$Models$CrewMember$changeToCrewID = function (change) {
	if (change.$ === 'Add') {
		var crew_id = change.a;
		return crew_id;
	} else {
		var crew_id = change.a;
		return crew_id;
	}
};
var $author$project$Models$CrewMember$changeToString = function (change) {
	if (change.$ === 'Add') {
		return 'add';
	} else {
		return 'remove';
	}
};
var $author$project$Models$CrewMember$encodeChanges = function (changes) {
	var objectEncoder = function (change) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'change',
					$elm$json$Json$Encode$string(
						$author$project$Models$CrewMember$changeToString(change))),
					_Utils_Tuple2(
					'bus',
					$elm$json$Json$Encode$int(
						$author$project$Models$CrewMember$changeToBusID(change))),
					_Utils_Tuple2(
					'crew_member',
					$elm$json$Json$Encode$int(
						$author$project$Models$CrewMember$changeToCrewID(change)))
				]));
	};
	return $elm$http$Http$jsonBody(
		A2($elm$json$Json$Encode$list, objectEncoder, changes));
};
var $author$project$Pages$Crew$CrewMembersPage$updateAssignments = F2(
	function (session, changes) {
		var updates = $author$project$Models$CrewMember$encodeChanges(changes);
		return A2(
			$elm$core$Platform$Cmd$map,
			$author$project$Pages$Crew$CrewMembersPage$ServerResponse,
			A4($author$project$Api$patch, session, $author$project$Api$Endpoint$crewAssignmentChanges, updates, $author$project$Pages$Crew$CrewMembersPage$dataDecoder));
	});
var $author$project$Pages$Crew$CrewMembersPage$update = F2(
	function (msg, model) {
		var edits = model.edits;
		var data = function () {
			var _v8 = model.data;
			if (_v8.$ === 'Success') {
				var data_ = _v8.a;
				return $elm$core$Maybe$Just(data_);
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}();
		switch (msg.$) {
			case 'ServerResponse':
				var response = msg.a;
				var newModel = _Utils_update(
					model,
					{data: response});
				switch (response.$) {
					case 'Failure':
						var error = response.a;
						var _v2 = $author$project$Errors$decodeErrors(error);
						var error_msg = _v2.b;
						return _Utils_Tuple2(newModel, error_msg);
					case 'Success':
						var data_ = response.a;
						return _Utils_Tuple2(
							_Utils_update(
								newModel,
								{editedData: data_, edits: $author$project$Pages$Crew$CrewMembersPage$emptyEdits, inEditingMode: false}),
							$elm$core$Platform$Cmd$none);
					default:
						return _Utils_Tuple2(newModel, $elm$core$Platform$Cmd$none);
				}
			case 'StartEditing':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{inEditingMode: true}),
					$elm$core$Platform$Cmd$none);
			case 'CancelEdits':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							edits: _Utils_update(
								edits,
								{changes: _List_Nil}),
							inEditingMode: false
						}),
					$elm$core$Platform$Cmd$none);
			case 'SaveChanges':
				return _Utils_eq(model.edits.changes, _List_Nil) ? _Utils_Tuple2(
					_Utils_update(
						model,
						{inEditingMode: false}),
					$elm$core$Platform$Cmd$none) : _Utils_Tuple2(
					model,
					A2($author$project$Pages$Crew$CrewMembersPage$updateAssignments, model.session, model.edits.changes));
			case 'StartedDragging':
				var crewMember = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							edits: _Utils_update(
								edits,
								{
									draggingCrewMember: $elm$core$Maybe$Just(crewMember)
								})
						}),
					$elm$core$Platform$Cmd$none);
			case 'StoppedDragging':
				var crewMember = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							edits: _Utils_update(
								edits,
								{draggedAbove: $elm$core$Maybe$Nothing})
						}),
					$elm$core$Platform$Cmd$none);
			case 'DroppedCrewMemberOnto':
				var bus = msg.a;
				var serverData = A2(
					$elm$core$Maybe$withDefault,
					A2($author$project$Pages$Crew$CrewMembersPage$Data, _List_Nil, _List_Nil),
					data);
				var newChanges = function () {
					var _v3 = edits.draggingCrewMember;
					if (_v3.$ === 'Nothing') {
						return _List_Nil;
					} else {
						var crewMember = _v3.a;
						var replacingMember = $elm$core$List$head(
							A2(
								$elm$core$List$filter,
								function (c) {
									return _Utils_eq(c.role, crewMember.role) && _Utils_eq(
										c.bus,
										$elm$core$Maybe$Just(bus.id));
								},
								model.editedData.crew));
						return $elm$core$List$concat(
							_List_fromArray(
								[
									_List_fromArray(
									[
										A2($author$project$Models$CrewMember$Add, crewMember.id, bus.id)
									]),
									function () {
									var _v4 = crewMember.bus;
									if (_v4.$ === 'Just') {
										var previousBus = _v4.a;
										return _List_fromArray(
											[
												A2($author$project$Models$CrewMember$Remove, crewMember.id, previousBus)
											]);
									} else {
										return _List_Nil;
									}
								}(),
									function () {
									if (replacingMember.$ === 'Just') {
										var replacingMember_ = replacingMember.a;
										return _List_fromArray(
											[
												A2($author$project$Models$CrewMember$Remove, replacingMember_.id, bus.id)
											]);
									} else {
										return _List_Nil;
									}
								}()
								]));
					}
				}();
				var allChanges = _Utils_ap(newChanges, edits.changes);
				var editedData = A2($author$project$Models$CrewMember$applyChanges, allChanges, serverData);
				var trimmedChanges = A2($author$project$Models$CrewMember$trimChanges, serverData, editedData);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							editedData: editedData,
							edits: _Utils_update(
								edits,
								{changes: trimmedChanges})
						}),
					$elm$core$Platform$Cmd$none);
			case 'DraggedCrewMemberAbove':
				var bus = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							edits: _Utils_update(
								edits,
								{
									draggedAbove: $elm$core$Maybe$Just(bus)
								})
						}),
					$elm$core$Platform$Cmd$none);
			case 'DroppedCrewMemberOntoUnassigned':
				var serverData = A2(
					$elm$core$Maybe$withDefault,
					A2($author$project$Pages$Crew$CrewMembersPage$Data, _List_Nil, _List_Nil),
					data);
				var newChanges = function () {
					var _v6 = edits.draggingCrewMember;
					if (_v6.$ === 'Just') {
						var crewMember = _v6.a;
						var _v7 = crewMember.bus;
						if (_v7.$ === 'Nothing') {
							return _List_Nil;
						} else {
							var previousBus = _v7.a;
							return _List_fromArray(
								[
									A2($author$project$Models$CrewMember$Remove, crewMember.id, previousBus)
								]);
						}
					} else {
						return _List_Nil;
					}
				}();
				var allChanges = _Utils_ap(newChanges, edits.changes);
				var editedData = A2($author$project$Models$CrewMember$applyChanges, allChanges, serverData);
				var trimmedChanges = A2($author$project$Models$CrewMember$trimChanges, serverData, editedData);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							editedData: editedData,
							edits: _Utils_update(
								edits,
								{changes: trimmedChanges})
						}),
					$elm$core$Platform$Cmd$none);
			case 'DraggedCrewMemberAboveUnassigned':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							edits: _Utils_update(
								edits,
								{draggedAbove: $elm$core$Maybe$Nothing})
						}),
					$elm$core$Platform$Cmd$none);
			case 'SelectedCrewMember':
				var crewMember = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{selectedCrewMember: crewMember}),
					$elm$core$Platform$Cmd$none);
			default:
				var crewMember = msg.a;
				return _Utils_Tuple2(
					model,
					A2(
						$author$project$Navigation$rerouteTo,
						model,
						$author$project$Navigation$EditCrewMember(crewMember.id)));
		}
	});
var $author$project$Pages$Devices$DeviceRegistrationPage$CameraClosing = {$: 'CameraClosing'};
var $author$project$Pages$Devices$DeviceRegistrationPage$CameraOpen = {$: 'CameraOpen'};
var $author$project$Pages$Devices$DeviceRegistrationPage$CameraOpenError = {$: 'CameraOpenError'};
var $author$project$Pages$Devices$DeviceRegistrationPage$CameraOpening = {$: 'CameraOpening'};
var $author$project$Pages$Devices$DeviceRegistrationPage$BusPicked = function (a) {
	return {$: 'BusPicked', a: a};
};
var $author$project$Pages$Devices$DeviceRegistrationPage$DropdownMsg = function (a) {
	return {$: 'DropdownMsg', a: a};
};
var $author$project$Icons$vehicle = $author$project$Icons$iconNamed('images/shuttle.svg');
var $author$project$Pages$Devices$DeviceRegistrationPage$busDropdown = function (model) {
	var dropdown = function (buses) {
		return A2(
			$author$project$StyledElement$dropDown,
			_List_Nil,
			{
				ariaLabel: 'Select bus dropdown',
				caption: $elm$core$Maybe$Just('Select the bus you will attach the device to'),
				dropDownMsg: $author$project$Pages$Devices$DeviceRegistrationPage$DropdownMsg,
				dropdownState: model.busDropDownState,
				errorCaption: $elm$core$Maybe$Nothing,
				icon: $elm$core$Maybe$Just($author$project$Icons$vehicle),
				isLoading: false,
				onSelect: $author$project$Pages$Devices$DeviceRegistrationPage$BusPicked,
				options: buses,
				prompt: $elm$core$Maybe$Nothing,
				title: 'Bus',
				toString: function (x) {
					return x.numberPlate;
				}
			});
	};
	var _v0 = model.buses;
	if (_v0.$ === 'Success') {
		var buses = _v0.a;
		return dropdown(buses);
	} else {
		return dropdown(_List_Nil);
	}
};
var $author$project$Ports$disableCamera = _Platform_outgoingPort('disableCamera', $elm$json$Json$Encode$int);
var $author$project$Ports$initializeCamera = _Platform_outgoingPort(
	'initializeCamera',
	function ($) {
		return $elm$json$Json$Encode$null;
	});
var $elm$core$String$foldl = _String_foldl;
var $elm$core$String$cons = _String_cons;
var $elm$core$String$fromChar = function (_char) {
	return A2($elm$core$String$cons, _char, '');
};
var $elm$core$List$member = F2(
	function (x, xs) {
		return A2(
			$elm$core$List$any,
			function (a) {
				return _Utils_eq(a, x);
			},
			xs);
	});
var $author$project$Utils$Validator$isValidImei = function (imei) {
	var sum_of_double = function (x) {
		var sum_of_double_ = F2(
			function (_char, acc) {
				var _v5 = $elm$core$String$toInt(
					$elm$core$String$fromChar(_char));
				if (_v5.$ === 'Nothing') {
					return acc;
				} else {
					var _int = _v5.a;
					return acc + _int;
				}
			});
		return A3(
			$elm$core$String$foldl,
			sum_of_double_,
			0,
			$elm$core$String$fromInt(x * 2));
	};
	var luhns_sum_ = F3(
		function (array, sum, oddPosition) {
			luhns_sum_:
			while (true) {
				var _v0 = $elm$core$String$uncons(array);
				if (_v0.$ === 'Nothing') {
					return sum;
				} else {
					var _v1 = _v0.a;
					var head = _v1.a;
					var tail = _v1.b;
					if (oddPosition) {
						var _v2 = $elm$core$String$toInt(
							$elm$core$String$fromChar(head));
						if (_v2.$ === 'Nothing') {
							var $temp$array = tail,
								$temp$sum = sum,
								$temp$oddPosition = !oddPosition;
							array = $temp$array;
							sum = $temp$sum;
							oddPosition = $temp$oddPosition;
							continue luhns_sum_;
						} else {
							var _int = _v2.a;
							var $temp$array = tail,
								$temp$sum = sum + _int,
								$temp$oddPosition = !oddPosition;
							array = $temp$array;
							sum = $temp$sum;
							oddPosition = $temp$oddPosition;
							continue luhns_sum_;
						}
					} else {
						var _v3 = $elm$core$String$toInt(
							$elm$core$String$fromChar(head));
						if (_v3.$ === 'Nothing') {
							var $temp$array = tail,
								$temp$sum = sum,
								$temp$oddPosition = !oddPosition;
							array = $temp$array;
							sum = $temp$sum;
							oddPosition = $temp$oddPosition;
							continue luhns_sum_;
						} else {
							var _int = _v3.a;
							var $temp$array = tail,
								$temp$sum = sum + sum_of_double(_int),
								$temp$oddPosition = !oddPosition;
							array = $temp$array;
							sum = $temp$sum;
							oddPosition = $temp$oddPosition;
							continue luhns_sum_;
						}
					}
				}
			}
		});
	var luhns_sum = function (_int) {
		return A3(
			luhns_sum_,
			$elm$core$String$fromInt(_int),
			0,
			true);
	};
	var imei_lengths = _List_fromArray(
		[15, 17]);
	var is_valid_length = A2(
		$elm$core$List$member,
		$elm$core$String$length(imei),
		imei_lengths);
	var _v4 = $elm$core$String$toInt(imei);
	if (_v4.$ === 'Just') {
		var imei_number = _v4.a;
		return is_valid_length && (!(luhns_sum(imei_number) % 10));
	} else {
		return false;
	}
};
var $author$project$Ports$setFrameFrozen = _Platform_outgoingPort('setFrameFrozen', $elm$json$Json$Encode$bool);
var $author$project$Pages$Devices$DeviceRegistrationPage$RegisterResponse = function (a) {
	return {$: 'RegisterResponse', a: a};
};
var $author$project$Pages$Devices$DeviceRegistrationPage$submit = F2(
	function (session, form) {
		var params = $elm$http$Http$jsonBody(
			function () {
				var _v0 = form.bus_id;
				if (_v0.$ === 'Just') {
					var bus_id = _v0.a;
					return $elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'bus_id',
								$elm$json$Json$Encode$int(bus_id)),
								_Utils_Tuple2(
								'imei',
								$elm$json$Json$Encode$string(form.serial))
							]));
				} else {
					return $elm$json$Json$Encode$object(_List_Nil);
				}
			}());
		return A2(
			$elm$core$Platform$Cmd$map,
			$author$project$Pages$Devices$DeviceRegistrationPage$RegisterResponse,
			A4(
				$author$project$Api$post,
				session,
				$author$project$Api$Endpoint$devices,
				params,
				$elm$json$Json$Decode$succeed(form)));
	});
var $author$project$Errors$toClientSideError = function (problem) {
	return A2($author$project$Errors$ClientSideError, problem.a, problem.b);
};
var $author$project$Pages$Devices$DeviceRegistrationPage$InvalidSerial = {$: 'InvalidSerial'};
var $author$project$Pages$Devices$DeviceRegistrationPage$validateForm = function (form) {
	var problems = $author$project$Utils$Validator$isValidImei(form.serial) ? _List_Nil : _List_fromArray(
		[
			_Utils_Tuple2($author$project$Pages$Devices$DeviceRegistrationPage$InvalidSerial, 'This value does not have the correct format, please enter it again')
		]);
	if (!problems.b) {
		return $elm$core$Result$Ok(
			{
				bus_id: A2(
					$elm$core$Maybe$map,
					function ($) {
						return $.id;
					},
					form.selectedBus),
				serial: form.serial
			});
	} else {
		return $elm$core$Result$Err(problems);
	}
};
var $author$project$Pages$Devices$DeviceRegistrationPage$update = F2(
	function (msg, model) {
		var form = model.form;
		switch (msg.$) {
			case 'ChangedDeviceSerial':
				var serial = msg.a;
				var updated_form = _Utils_update(
					form,
					{serial: serial});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{form: updated_form}),
					$elm$core$Platform$Cmd$none);
			case 'SubmitButtonMsg':
				var _v1 = $author$project$Pages$Devices$DeviceRegistrationPage$validateForm(model.form);
				if (_v1.$ === 'Ok') {
					var validForm = _v1.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								form: _Utils_update(
									form,
									{problems: _List_Nil}),
								requestState: $krisajenkins$remotedata$RemoteData$Loading
							}),
						A2($author$project$Pages$Devices$DeviceRegistrationPage$submit, model.session, validForm));
				} else {
					var problems = _v1.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								form: _Utils_update(
									form,
									{
										problems: $author$project$Errors$toClientSideErrors(problems)
									})
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 'ToggleCamera':
				return _Utils_eq(model.cameraState, $author$project$Pages$Devices$DeviceRegistrationPage$CameraClosed) ? _Utils_Tuple2(
					_Utils_update(
						model,
						{
							cameraState: $author$project$Pages$Devices$DeviceRegistrationPage$CameraOpening,
							form: _Utils_update(
								form,
								{
									problems: A2(
										$elm$core$List$filter,
										function (x) {
											return !_Utils_eq(
												x,
												A2($author$project$Errors$ClientSideError, $author$project$Pages$Devices$DeviceRegistrationPage$CameraOpenError, ''));
										},
										model.form.problems)
								})
						}),
					$author$project$Ports$initializeCamera(_Utils_Tuple0)) : _Utils_Tuple2(
					model,
					$author$project$Ports$disableCamera(0));
			case 'CameraOpened':
				var isActive = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							cameraState: isActive ? $author$project$Pages$Devices$DeviceRegistrationPage$CameraOpen : $author$project$Pages$Devices$DeviceRegistrationPage$CameraClosed
						}),
					$elm$core$Platform$Cmd$none);
			case 'GotCameraNotFoundError':
				var newError = $author$project$Errors$toClientSideError(
					_Utils_Tuple2($author$project$Pages$Devices$DeviceRegistrationPage$CameraOpenError, 'No webcam found, type in the code or try again later'));
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							form: _Utils_update(
								form,
								{
									problems: A2($elm$core$List$member, newError, form.problems) ? form.problems : A2($elm$core$List$cons, newError, form.problems)
								})
						}),
					$elm$core$Platform$Cmd$none);
			case 'ReceivedCode':
				var scannedSerial = msg.a;
				var updated_form = _Utils_update(
					form,
					{serial: scannedSerial});
				return $author$project$Utils$Validator$isValidImei(scannedSerial) ? _Utils_Tuple2(
					_Utils_update(
						model,
						{cameraState: $author$project$Pages$Devices$DeviceRegistrationPage$CameraClosing, form: updated_form}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								$author$project$Ports$disableCamera(500),
								$author$project$Ports$setFrameFrozen(true)
							]))) : _Utils_Tuple2(
					_Utils_update(
						model,
						{
							form: _Utils_update(
								form,
								{serial: ''})
						}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								$author$project$Ports$setFrameFrozen(false)
							])));
			case 'BusPicked':
				var bus = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							form: _Utils_update(
								form,
								{selectedBus: bus})
						}),
					$elm$core$Platform$Cmd$none);
			case 'DropdownMsg':
				var subMsg = msg.a;
				var _v2 = $author$project$Pages$Devices$DeviceRegistrationPage$busDropdown(model);
				var config = _v2.b;
				var options = _v2.c;
				var _v3 = A4($author$project$StyledElement$DropDown$update, config, subMsg, model.busDropDownState, options);
				var state = _v3.a;
				var cmd = _v3.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{busDropDownState: state}),
					cmd);
			case 'BusesServerResponse':
				var response = msg.a;
				if (response.$ === 'Success') {
					var buses = response.a;
					var filteredBuses = A2(
						$elm$core$List$sortBy,
						function ($) {
							return $.numberPlate;
						},
						A2(
							$elm$core$List$filter,
							A2(
								$elm$core$Basics$composeR,
								function ($) {
									return $.hasDevice;
								},
								$elm$core$Basics$not),
							buses));
					var selectedBus = A2(
						$elm$core$Maybe$andThen,
						function (bus_id) {
							return $elm$core$List$head(
								A2(
									$elm$core$List$filter,
									function (bus) {
										return _Utils_eq(bus.id, bus_id);
									},
									filteredBuses));
						},
						model.preselectedBus);
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								buses: $krisajenkins$remotedata$RemoteData$Success(filteredBuses),
								form: _Utils_update(
									form,
									{selectedBus: selectedBus})
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{buses: response}),
						$elm$core$Platform$Cmd$none);
				}
			default:
				var response = msg.a;
				var newModel = _Utils_update(
					model,
					{requestState: response});
				switch (response.$) {
					case 'Success':
						return _Utils_Tuple2(
							newModel,
							A2($author$project$Navigation$rerouteTo, newModel, $author$project$Navigation$DeviceList));
					case 'Failure':
						var error = response.a;
						var apiFormError = $author$project$Errors$toServerSideErrors(error);
						var updatedForm = _Utils_update(
							form,
							{
								problems: _Utils_ap(form.problems, apiFormError)
							});
						var _v6 = $author$project$Errors$decodeErrors(error);
						var error_msg = _v6.b;
						return _Utils_Tuple2(
							_Utils_update(
								newModel,
								{form: updatedForm}),
							error_msg);
					default:
						return _Utils_Tuple2(
							_Utils_update(
								newModel,
								{
									form: _Utils_update(
										form,
										{problems: _List_Nil})
								}),
							$elm$core$Platform$Cmd$none);
				}
		}
	});
var $author$project$Pages$Devices$DevicesPage$update = F2(
	function (msg, model) {
		var devices = msg.a;
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{devices: devices}),
			$elm$core$Platform$Cmd$none);
	});
var $author$project$Pages$Households$HouseholdRegistrationPage$TwoWay = {$: 'TwoWay'};
var $author$project$Pages$Households$HouseholdRegistrationPage$Changed = function (a) {
	return {$: 'Changed', a: a};
};
var $author$project$Pages$Households$HouseholdRegistrationPage$HomeLocation = function (a) {
	return {$: 'HomeLocation', a: a};
};
var $author$project$Pages$Households$HouseholdRegistrationPage$SearchDropdownMsg = function (a) {
	return {$: 'SearchDropdownMsg', a: a};
};
var $author$project$Style$elevated2 = $mdgriffith$elm_ui$Element$Border$shadow(
	{
		blur: 10,
		color: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.24),
		offset: _Utils_Tuple2(0, 0),
		size: 0
	});
var $author$project$Icons$search = $author$project$Icons$iconNamed('images/search.svg');
var $author$project$Pages$Households$HouseholdRegistrationPage$gmapDropDown = function (model) {
	return A2(
		$author$project$StyledElement$dropDown,
		_List_fromArray(
			[$author$project$Style$elevated2]),
		{
			ariaLabel: 'Search for household on the map',
			caption: $elm$core$Maybe$Nothing,
			dropDownMsg: $author$project$Pages$Households$HouseholdRegistrationPage$SearchDropdownMsg,
			dropdownState: model.searchDropdownState,
			errorCaption: $elm$core$Maybe$Nothing,
			icon: $elm$core$Maybe$Just($author$project$Icons$search),
			isLoading: true,
			onSelect: A2($elm$core$Basics$composeR, $author$project$Pages$Households$HouseholdRegistrationPage$HomeLocation, $author$project$Pages$Households$HouseholdRegistrationPage$Changed),
			options: _List_Nil,
			prompt: $elm$core$Maybe$Just('Search for area'),
			title: '',
			toString: function (x) {
				return 'Home';
			}
		});
};
var $author$project$Pages$Households$HouseholdRegistrationPage$DropdownMsg = function (a) {
	return {$: 'DropdownMsg', a: a};
};
var $author$project$Pages$Households$HouseholdRegistrationPage$EmptyRoute = {$: 'EmptyRoute'};
var $author$project$Pages$Households$HouseholdRegistrationPage$Route = function (a) {
	return {$: 'Route', a: a};
};
var $author$project$Pages$Households$HouseholdRegistrationPage$routeDropDown = function (model) {
	return A2(
		$author$project$StyledElement$dropDown,
		_List_Nil,
		{
			ariaLabel: 'Select route dropdown',
			caption: $elm$core$Maybe$Nothing,
			dropDownMsg: $author$project$Pages$Households$HouseholdRegistrationPage$DropdownMsg,
			dropdownState: model.routeDropdownState,
			errorCaption: A3(
				$author$project$Errors$inputErrorsFor,
				model.form.problems,
				'route',
				_List_fromArray(
					[$author$project$Pages$Households$HouseholdRegistrationPage$EmptyRoute])),
			icon: $elm$core$Maybe$Just($author$project$Icons$vehicle),
			isLoading: false,
			onSelect: A2($elm$core$Basics$composeR, $author$project$Pages$Households$HouseholdRegistrationPage$Route, $author$project$Pages$Households$HouseholdRegistrationPage$Changed),
			options: _List_fromArray(
				['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']),
			prompt: $elm$core$Maybe$Nothing,
			title: 'Route',
			toString: $elm$core$Basics$identity
		});
};
var $author$project$Pages$Households$HouseholdRegistrationPage$ServerResponse = function (a) {
	return {$: 'ServerResponse', a: a};
};
var $author$project$Pages$Households$HouseholdRegistrationPage$aDecoder = $elm$json$Json$Decode$succeed(0);
var $author$project$Pages$Households$HouseholdRegistrationPage$encodeLocation = function (location) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'lat',
				$elm$json$Json$Encode$float(location.latitude)),
				_Utils_Tuple2(
				'lng',
				$elm$json$Json$Encode$float(location.longitude))
			]));
};
var $author$project$Pages$Households$HouseholdRegistrationPage$encodeStudent = function (student) {
	var travelTime = function () {
		var _v0 = student.time;
		switch (_v0.$) {
			case 'TwoWay':
				return 'two-way';
			case 'Morning':
				return 'morning';
			default:
				return 'evening';
		}
	}();
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'name',
				$elm$json$Json$Encode$string(student.name)),
				_Utils_Tuple2(
				'travel_time',
				$elm$json$Json$Encode$string(travelTime))
			]));
};
var $author$project$Pages$Households$HouseholdRegistrationPage$submit = F2(
	function (session, household) {
		var guardian = $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'name',
					$elm$json$Json$Encode$string(household.guardian.name)),
					_Utils_Tuple2(
					'phone_number',
					$elm$json$Json$Encode$string(household.guardian.phoneNumber)),
					_Utils_Tuple2(
					'email',
					$elm$json$Json$Encode$string(household.guardian.email))
				]));
		var params = $elm$http$Http$jsonBody(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2('guardian', guardian),
						_Utils_Tuple2(
						'students',
						A2(
							$elm$json$Json$Encode$list,
							$author$project$Pages$Households$HouseholdRegistrationPage$encodeStudent,
							A2($elm$core$List$cons, household.students.a, household.students.b))),
						_Utils_Tuple2(
						'route',
						$elm$json$Json$Encode$string('household.route')),
						_Utils_Tuple2(
						'home_location',
						$author$project$Pages$Households$HouseholdRegistrationPage$encodeLocation(household.homeLocation)),
						_Utils_Tuple2(
						'pickup_location',
						$author$project$Pages$Households$HouseholdRegistrationPage$encodeLocation(household.pickupLocation))
					])));
		return A2(
			$elm$core$Platform$Cmd$map,
			$author$project$Pages$Households$HouseholdRegistrationPage$ServerResponse,
			A4($author$project$Api$post, session, $author$project$Api$Endpoint$households, params, $author$project$Pages$Households$HouseholdRegistrationPage$aDecoder));
	});
var $author$project$Pages$Households$HouseholdRegistrationPage$Evening = {$: 'Evening'};
var $author$project$Pages$Households$HouseholdRegistrationPage$Morning = {$: 'Morning'};
var $author$project$Pages$Households$HouseholdRegistrationPage$updateField = F2(
	function (field, model) {
		var form = model.form;
		switch (field.$) {
			case 'CurrentStudentName':
				var name = field.a;
				var updated_form = _Utils_update(
					form,
					{currentStudent: name});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{form: updated_form}),
					$elm$core$Platform$Cmd$none);
			case 'GuardianName':
				var name = field.a;
				var guardian = form.guardian;
				var updated_form = _Utils_update(
					form,
					{
						guardian: _Utils_update(
							guardian,
							{name: name})
					});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{form: updated_form}),
					$elm$core$Platform$Cmd$none);
			case 'PhoneNumber':
				var phoneNumber = field.a;
				var guardian = form.guardian;
				var updated_form = _Utils_update(
					form,
					{
						guardian: _Utils_update(
							guardian,
							{phoneNumber: phoneNumber})
					});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{form: updated_form}),
					$elm$core$Platform$Cmd$none);
			case 'Email':
				var email = field.a;
				var guardian = form.guardian;
				var updated_form = _Utils_update(
					form,
					{
						guardian: _Utils_update(
							guardian,
							{email: email})
					});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{form: updated_form}),
					$elm$core$Platform$Cmd$none);
			case 'Route':
				var route = field.a;
				var updated_form = _Utils_update(
					form,
					{route: route});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{form: updated_form}),
					$elm$core$Platform$Cmd$none);
			case 'HomeLocation':
				var homeLocation = field.a;
				var updated_form = _Utils_update(
					form,
					{homeLocation: homeLocation});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{form: updated_form}),
					$elm$core$Platform$Cmd$none);
			case 'CanTrack':
				var checked = field.a;
				var updated_form = _Utils_update(
					form,
					{canTrack: checked});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{form: updated_form}),
					$elm$core$Platform$Cmd$none);
			default:
				var updatedStudent = field.a;
				var toggledTime = field.b;
				var transformTime = function (originalTime) {
					var _v1 = _Utils_Tuple2(originalTime, toggledTime);
					_v1$6:
					while (true) {
						switch (_v1.a.$) {
							case 'Morning':
								switch (_v1.b.$) {
									case 'Evening':
										var _v4 = _v1.a;
										var _v5 = _v1.b;
										return $author$project$Pages$Households$HouseholdRegistrationPage$TwoWay;
									case 'Morning':
										var _v6 = _v1.a;
										var _v7 = _v1.b;
										return $author$project$Pages$Households$HouseholdRegistrationPage$Evening;
									default:
										break _v1$6;
								}
							case 'Evening':
								switch (_v1.b.$) {
									case 'Morning':
										var _v2 = _v1.a;
										var _v3 = _v1.b;
										return $author$project$Pages$Households$HouseholdRegistrationPage$TwoWay;
									case 'Evening':
										var _v8 = _v1.a;
										var _v9 = _v1.b;
										return $author$project$Pages$Households$HouseholdRegistrationPage$Morning;
									default:
										break _v1$6;
								}
							default:
								switch (_v1.b.$) {
									case 'Evening':
										var _v10 = _v1.a;
										var _v11 = _v1.b;
										return $author$project$Pages$Households$HouseholdRegistrationPage$Morning;
									case 'Morning':
										var _v12 = _v1.a;
										var _v13 = _v1.b;
										return $author$project$Pages$Households$HouseholdRegistrationPage$Evening;
									default:
										break _v1$6;
								}
						}
					}
					return originalTime;
				};
				var updateStudent = function (student) {
					return _Utils_eq(updatedStudent, student) ? _Utils_update(
						student,
						{
							time: transformTime(student.time)
						}) : student;
				};
				var updated_form = _Utils_update(
					form,
					{
						students: A2($elm$core$List$map, updateStudent, form.students)
					});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{form: updated_form}),
					$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Pages$Households$HouseholdRegistrationPage$updateStatus = F2(
	function (model, webData) {
		switch (webData.$) {
			case 'Loading':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'Failure':
				var error = webData.a;
				var form = model.form;
				var apiFormErrors = $author$project$Errors$toServerSideErrors(error);
				var updatedForm = _Utils_update(
					form,
					{
						problems: _Utils_ap(form.problems, apiFormErrors)
					});
				var _v1 = $author$project$Errors$decodeErrors(error);
				var error_msg = _v1.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{form: updatedForm}),
					error_msg);
			case 'NotAsked':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			default:
				var creds = webData.a;
				return _Utils_Tuple2(
					model,
					A2($author$project$Navigation$rerouteTo, model, $author$project$Navigation$HouseholdList));
		}
	});
var $author$project$Pages$Households$HouseholdRegistrationPage$EmptyGuardianEmail = {$: 'EmptyGuardianEmail'};
var $author$project$Pages$Households$HouseholdRegistrationPage$EmptyGuardianName = {$: 'EmptyGuardianName'};
var $author$project$Pages$Households$HouseholdRegistrationPage$EmptyGuardianPhoneNumber = {$: 'EmptyGuardianPhoneNumber'};
var $author$project$Pages$Households$HouseholdRegistrationPage$EmptyHomeLocation = {$: 'EmptyHomeLocation'};
var $author$project$Pages$Households$HouseholdRegistrationPage$EmptyPickupLocation = {$: 'EmptyPickupLocation'};
var $author$project$Pages$Households$HouseholdRegistrationPage$EmptyStudentsList = {$: 'EmptyStudentsList'};
var $author$project$Pages$Households$HouseholdRegistrationPage$InvalidGuardianEmail = {$: 'InvalidGuardianEmail'};
var $author$project$Pages$Households$HouseholdRegistrationPage$InvalidGuardianPhoneNumber = {$: 'InvalidGuardianPhoneNumber'};
var $author$project$Pages$Households$HouseholdRegistrationPage$validateForm = function (form) {
	var unwrapNullables = function () {
		var _v3 = _Utils_Tuple3(form.pickupLocation, form.homeLocation, form.route);
		if (((_v3.a.$ === 'Just') && (_v3.b.$ === 'Just')) && (_v3.c.$ === 'Just')) {
			var pickupLocation = _v3.a.a;
			var homeLocation = _v3.b.a;
			var route = _v3.c.a;
			return $elm$core$Result$Ok(
				_Utils_Tuple3(pickupLocation, homeLocation, route));
		} else {
			return $elm$core$Result$Err(
				$elm$core$List$concat(
					_List_fromArray(
						[
							_Utils_eq(form.pickupLocation, $elm$core$Maybe$Nothing) ? _List_fromArray(
							[
								_Utils_Tuple2($author$project$Pages$Households$HouseholdRegistrationPage$EmptyPickupLocation, 'Required')
							]) : _List_Nil,
							_Utils_eq(form.homeLocation, $elm$core$Maybe$Nothing) ? _List_fromArray(
							[
								_Utils_Tuple2($author$project$Pages$Households$HouseholdRegistrationPage$EmptyHomeLocation, 'Required')
							]) : _List_Nil,
							_Utils_eq(form.route, $elm$core$Maybe$Nothing) ? _List_fromArray(
							[
								_Utils_Tuple2($author$project$Pages$Households$HouseholdRegistrationPage$EmptyRoute, 'Required')
							]) : _List_Nil
						])));
		}
	}();
	var problems = $elm$core$List$concat(
		_List_fromArray(
			[
				$elm$core$String$isEmpty(
				$elm$core$String$trim(form.guardian.name)) ? _List_fromArray(
				[
					_Utils_Tuple2($author$project$Pages$Households$HouseholdRegistrationPage$EmptyGuardianName, 'Required')
				]) : _List_Nil,
				$elm$core$String$isEmpty(
				$elm$core$String$trim(form.guardian.email)) ? _List_fromArray(
				[
					_Utils_Tuple2($author$project$Pages$Households$HouseholdRegistrationPage$EmptyGuardianEmail, 'Required')
				]) : ((!$author$project$Utils$Validator$isValidEmail(form.guardian.email)) ? _List_fromArray(
				[
					_Utils_Tuple2($author$project$Pages$Households$HouseholdRegistrationPage$InvalidGuardianEmail, 'There\'s something wrong with this email')
				]) : _List_Nil),
				$elm$core$String$isEmpty(
				$elm$core$String$trim(form.guardian.phoneNumber)) ? _List_fromArray(
				[
					_Utils_Tuple2($author$project$Pages$Households$HouseholdRegistrationPage$EmptyGuardianPhoneNumber, 'Required')
				]) : ((!$author$project$Utils$Validator$isValidPhoneNumber(form.guardian.phoneNumber)) ? _List_fromArray(
				[
					_Utils_Tuple2($author$project$Pages$Households$HouseholdRegistrationPage$InvalidGuardianPhoneNumber, 'There\'s something wrong with this phone number')
				]) : _List_Nil)
			]));
	var _v0 = _Utils_Tuple3(
		$elm$core$List$head(form.students),
		problems,
		unwrapNullables);
	if (((_v0.a.$ === 'Just') && (!_v0.b.b)) && (_v0.c.$ === 'Ok')) {
		var student = _v0.a.a;
		var _v1 = _v0.c.a;
		var pickupLocation = _v1.a;
		var homeLocation = _v1.b;
		var route = _v1.c;
		return $elm$core$Result$Ok(
			{
				canTrack: form.canTrack,
				guardian: form.guardian,
				homeLocation: homeLocation,
				pickupLocation: pickupLocation,
				route: route,
				students: _Utils_Tuple2(
					student,
					A2($elm$core$List$drop, 1, form.students))
			});
	} else {
		var firstStudent = _v0.a;
		var nullableResult = _v0.c;
		return $elm$core$Result$Err(
			_Utils_ap(
				problems,
				_Utils_ap(
					_Utils_eq(firstStudent, $elm$core$Maybe$Nothing) ? _List_fromArray(
						[
							_Utils_Tuple2($author$project$Pages$Households$HouseholdRegistrationPage$EmptyStudentsList, 'Provide at least one student')
						]) : _List_Nil,
					function () {
						if (nullableResult.$ === 'Err') {
							var moreProblems = nullableResult.a;
							return moreProblems;
						} else {
							return _List_Nil;
						}
					}())));
	}
};
var $author$project$Pages$Households$HouseholdRegistrationPage$update = F2(
	function (msg, model) {
		var form = model.form;
		switch (msg.$) {
			case 'Changed':
				var field = msg.a;
				return A2($author$project$Pages$Households$HouseholdRegistrationPage$updateField, field, model);
			case 'DropdownMsg':
				var subMsg = msg.a;
				var _v1 = $author$project$Pages$Households$HouseholdRegistrationPage$routeDropDown(model);
				var config = _v1.b;
				var options = _v1.c;
				var _v2 = A4($author$project$StyledElement$DropDown$update, config, subMsg, model.routeDropdownState, options);
				var state = _v2.a;
				var cmd = _v2.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{routeDropdownState: state}),
					cmd);
			case 'SearchDropdownMsg':
				var subMsg = msg.a;
				var _v3 = $author$project$Pages$Households$HouseholdRegistrationPage$gmapDropDown(model);
				var config = _v3.b;
				var options = _v3.c;
				var _v4 = A4($author$project$StyledElement$DropDown$update, config, subMsg, model.searchDropdownState, options);
				var state = _v4.a;
				var cmd = _v4.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{searchDropdownState: state}),
					cmd);
			case 'SubmitButtonMsg':
				var _v5 = $author$project$Pages$Households$HouseholdRegistrationPage$validateForm(form);
				if (_v5.$ === 'Ok') {
					var validForm = _v5.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								form: _Utils_update(
									form,
									{problems: _List_Nil})
							}),
						A2($author$project$Pages$Households$HouseholdRegistrationPage$submit, model.session, validForm));
				} else {
					var problems = _v5.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								form: _Utils_update(
									form,
									{
										problems: $author$project$Errors$toClientSideErrors(problems)
									})
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 'SaveStudentPressed':
				var newStudent = {name: form.currentStudent, time: $author$project$Pages$Households$HouseholdRegistrationPage$TwoWay};
				var updated_form = (form.currentStudent === '') ? form : _Utils_update(
					form,
					{
						currentStudent: '',
						students: A2($elm$core$List$cons, newStudent, form.students)
					});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{form: updated_form}),
					$elm$core$Platform$Cmd$none);
			case 'DeleteStudentMsg':
				var deletedStudent = msg.a;
				var shouldDelete = function (student) {
					return !_Utils_eq(deletedStudent, student);
				};
				var updated_form = _Utils_update(
					form,
					{
						students: A2($elm$core$List$filter, shouldDelete, form.students)
					});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{form: updated_form}),
					$elm$core$Platform$Cmd$none);
			default:
				var response = msg.a;
				return A2($author$project$Pages$Households$HouseholdRegistrationPage$updateStatus, model, response);
		}
	});
var $author$project$Pages$Households$HouseholdsPage$update = F2(
	function (msg, model) {
		if (msg.$ === 'StudentsResponse') {
			var response = msg.a;
			if (response.$ === 'Failure') {
				var error = response.a;
				var _v2 = $author$project$Errors$decodeErrors(error);
				var error_msg = _v2.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{households: response}),
					error_msg);
			} else {
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{households: response}),
					$elm$core$Platform$Cmd$none);
			}
		} else {
			return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Pages$Login$LoginResponse = function (a) {
	return {$: 'LoginResponse', a: a};
};
var $author$project$Api$Endpoint$login = A2(
	$author$project$Api$Endpoint$url,
	_List_fromArray(
		['auth', 'manager', 'login']),
	_List_Nil);
var $author$project$Api$SuccessfulLogin = F2(
	function (location, creds) {
		return {creds: creds, location: location};
	});
var $author$project$Api$loginDecoder = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'creds',
	$author$project$Api$credDecoder,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'location',
		$author$project$Models$Location$locationDecoder,
		$elm$json$Json$Decode$succeed($author$project$Api$SuccessfulLogin)));
var $author$project$Pages$Login$login = F2(
	function (session, form) {
		var params = $elm$http$Http$jsonBody(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'email',
						$elm$json$Json$Encode$string(form.email)),
						_Utils_Tuple2(
						'password',
						$elm$json$Json$Encode$string(form.password))
					])));
		return A2(
			$elm$core$Platform$Cmd$map,
			$author$project$Pages$Login$LoginResponse,
			A4($author$project$Api$post, session, $author$project$Api$Endpoint$login, params, $author$project$Api$loginDecoder));
	});
var $author$project$Errors$errorToString = function (error) {
	if (error.$ === 'Unauthorized') {
		return 'Invalid email or password';
	} else {
		var errorText = error.a;
		return errorText;
	}
};
var $author$project$Api$credEncoder = function (_v0) {
	var name = _v0.name;
	var email = _v0.email;
	var token = _v0.token;
	var school_id = _v0.school_id;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'email',
				$elm$json$Json$Encode$string(email)),
				_Utils_Tuple2(
				'token',
				$elm$json$Json$Encode$string(token)),
				_Utils_Tuple2(
				'name',
				$elm$json$Json$Encode$string(name)),
				_Utils_Tuple2(
				'school_id',
				$elm$json$Json$Encode$int(school_id))
			]));
};
var $author$project$Api$storeCredentials = function (cred) {
	return $author$project$Api$storeCache(
		$elm$core$Maybe$Just(
			$author$project$Api$credEncoder(cred)));
};
var $author$project$Models$Location$storeSchoolLocation = function (location) {
	return $author$project$Models$Location$setSchoolLocation(
		$elm$core$Maybe$Just(location));
};
var $author$project$Session$withCredentials = F2(
	function (session, maybeCredentials) {
		if (maybeCredentials.$ === 'Nothing') {
			return A2(
				$author$project$Session$Guest,
				$author$project$Session$navKey(session),
				$author$project$Session$timeZone(session));
		} else {
			var credentials = maybeCredentials.a;
			if (session.$ === 'LoggedIn') {
				var key = session.a;
				var timezone = session.b;
				return A3($author$project$Session$LoggedIn, key, timezone, credentials);
			} else {
				var key = session.a;
				var timezone = session.b;
				return A3($author$project$Session$LoggedIn, key, timezone, credentials);
			}
		}
	});
var $author$project$Pages$Login$updateStatus = F2(
	function (model, msg) {
		switch (msg.$) {
			case 'Loading':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'Failure':
				var error = msg.a;
				var _v1 = $author$project$Errors$decodeErrors(error);
				var apiError = _v1.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							error: $elm$core$Maybe$Just(
								$author$project$Errors$errorToString(apiError))
						}),
					$elm$core$Platform$Cmd$none);
			case 'NotAsked':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			default:
				var data = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							session: A2(
								$author$project$Session$withCredentials,
								model.session,
								$elm$core$Maybe$Just(data.creds))
						}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								$author$project$Api$storeCredentials(data.creds),
								$author$project$Models$Location$storeSchoolLocation(data.location),
								A2($author$project$Navigation$rerouteTo, model, $author$project$Navigation$Buses)
							])));
		}
	});
var $author$project$Pages$Login$update = F2(
	function (msg, model) {
		var form = model.form;
		switch (msg.$) {
			case 'UpdatedPassword':
				var password = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							form: _Utils_update(
								form,
								{password: password})
						}),
					$elm$core$Platform$Cmd$none);
			case 'UpdatedEmail':
				var email = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							form: _Utils_update(
								form,
								{email: email})
						}),
					$elm$core$Platform$Cmd$none);
			case 'SubmittedForm':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{error: $elm$core$Maybe$Nothing, status: $krisajenkins$remotedata$RemoteData$Loading}),
					A2($author$project$Pages$Login$login, model.session, form));
			default:
				var requestStatus = msg.a;
				var updatedModel = _Utils_update(
					model,
					{status: requestStatus});
				return A2($author$project$Pages$Login$updateStatus, updatedModel, requestStatus);
		}
	});
var $author$project$Pages$Routes$Routes$update = F2(
	function (msg, model) {
		return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
	});
var $author$project$Pages$Signup$SchoolDetails = {$: 'SchoolDetails'};
var $author$project$Ports$requestGeoLocation = _Platform_outgoingPort(
	'requestGeoLocation',
	function ($) {
		return $elm$json$Json$Encode$null;
	});
var $author$project$Pages$Signup$SignupResponse = function (a) {
	return {$: 'SignupResponse', a: a};
};
var $author$project$Api$Endpoint$signup = A2(
	$author$project$Api$Endpoint$url,
	_List_fromArray(
		['school', 'create']),
	_List_Nil);
var $author$project$Pages$Signup$signup = F2(
	function (session, form) {
		var schoolParams = $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'name',
					$elm$json$Json$Encode$string(form.school.schoolName)),
					_Utils_Tuple2(
					'geo',
					$elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'lat',
								$elm$json$Json$Encode$float(form.school.schoolLocation.lat)),
								_Utils_Tuple2(
								'lng',
								$elm$json$Json$Encode$float(form.school.schoolLocation.lng)),
								_Utils_Tuple2(
								'radius',
								$elm$json$Json$Encode$float(form.school.schoolLocation.radius))
							])))
				]));
		var managerParams = $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'email',
					$elm$json$Json$Encode$string(form.manager.email)),
					_Utils_Tuple2(
					'name',
					$elm$json$Json$Encode$string(form.manager.name)),
					_Utils_Tuple2(
					'password',
					$elm$json$Json$Encode$string(form.manager.password))
				]));
		var params = $elm$http$Http$jsonBody(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2('manager', managerParams),
						_Utils_Tuple2('school', schoolParams)
					])));
		return A2(
			$elm$core$Platform$Cmd$map,
			$author$project$Pages$Signup$SignupResponse,
			A4($author$project$Api$post, session, $author$project$Api$Endpoint$signup, params, $author$project$Api$loginDecoder));
	});
var $author$project$Pages$Signup$updateStatus = F2(
	function (model, msg) {
		switch (msg.$) {
			case 'Loading':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'Failure':
				var error = msg.a;
				var form = model.form;
				var apiFormErrors = $author$project$Errors$toServerSideErrors(error);
				var updatedForm = _Utils_update(
					form,
					{
						problems: _Utils_ap(form.problems, apiFormErrors)
					});
				var _v1 = $author$project$Errors$decodeErrors(error);
				var error_msg = _v1.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{form: updatedForm}),
					error_msg);
			case 'NotAsked':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			default:
				var data = msg.a;
				return _Utils_Tuple2(
					model,
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A2(
								$author$project$Navigation$rerouteTo,
								model,
								$author$project$Navigation$Login(
									$elm$core$Maybe$Just($author$project$Navigation$ConfirmEmail))),
								$author$project$Api$storeCredentials(data.creds),
								$author$project$Models$Location$storeSchoolLocation(data.location)
							])));
		}
	});
var $author$project$Pages$Signup$ValidForm = F2(
	function (manager, school) {
		return {manager: manager, school: school};
	});
var $author$project$Pages$Signup$EmptyFirstName = {$: 'EmptyFirstName'};
var $author$project$Pages$Signup$EmptyLastName = {$: 'EmptyLastName'};
var $author$project$Pages$Signup$InvalidEmail = {$: 'InvalidEmail'};
var $author$project$Pages$Signup$PasswordIsEmpty = {$: 'PasswordIsEmpty'};
var $author$project$Pages$Signup$PasswordIsTooShort = {$: 'PasswordIsTooShort'};
var $author$project$Pages$Signup$emailString = function (_v0) {
	var str = _v0.a;
	return str;
};
var $author$project$Pages$Signup$minimumPasswordLength = 6;
var $author$project$Pages$Signup$nameString = function (_v0) {
	var str = _v0.a;
	return str;
};
var $author$project$Pages$Signup$passwordString = function (_v0) {
	var str = _v0.a;
	return str;
};
var $author$project$Pages$Signup$validateManagerForm = function (manager) {
	var managerProblems = $elm$core$List$concat(
		_List_fromArray(
			[
				$author$project$Utils$Validator$isValidEmail(
				$author$project$Pages$Signup$emailString(manager.email)) ? _List_Nil : _List_fromArray(
				[
					_Utils_Tuple2($author$project$Pages$Signup$InvalidEmail, 'There\'s something wrong with this email')
				]),
				$elm$core$String$isEmpty(
				$elm$core$String$trim(
					$author$project$Pages$Signup$nameString(manager.firstName))) ? _List_fromArray(
				[
					_Utils_Tuple2($author$project$Pages$Signup$EmptyFirstName, 'Required')
				]) : _List_Nil,
				$elm$core$String$isEmpty(
				$elm$core$String$trim(
					$author$project$Pages$Signup$nameString(manager.lastName))) ? _List_fromArray(
				[
					_Utils_Tuple2($author$project$Pages$Signup$EmptyLastName, 'Required')
				]) : _List_Nil,
				$elm$core$String$isEmpty(
				$author$project$Pages$Signup$passwordString(manager.password)) ? _List_fromArray(
				[
					_Utils_Tuple2($author$project$Pages$Signup$PasswordIsEmpty, 'A password is required')
				]) : ((_Utils_cmp(
				$elm$core$String$length(
					$author$project$Pages$Signup$passwordString(manager.password)),
				$author$project$Pages$Signup$minimumPasswordLength) < 0) ? _List_fromArray(
				[
					_Utils_Tuple2(
					$author$project$Pages$Signup$PasswordIsTooShort,
					'Your password must be at least ' + ($elm$core$String$fromInt($author$project$Pages$Signup$minimumPasswordLength) + ' characters long'))
				]) : _List_Nil)
			]));
	if (!managerProblems.b) {
		return $elm$core$Result$Ok(
			{
				email: $author$project$Pages$Signup$emailString(manager.email),
				name: $author$project$Pages$Signup$nameString(manager.firstName) + (' ' + $author$project$Pages$Signup$nameString(manager.lastName)),
				password: $author$project$Pages$Signup$passwordString(manager.password)
			});
	} else {
		var problems = managerProblems;
		return $elm$core$Result$Err(problems);
	}
};
var $author$project$Pages$Signup$EmptySchoolLocation = {$: 'EmptySchoolLocation'};
var $author$project$Pages$Signup$EmptySchoolName = {$: 'EmptySchoolName'};
var $author$project$Pages$Signup$validateSchoolForm = function (school) {
	var schoolProblems = $elm$core$List$concat(
		_List_fromArray(
			[
				_Utils_eq(
				school.schoolName,
				$author$project$Pages$Signup$Name('')) ? _List_fromArray(
				[
					_Utils_Tuple2($author$project$Pages$Signup$EmptySchoolName, 'Required')
				]) : _List_Nil,
				_Utils_eq(school.location, $elm$core$Maybe$Nothing) ? _List_fromArray(
				[
					_Utils_Tuple2($author$project$Pages$Signup$EmptySchoolLocation, 'Required')
				]) : _List_Nil
			]));
	var _v0 = _Utils_Tuple2(schoolProblems, school.location);
	if ((!_v0.a.b) && (_v0.b.$ === 'Just')) {
		var location = _v0.b.a;
		return $elm$core$Result$Ok(
			{
				schoolLocation: location,
				schoolName: $author$project$Pages$Signup$nameString(school.schoolName)
			});
	} else {
		var problems = _v0.a;
		return $elm$core$Result$Err(problems);
	}
};
var $author$project$Pages$Signup$validateForm = function (form) {
	var _v0 = _Utils_Tuple2(
		$author$project$Pages$Signup$validateManagerForm(form.manager),
		$author$project$Pages$Signup$validateSchoolForm(form.school));
	if (_v0.a.$ === 'Ok') {
		if (_v0.b.$ === 'Ok') {
			var manager = _v0.a.a;
			var school = _v0.b.a;
			return $elm$core$Result$Ok(
				A2($author$project$Pages$Signup$ValidForm, manager, school));
		} else {
			var problems = _v0.b.a;
			return $elm$core$Result$Err(problems);
		}
	} else {
		var problems = _v0.a.a;
		return $elm$core$Result$Err(problems);
	}
};
var $author$project$Pages$Signup$update = F2(
	function (msg, model) {
		var form = model.form;
		var manager = form.manager;
		var school = form.school;
		switch (msg.$) {
			case 'UpdatedFirstName':
				var name = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							form: _Utils_update(
								form,
								{
									manager: _Utils_update(
										manager,
										{firstName: name})
								})
						}),
					$elm$core$Platform$Cmd$none);
			case 'UpdatedLastName':
				var name = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							form: _Utils_update(
								form,
								{
									manager: _Utils_update(
										manager,
										{lastName: name})
								})
						}),
					$elm$core$Platform$Cmd$none);
			case 'UpdatedSchoolName':
				var name = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							form: _Utils_update(
								form,
								{
									school: _Utils_update(
										school,
										{schoolName: name})
								})
						}),
					$elm$core$Platform$Cmd$none);
			case 'UpdatedPassword':
				var password = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							form: _Utils_update(
								form,
								{
									manager: _Utils_update(
										manager,
										{password: password})
								})
						}),
					$elm$core$Platform$Cmd$none);
			case 'UpdatedEmail':
				var email = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							form: _Utils_update(
								form,
								{
									manager: _Utils_update(
										manager,
										{email: email})
								})
						}),
					$elm$core$Platform$Cmd$none);
			case 'RequestGeoLocation':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{loadingGeocode: true}),
					$author$project$Ports$requestGeoLocation(_Utils_Tuple0));
			case 'LocationSelected':
				var location = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							form: _Utils_update(
								form,
								{
									school: _Utils_update(
										school,
										{location: location})
								}),
							loadingGeocode: false
						}),
					$elm$core$Platform$Cmd$none);
			case 'ToSchoolForm':
				var _v1 = $author$project$Pages$Signup$validateManagerForm(form.manager);
				if (_v1.$ === 'Ok') {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								form: _Utils_update(
									form,
									{page: $author$project$Pages$Signup$SchoolDetails})
							}),
						$author$project$Ports$initializeMaps(true));
				} else {
					var problems = _v1.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								form: _Utils_update(
									form,
									{
										problems: $author$project$Errors$toClientSideErrors(problems)
									})
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 'ToManagerForm':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							form: _Utils_update(
								form,
								{page: $author$project$Pages$Signup$ManagerDetails})
						}),
					$elm$core$Platform$Cmd$none);
			case 'SubmittedForm':
				var _v2 = $author$project$Pages$Signup$validateForm(form);
				if (_v2.$ === 'Ok') {
					var validForm = _v2.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								form: _Utils_update(
									form,
									{problems: _List_Nil})
							}),
						A2($author$project$Pages$Signup$signup, model.session, validForm));
				} else {
					var problems = _v2.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								form: _Utils_update(
									form,
									{
										problems: $author$project$Errors$toClientSideErrors(problems)
									})
							}),
						$elm$core$Platform$Cmd$none);
				}
			default:
				var requestStatus = msg.a;
				var updatedModel = _Utils_update(
					model,
					{status: requestStatus});
				return A2($author$project$Pages$Signup$updateStatus, updatedModel, requestStatus);
		}
	});
var $author$project$Template$NavBar$internals = function (model) {
	var i = model.a;
	return i;
};
var $author$project$Template$NavBar$update = F2(
	function (msg, model) {
		var internalData = $author$project$Template$NavBar$internals(model);
		switch (msg.$) {
			case 'ToggleDropDown':
				return _Utils_Tuple2(
					$author$project$Template$NavBar$Model(
						_Utils_update(
							internalData,
							{dropdownVisible: !internalData.dropdownVisible})),
					$elm$core$Platform$Cmd$none);
			case 'HideDropDown':
				return _Utils_Tuple2(
					$author$project$Template$NavBar$Model(
						_Utils_update(
							internalData,
							{dropdownVisible: false})),
					$elm$core$Platform$Cmd$none);
			default:
				return _Utils_Tuple2(
					model,
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[$author$project$Api$logout])));
		}
	});
var $author$project$Main$updatePage = F2(
	function (page_msg, fullModel) {
		var modelMapper = function (pageModel) {
			return _Utils_update(
				fullModel,
				{page: pageModel});
		};
		var mapModelAndMsg = F3(
			function (pageModelMapper, pageMsgMapper, _v3) {
				var subModel = _v3.a;
				var subCmd = _v3.b;
				return A3(
					$author$project$Page$transformToModelMsg,
					A2($elm$core$Basics$composeR, pageModelMapper, modelMapper),
					pageMsgMapper,
					_Utils_Tuple2(subModel, subCmd));
			});
		var _v0 = _Utils_Tuple2(page_msg, fullModel.page);
		_v0$16:
		while (true) {
			switch (_v0.a.$) {
				case 'BusMoved':
					switch (_v0.b.$) {
						case 'BusesList':
							var model = _v0.b.a;
							return A3(
								mapModelAndMsg,
								$author$project$Main$BusesList,
								$author$project$Main$GotBusesListMsg,
								A2(
									$author$project$Pages$Buses$BusesPage$update,
									$author$project$Pages$Buses$BusesPage$locationUpdateMsg(fullModel.locationUpdates),
									model));
						case 'BusDetailsPage':
							var model = _v0.b.a;
							var _v1 = A2($elm$core$Dict$get, model.busID, fullModel.locationUpdates);
							if (_v1.$ === 'Just') {
								var locationUpdate = _v1.a;
								return A3(
									mapModelAndMsg,
									$author$project$Main$BusDetailsPage,
									$author$project$Main$GotBusDetailsPageMsg,
									A2(
										$author$project$Pages$Buses$BusPage$update,
										$author$project$Pages$Buses$BusPage$locationUpdateMsg(locationUpdate),
										model));
							} else {
								return _Utils_Tuple2(fullModel, $elm$core$Platform$Cmd$none);
							}
						default:
							break _v0$16;
					}
				case 'GotNavBarMsg':
					var msg = _v0.a.a;
					var _v2 = A2($author$project$Template$NavBar$update, msg, fullModel.navState);
					var newNavState = _v2.a;
					var navMsg = _v2.b;
					return _Utils_Tuple2(
						_Utils_update(
							fullModel,
							{navState: newNavState}),
						$elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[
									A2($elm$core$Platform$Cmd$map, $author$project$Main$GotNavBarMsg, navMsg),
									$author$project$Template$NavBar$isVisible(fullModel.navState) ? A2($elm$core$Platform$Cmd$map, $author$project$Main$GotNavBarMsg, $author$project$Template$NavBar$hideNavBarMsg) : $elm$core$Platform$Cmd$none
								])));
				case 'GotHouseholdListMsg':
					if (_v0.b.$ === 'HouseholdList') {
						var msg = _v0.a.a;
						var model = _v0.b.a;
						return A3(
							mapModelAndMsg,
							$author$project$Main$HouseholdList,
							$author$project$Main$GotHouseholdListMsg,
							A2($author$project$Pages$Households$HouseholdsPage$update, msg, model));
					} else {
						break _v0$16;
					}
				case 'GotBusesListMsg':
					if (_v0.b.$ === 'BusesList') {
						var msg = _v0.a.a;
						var model = _v0.b.a;
						return A3(
							mapModelAndMsg,
							$author$project$Main$BusesList,
							$author$project$Main$GotBusesListMsg,
							A2($author$project$Pages$Buses$BusesPage$update, msg, model));
					} else {
						break _v0$16;
					}
				case 'GotBusRegistrationMsg':
					if (_v0.b.$ === 'BusRegistration') {
						var msg = _v0.a.a;
						var model = _v0.b.a;
						return A3(
							mapModelAndMsg,
							$author$project$Main$BusRegistration,
							$author$project$Main$GotBusRegistrationMsg,
							A2($author$project$Pages$Buses$CreateBusPage$update, msg, model));
					} else {
						break _v0$16;
					}
				case 'GotBusDetailsPageMsg':
					if (_v0.b.$ === 'BusDetailsPage') {
						var msg = _v0.a.a;
						var model = _v0.b.a;
						return A3(
							mapModelAndMsg,
							$author$project$Main$BusDetailsPage,
							$author$project$Main$GotBusDetailsPageMsg,
							A2($author$project$Pages$Buses$BusPage$update, msg, model));
					} else {
						break _v0$16;
					}
				case 'GotCreateBusRepairMsg':
					if (_v0.b.$ === 'CreateBusRepair') {
						var msg = _v0.a.a;
						var model = _v0.b.a;
						return A3(
							mapModelAndMsg,
							$author$project$Main$CreateBusRepair,
							$author$project$Main$GotCreateBusRepairMsg,
							A2($author$project$Pages$Buses$CreateBusRepairPage$update, msg, model));
					} else {
						break _v0$16;
					}
				case 'GotStudentRegistrationMsg':
					if (_v0.b.$ === 'StudentRegistration') {
						var msg = _v0.a.a;
						var model = _v0.b.a;
						return A3(
							mapModelAndMsg,
							$author$project$Main$StudentRegistration,
							$author$project$Main$GotStudentRegistrationMsg,
							A2($author$project$Pages$Households$HouseholdRegistrationPage$update, msg, model));
					} else {
						break _v0$16;
					}
				case 'GotDevicesListMsg':
					if (_v0.b.$ === 'DevicesList') {
						var msg = _v0.a.a;
						var model = _v0.b.a;
						return A3(
							mapModelAndMsg,
							$author$project$Main$DevicesList,
							$author$project$Main$GotDevicesListMsg,
							A2($author$project$Pages$Devices$DevicesPage$update, msg, model));
					} else {
						break _v0$16;
					}
				case 'GotLoginMsg':
					if (_v0.b.$ === 'Login') {
						var msg = _v0.a.a;
						var model = _v0.b.a;
						return A3(
							mapModelAndMsg,
							$author$project$Main$Login,
							$author$project$Main$GotLoginMsg,
							A2($author$project$Pages$Login$update, msg, model));
					} else {
						break _v0$16;
					}
				case 'GotSignupMsg':
					if (_v0.b.$ === 'Signup') {
						var msg = _v0.a.a;
						var model = _v0.b.a;
						return A3(
							mapModelAndMsg,
							$author$project$Main$Signup,
							$author$project$Main$GotSignupMsg,
							A2($author$project$Pages$Signup$update, msg, model));
					} else {
						break _v0$16;
					}
				case 'GotDeviceRegistrationMsg':
					if (_v0.b.$ === 'DeviceRegistration') {
						var msg = _v0.a.a;
						var model = _v0.b.a;
						return A3(
							mapModelAndMsg,
							$author$project$Main$DeviceRegistration,
							$author$project$Main$GotDeviceRegistrationMsg,
							A2($author$project$Pages$Devices$DeviceRegistrationPage$update, msg, model));
					} else {
						break _v0$16;
					}
				case 'GotRoutesListMsg':
					if (_v0.b.$ === 'RoutesList') {
						var msg = _v0.a.a;
						var model = _v0.b.a;
						return A3(
							mapModelAndMsg,
							$author$project$Main$RoutesList,
							$author$project$Main$GotRoutesListMsg,
							A2($author$project$Pages$Routes$Routes$update, msg, model));
					} else {
						break _v0$16;
					}
				case 'GotCrewMembersMsg':
					if (_v0.b.$ === 'CrewMembers') {
						var msg = _v0.a.a;
						var model = _v0.b.a;
						return A3(
							mapModelAndMsg,
							$author$project$Main$CrewMembers,
							$author$project$Main$GotCrewMembersMsg,
							A2($author$project$Pages$Crew$CrewMembersPage$update, msg, model));
					} else {
						break _v0$16;
					}
				case 'GotCrewMemberRegistrationMsg':
					if (_v0.b.$ === 'CrewMemberRegistration') {
						var msg = _v0.a.a;
						var model = _v0.b.a;
						return A3(
							mapModelAndMsg,
							$author$project$Main$CrewMemberRegistration,
							$author$project$Main$GotCrewMemberRegistrationMsg,
							A2($author$project$Pages$Crew$CrewMemberRegistrationPage$update, msg, model));
					} else {
						break _v0$16;
					}
				default:
					break _v0$16;
			}
		}
		return _Utils_Tuple2(fullModel, $elm$core$Platform$Cmd$none);
	});
var $author$project$Session$withTimeZone = F2(
	function (session, newTimeZone) {
		if (session.$ === 'LoggedIn') {
			var key = session.a;
			var credentials = session.c;
			return A3($author$project$Session$LoggedIn, key, newTimeZone, credentials);
		} else {
			var key = session.a;
			return A2($author$project$Session$Guest, key, newTimeZone);
		}
	});
var $author$project$Main$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'WindowResized':
				var height = msg.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{windowHeight: height}),
					$elm$core$Platform$Cmd$none);
			case 'UpdatedTimeZone':
				var timezone = msg.a;
				var session = A2(
					$author$project$Session$withTimeZone,
					$author$project$Main$toSession(model.page),
					timezone);
				return _Utils_eq(
					$author$project$Session$getCredentials(session),
					$elm$core$Maybe$Nothing) ? A3(
					$author$project$Main$changeRouteWithUpdatedSessionTo,
					$elm$core$Maybe$Just(
						$author$project$Navigation$Login($elm$core$Maybe$Nothing)),
					model,
					session) : A3(
					$author$project$Main$changeRouteWithUpdatedSessionTo,
					A2($author$project$Navigation$fromUrl, model.url, session),
					model,
					session);
			case 'UrlRequested':
				var urlRequest = msg.a;
				if (urlRequest.$ === 'Internal') {
					var url = urlRequest.a;
					var _v2 = url.fragment;
					if (_v2.$ === 'Nothing') {
						return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
					} else {
						return _Utils_Tuple2(
							model,
							A2(
								$elm$browser$Browser$Navigation$pushUrl,
								$author$project$Session$navKey(
									$author$project$Main$toSession(model.page)),
								$elm$url$Url$toString(url)));
					}
				} else {
					var href = urlRequest.a;
					return _Utils_Tuple2(
						model,
						$elm$browser$Browser$Navigation$load(href));
				}
			case 'UrlChanged':
				var url = msg.a;
				var isSamePage = A2($author$project$Navigation$isSamePage, model.url, url);
				return (!isSamePage) ? A2(
					$author$project$Main$changeRouteTo,
					A2(
						$author$project$Navigation$fromUrl,
						url,
						$author$project$Main$toSession(model.page)),
					_Utils_update(
						model,
						{url: url})) : _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'ReceivedCreds':
				var cred = msg.a;
				var session = A2(
					$author$project$Session$withCredentials,
					$author$project$Main$toSession(model.page),
					cred);
				return _Utils_eq(cred, $elm$core$Maybe$Nothing) ? A3(
					$author$project$Main$changeRouteWithUpdatedSessionTo,
					$elm$core$Maybe$Just(
						$author$project$Navigation$Login($elm$core$Maybe$Nothing)),
					model,
					session) : A3(
					$author$project$Main$changeRouteWithUpdatedSessionTo,
					A2($author$project$Navigation$fromUrl, model.url, session),
					model,
					session);
			case 'BusMoved':
				var locUpdate = msg.a;
				var newModel = _Utils_update(
					model,
					{
						locationUpdates: A3($elm$core$Dict$insert, locUpdate.bus, locUpdate, model.locationUpdates)
					});
				return A2($author$project$Main$updatePage, msg, newModel);
			default:
				return A2($author$project$Main$updatePage, msg, model);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$FocusStyleOption = function (a) {
	return {$: 'FocusStyleOption', a: a};
};
var $mdgriffith$elm_ui$Element$focusStyle = $mdgriffith$elm_ui$Internal$Model$FocusStyleOption;
var $author$project$Navigation$Home = {$: 'Home'};
var $author$project$Navigation$isPublicRoute = function (route) {
	if (route.$ === 'Nothing') {
		return false;
	} else {
		var aRoute = route.a;
		return A2(
			$elm$core$List$member,
			aRoute,
			_List_fromArray(
				[$author$project$Navigation$Home]));
	}
};
var $mdgriffith$elm_ui$Element$map = $mdgriffith$elm_ui$Internal$Model$map;
var $author$project$Template$TabBar$highlightColor = $author$project$Colors$teal;
var $author$project$Template$TabBar$Buses = {$: 'Buses'};
var $author$project$Template$TabBar$CrewMembers = {$: 'CrewMembers'};
var $author$project$Template$TabBar$HouseholdList = {$: 'HouseholdList'};
var $author$project$Template$TabBar$Routes = {$: 'Routes'};
var $author$project$Template$TabBar$toNavigationPage = function (route) {
	switch (route.$) {
		case 'Buses':
			return $author$project$Template$TabBar$Buses;
		case 'Bus':
			return $author$project$Template$TabBar$Buses;
		case 'BusRegistration':
			return $author$project$Template$TabBar$Buses;
		case 'BusDeviceRegistration':
			return $author$project$Template$TabBar$Buses;
		case 'CreateBusRepair':
			return $author$project$Template$TabBar$Buses;
		case 'HouseholdList':
			return $author$project$Template$TabBar$HouseholdList;
		case 'StudentRegistration':
			return $author$project$Template$TabBar$HouseholdList;
		case 'Home':
			return $author$project$Template$TabBar$Buses;
		case 'Login':
			return $author$project$Template$TabBar$Buses;
		case 'Logout':
			return $author$project$Template$TabBar$Buses;
		case 'Signup':
			return $author$project$Template$TabBar$Buses;
		case 'DeviceRegistration':
			return $author$project$Template$TabBar$Buses;
		case 'DeviceList':
			return $author$project$Template$TabBar$Buses;
		case 'Routes':
			return $author$project$Template$TabBar$Routes;
		case 'CrewMembers':
			return $author$project$Template$TabBar$CrewMembers;
		case 'CrewMemberRegistration':
			return $author$project$Template$TabBar$CrewMembers;
		default:
			return $author$project$Template$TabBar$CrewMembers;
	}
};
var $author$project$Template$TabBar$colorFor = F2(
	function (navPage1, route) {
		if (route.$ === 'Nothing') {
			return A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0);
		} else {
			var aRoute = route.a;
			return _Utils_eq(
				navPage1,
				$author$project$Template$TabBar$toNavigationPage(aRoute)) ? $author$project$Template$TabBar$highlightColor : A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Navigation = {$: 'Navigation'};
var $mdgriffith$elm_ui$Element$Region$navigation = $mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Navigation);
var $mdgriffith$elm_ui$Element$spaceEvenly = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$spacing, $mdgriffith$elm_ui$Internal$Style$classes.spaceEvenly);
var $author$project$Template$TabBar$TabItem = F3(
	function (title, icon, navPage) {
		return {icon: icon, navPage: navPage, title: title};
	});
var $author$project$Icons$people = $author$project$Icons$iconNamed('images/people.svg');
var $author$project$Icons$pin = $author$project$Icons$iconNamed('images/pin.svg');
var $author$project$Icons$seat = $author$project$Icons$iconNamed('images/seat.svg');
var $author$project$Template$TabBar$tabSections = _List_fromArray(
	[
		A3($author$project$Template$TabBar$TabItem, 'Fleet', $author$project$Icons$vehicle, $author$project$Template$TabBar$Buses),
		A3($author$project$Template$TabBar$TabItem, 'Students', $author$project$Icons$seat, $author$project$Template$TabBar$HouseholdList),
		A3($author$project$Template$TabBar$TabItem, 'Crew', $author$project$Icons$people, $author$project$Template$TabBar$CrewMembers),
		A3($author$project$Template$TabBar$TabItem, 'Routes', $author$project$Icons$pin, $author$project$Template$TabBar$Routes)
	]);
var $mdgriffith$elm_ui$Element$fromRgb = function (clr) {
	return A4($mdgriffith$elm_ui$Internal$Model$Rgba, clr.red, clr.green, clr.blue, clr.alpha);
};
var $author$project$Template$TabBar$hoverColor = function () {
	var color = $mdgriffith$elm_ui$Element$toRgb($author$project$Template$TabBar$highlightColor);
	return $mdgriffith$elm_ui$Element$fromRgb(
		_Utils_update(
			color,
			{alpha: 0.9}));
}();
var $author$project$Navigation$href = function (targetRoute) {
	return $author$project$Navigation$routeToString(targetRoute);
};
var $elm$html$Html$Attributes$rel = _VirtualDom_attribute('rel');
var $mdgriffith$elm_ui$Element$link = F2(
	function (attrs, _v0) {
		var url = _v0.url;
		var label = _v0.label;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$NodeName('a'),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Attr(
					$elm$html$Html$Attributes$href(url)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$Attr(
						$elm$html$Html$Attributes$rel('noopener noreferrer')),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.link)))),
								attrs))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $author$project$Template$TabBar$sideBarSubSectionStyle = _Utils_ap(
	$author$project$Style$labelStyle,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Font$size(17)
		]));
var $author$project$Template$TabBar$toRoute = function (navPage) {
	switch (navPage.$) {
		case 'Buses':
			return $author$project$Navigation$Buses;
		case 'HouseholdList':
			return $author$project$Navigation$HouseholdList;
		case 'CrewMembers':
			return $author$project$Navigation$CrewMembers;
		default:
			return $author$project$Navigation$Routes;
	}
};
var $author$project$Template$TabBar$viewTabItem = F2(
	function (item, backgroundColor) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color(backgroundColor),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(3))
						]),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$link,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$paddingEach(
							_Utils_update(
								$author$project$Style$edges,
								{bottom: 4, left: 24, right: 16, top: 4})),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$below(
							A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Background$color($author$project$Template$TabBar$hoverColor),
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
									]),
								$mdgriffith$elm_ui$Element$none))
						]),
					{
						label: A2(
							$mdgriffith$elm_ui$Element$row,
							A2(
								$elm$core$List$cons,
								A2($mdgriffith$elm_ui$Element$paddingXY, 0, 4),
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Element$centerX,
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Element$spacing(12),
										A2(
											$elm$core$List$cons,
											$mdgriffith$elm_ui$Element$Font$size(18),
											$author$project$Template$TabBar$sideBarSubSectionStyle)))),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$height(
											$mdgriffith$elm_ui$Element$px(32)),
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(32))
										]),
									item.icon(
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]))),
									$mdgriffith$elm_ui$Element$text(item.title)
								])),
						url: $author$project$Navigation$href(
							$author$project$Template$TabBar$toRoute(item.navPage))
					})
				]));
	});
var $author$project$Template$TabBar$view = function (currentRoute) {
	var viewSidebarSection = function (item) {
		return A2(
			$author$project$Template$TabBar$viewTabItem,
			item,
			A2($author$project$Template$TabBar$colorFor, item.navPage, currentRoute));
	};
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(10),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px($author$project$Template$TabBar$maxHeight)),
				$mdgriffith$elm_ui$Element$Border$shadow(
				{
					blur: 0,
					color: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.24),
					offset: _Utils_Tuple2(0, 0),
					size: 1
				})
			]),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Element$el, _List_Nil, $mdgriffith$elm_ui$Element$none),
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spaceEvenly,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$alignTop,
						$mdgriffith$elm_ui$Element$Region$navigation
					]),
				A2($elm$core$List$map, viewSidebarSection, $author$project$Template$TabBar$tabSections)),
				A2($mdgriffith$elm_ui$Element$el, _List_Nil, $mdgriffith$elm_ui$Element$none)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$Left = {$: 'Left'};
var $mdgriffith$elm_ui$Element$alignLeft = $mdgriffith$elm_ui$Internal$Model$AlignX($mdgriffith$elm_ui$Internal$Model$Left);
var $author$project$Template$NavBar$viewBusesLogo = function () {
	var logo = A2(
		$mdgriffith$elm_ui$Element$image,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$alignLeft,
				A2($mdgriffith$elm_ui$Element$paddingXY, 24, 0),
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px(28)),
				$mdgriffith$elm_ui$Element$centerY
			]),
		{description: 'Flotilla Logo', src: 'images/logo.png'});
	return A2(
		$mdgriffith$elm_ui$Element$link,
		_List_Nil,
		{
			label: logo,
			url: $author$project$Navigation$href($author$project$Navigation$Home)
		});
}();
var $author$project$Style$classAttr = function (_class) {
	return $mdgriffith$elm_ui$Element$htmlAttribute(
		$elm$html$Html$Attributes$class(_class));
};
var $author$project$Style$mobileHidden = $author$project$Style$classAttr('mobileHidden');
var $author$project$Template$NavBar$viewFlotillaLogo = A2(
	$mdgriffith$elm_ui$Element$image,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$height(
			$mdgriffith$elm_ui$Element$px(30)),
			$mdgriffith$elm_ui$Element$centerX,
			$mdgriffith$elm_ui$Element$centerY,
			$author$project$Style$mobileHidden
		]),
	{description: 'Flotilla Name', src: 'images/logo-name.png'});
var $mdgriffith$elm_ui$Internal$Model$Right = {$: 'Right'};
var $mdgriffith$elm_ui$Element$alignRight = $mdgriffith$elm_ui$Internal$Model$AlignX($mdgriffith$elm_ui$Internal$Model$Right);
var $author$project$Colors$darkText = A3($mdgriffith$elm_ui$Element$rgb255, 4, 31, 38);
var $mdgriffith$elm_ui$Internal$Model$Hover = {$: 'Hover'};
var $mdgriffith$elm_ui$Internal$Flag$hover = $mdgriffith$elm_ui$Internal$Flag$flag(33);
var $mdgriffith$elm_ui$Element$mouseOver = function (decs) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$hover,
		A2(
			$mdgriffith$elm_ui$Internal$Model$PseudoSelector,
			$mdgriffith$elm_ui$Internal$Model$Hover,
			$mdgriffith$elm_ui$Internal$Model$unwrapDecorations(decs)));
};
var $author$project$Colors$purple = A3($mdgriffith$elm_ui$Element$rgb255, 89, 79, 238);
var $author$project$StyledElement$navigationLink = F2(
	function (attrs, config) {
		return A2(
			$mdgriffith$elm_ui$Element$link,
			_Utils_ap(
				$author$project$Style$defaultFontFace,
				_Utils_ap(
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Element$paddingXY, 27, 10),
							$mdgriffith$elm_ui$Element$Font$size(19),
							$mdgriffith$elm_ui$Element$Font$color($author$project$Colors$purple),
							$mdgriffith$elm_ui$Element$mouseOver(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$alpha(0.9)
								]))
						]),
					_Utils_ap($author$project$Style$defaultFontFace, attrs))),
			{
				label: config.label,
				url: $author$project$Navigation$href(config.route)
			});
	});
var $author$project$Template$NavBar$viewLoginOptions = function (route) {
	var ghostAttrs = _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Background$color(
			A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0)),
			$mdgriffith$elm_ui$Element$Font$color($author$project$Colors$darkText)
		]);
	var login = A2(
		$author$project$StyledElement$navigationLink,
		_Utils_eq(
			route,
			$elm$core$Maybe$Just($author$project$Navigation$Signup)) ? ghostAttrs : _List_Nil,
		{
			label: $mdgriffith$elm_ui$Element$text('Login'),
			route: $author$project$Navigation$Login($elm$core$Maybe$Nothing)
		});
	var signUp = A2(
		$author$project$StyledElement$navigationLink,
		ghostAttrs,
		{
			label: $mdgriffith$elm_ui$Element$text('Sign up'),
			route: $author$project$Navigation$Signup
		});
	var loginOptions = function () {
		_v0$2:
		while (true) {
			if (route.$ === 'Just') {
				switch (route.a.$) {
					case 'Login':
						return _List_fromArray(
							[signUp]);
					case 'Signup':
						var _v1 = route.a;
						return _List_fromArray(
							[login]);
					default:
						break _v0$2;
				}
			} else {
				break _v0$2;
			}
		}
		return _List_fromArray(
			[signUp, login]);
	}();
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$alignRight,
				A2($mdgriffith$elm_ui$Element$paddingXY, 24, 0),
				$mdgriffith$elm_ui$Element$spacing(10)
			]),
		loginOptions);
};
var $author$project$Template$NavBar$viewGuestHeader = function (route) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Region$navigation,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$Background$color(
				A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px(70)),
				$mdgriffith$elm_ui$Element$Border$shadow(
				{
					blur: 2,
					color: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.14),
					offset: _Utils_Tuple2(0, 0),
					size: 0
				}),
				$mdgriffith$elm_ui$Element$inFront($author$project$Template$NavBar$viewFlotillaLogo),
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px(71))
			]),
		_List_fromArray(
			[
				$author$project$Template$NavBar$viewBusesLogo,
				$author$project$Template$NavBar$viewLoginOptions(route)
			]));
};
var $author$project$Template$NavBar$Logout = {$: 'Logout'};
var $author$project$Template$NavBar$ToggleDropDown = {$: 'ToggleDropDown'};
var $mdgriffith$elm_ui$Internal$Model$Button = {$: 'Button'};
var $elm$html$Html$Attributes$disabled = $elm$html$Html$Attributes$boolProperty('disabled');
var $mdgriffith$elm_ui$Element$Input$focusDefault = function (attrs) {
	return A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, attrs) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass('focusable');
};
var $mdgriffith$elm_ui$Element$Input$enter = 'Enter';
var $elm$virtual_dom$VirtualDom$MayPreventDefault = function (a) {
	return {$: 'MayPreventDefault', a: a};
};
var $elm$html$Html$Events$preventDefaultOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayPreventDefault(decoder));
	});
var $mdgriffith$elm_ui$Element$Input$onKey = F2(
	function (desiredCode, msg) {
		var decode = function (code) {
			return _Utils_eq(code, desiredCode) ? $elm$json$Json$Decode$succeed(msg) : $elm$json$Json$Decode$fail('Not the enter key');
		};
		var isKey = A2(
			$elm$json$Json$Decode$andThen,
			decode,
			A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string));
		return $mdgriffith$elm_ui$Internal$Model$Attr(
			A2(
				$elm$html$Html$Events$preventDefaultOn,
				'keyup',
				A2(
					$elm$json$Json$Decode$map,
					function (fired) {
						return _Utils_Tuple2(fired, true);
					},
					isKey)));
	});
var $mdgriffith$elm_ui$Element$Input$onEnter = function (msg) {
	return A2($mdgriffith$elm_ui$Element$Input$onKey, $mdgriffith$elm_ui$Element$Input$enter, msg);
};
var $mdgriffith$elm_ui$Element$pointer = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$cursor, $mdgriffith$elm_ui$Internal$Style$classes.cursorPointer);
var $mdgriffith$elm_ui$Element$Input$button = F2(
	function (attrs, _v0) {
		var onPress = _v0.onPress;
		var label = _v0.label;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.seButton + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.noTextSelection)))))),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$pointer,
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$Input$focusDefault(attrs),
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Button),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Internal$Model$Attr(
											$elm$html$Html$Attributes$tabindex(0)),
										function () {
											if (onPress.$ === 'Nothing') {
												return A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Internal$Model$Attr(
														$elm$html$Html$Attributes$disabled(true)),
													attrs);
											} else {
												var msg = onPress.a;
												return A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Element$Events$onClick(msg),
													A2(
														$elm$core$List$cons,
														$mdgriffith$elm_ui$Element$Input$onEnter(msg),
														attrs));
											}
										}()))))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $author$project$Style$animatesAll = $author$project$Style$classAttr('animatesAll');
var $author$project$Colors$white = A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1);
var $author$project$Template$NavBar$dropdownOption = F2(
	function (optionText, action) {
		var alphaValue = 1;
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$white),
					$mdgriffith$elm_ui$Element$alignRight,
					A2($mdgriffith$elm_ui$Element$paddingXY, 10, 10),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Border$shadow(
					{
						blur: 2,
						color: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.24),
						offset: _Utils_Tuple2(0, 0),
						size: 0
					}),
					$author$project$Style$animatesAll,
					$mdgriffith$elm_ui$Element$alpha(alphaValue)
				]),
			{
				label: A2(
					$mdgriffith$elm_ui$Element$el,
					_Utils_ap(_List_Nil, $author$project$Style$captionLabelStyle),
					$mdgriffith$elm_ui$Element$text(optionText)),
				onPress: action
			});
	});
var $author$project$Template$NavBar$viewHeaderProfileData = F2(
	function (model, cred) {
		var dropdownVisible = function ($) {
			return $.dropdownVisible;
		}(
			$author$project$Template$NavBar$internals(model));
		var elementBelow = dropdownVisible ? A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$moveUp(8),
					$mdgriffith$elm_ui$Element$Border$shadow(
					{
						blur: 5,
						color: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.14),
						offset: _Utils_Tuple2(0, 0),
						size: 0
					})
				]),
			_List_fromArray(
				[
					A2(
					$author$project$Template$NavBar$dropdownOption,
					'Logout',
					$elm$core$Maybe$Just($author$project$Template$NavBar$Logout))
				])) : $mdgriffith$elm_ui$Element$none;
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignRight,
					$mdgriffith$elm_ui$Element$below(elementBelow)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_Utils_ap(
						$author$project$Style$labelStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$color(
								A3($mdgriffith$elm_ui$Element$rgb255, 104, 104, 104))
							])),
					$mdgriffith$elm_ui$Element$text(cred.name)),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(48)),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(48))
						]),
					{
						label: $author$project$Icons$chevronDown(
							dropdownVisible ? _List_fromArray(
								[
									$mdgriffith$elm_ui$Element$rotate($elm$core$Basics$pi)
								]) : _List_Nil),
						onPress: $elm$core$Maybe$Just($author$project$Template$NavBar$ToggleDropDown)
					})
				]));
	});
var $author$project$Template$NavBar$viewLoggedInHeader = F2(
	function (model, creds) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Region$navigation,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Background$color(
					A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px($author$project$Template$NavBar$maxHeight)),
					$mdgriffith$elm_ui$Element$Border$shadow(
					{
						blur: 2,
						color: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.14),
						offset: _Utils_Tuple2(0, 0),
						size: 0
					}),
					$mdgriffith$elm_ui$Element$spacing(8),
					$mdgriffith$elm_ui$Element$inFront($author$project$Template$NavBar$viewFlotillaLogo)
				]),
			_List_fromArray(
				[
					$author$project$Template$NavBar$viewBusesLogo,
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(24))
						]),
					$mdgriffith$elm_ui$Element$none),
					A2($author$project$Template$NavBar$viewHeaderProfileData, model, creds),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(1))
						]),
					$mdgriffith$elm_ui$Element$none)
				]));
	});
var $author$project$Template$NavBar$viewHeader = F3(
	function (model, session, route) {
		var _v0 = $author$project$Session$getCredentials(session);
		if (_v0.$ === 'Nothing') {
			return $author$project$Template$NavBar$viewGuestHeader(route);
		} else {
			var cred = _v0.a;
			return A2($author$project$Template$NavBar$viewLoggedInHeader, model, cred);
		}
	});
var $author$project$Page$frame = F7(
	function (route, body, session, toMsg, navState, headerToMsg, pageHeight) {
		var renderedHeader = A2(
			$mdgriffith$elm_ui$Element$map,
			headerToMsg,
			A3($author$project$Template$NavBar$viewHeader, navState, session, route));
		var renderedBody = A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(
						$author$project$Page$viewHeight(pageHeight))),
					$mdgriffith$elm_ui$Element$alignTop,
					$mdgriffith$elm_ui$Element$scrollbarY
				]),
			A2($mdgriffith$elm_ui$Element$map, toMsg, body));
		var bottomBar = (_Utils_eq(
			$author$project$Session$getCredentials(session),
			$elm$core$Maybe$Nothing) || $author$project$Navigation$isPublicRoute(route)) ? $mdgriffith$elm_ui$Element$none : $author$project$Template$TabBar$view(route);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[renderedHeader, renderedBody, bottomBar]));
	});
var $mdgriffith$elm_ui$Internal$Model$OnlyDynamic = F2(
	function (a, b) {
		return {$: 'OnlyDynamic', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic = F2(
	function (a, b) {
		return {$: 'StaticRootAndDynamic', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$AllowHover = {$: 'AllowHover'};
var $mdgriffith$elm_ui$Internal$Model$Layout = {$: 'Layout'};
var $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle = {
	backgroundColor: $elm$core$Maybe$Nothing,
	borderColor: $elm$core$Maybe$Nothing,
	shadow: $elm$core$Maybe$Just(
		{
			blur: 0,
			color: A4($mdgriffith$elm_ui$Internal$Model$Rgba, 155 / 255, 203 / 255, 1, 1),
			offset: _Utils_Tuple2(0, 0),
			size: 3
		})
};
var $mdgriffith$elm_ui$Internal$Model$optionsToRecord = function (options) {
	var combine = F2(
		function (opt, record) {
			switch (opt.$) {
				case 'HoverOption':
					var hoverable = opt.a;
					var _v4 = record.hover;
					if (_v4.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								hover: $elm$core$Maybe$Just(hoverable)
							});
					} else {
						return record;
					}
				case 'FocusStyleOption':
					var focusStyle = opt.a;
					var _v5 = record.focus;
					if (_v5.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								focus: $elm$core$Maybe$Just(focusStyle)
							});
					} else {
						return record;
					}
				default:
					var renderMode = opt.a;
					var _v6 = record.mode;
					if (_v6.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								mode: $elm$core$Maybe$Just(renderMode)
							});
					} else {
						return record;
					}
			}
		});
	var andFinally = function (record) {
		return {
			focus: function () {
				var _v0 = record.focus;
				if (_v0.$ === 'Nothing') {
					return $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle;
				} else {
					var focusable = _v0.a;
					return focusable;
				}
			}(),
			hover: function () {
				var _v1 = record.hover;
				if (_v1.$ === 'Nothing') {
					return $mdgriffith$elm_ui$Internal$Model$AllowHover;
				} else {
					var hoverable = _v1.a;
					return hoverable;
				}
			}(),
			mode: function () {
				var _v2 = record.mode;
				if (_v2.$ === 'Nothing') {
					return $mdgriffith$elm_ui$Internal$Model$Layout;
				} else {
					var actualMode = _v2.a;
					return actualMode;
				}
			}()
		};
	};
	return andFinally(
		A3(
			$elm$core$List$foldr,
			combine,
			{focus: $elm$core$Maybe$Nothing, hover: $elm$core$Maybe$Nothing, mode: $elm$core$Maybe$Nothing},
			options));
};
var $mdgriffith$elm_ui$Internal$Model$toHtml = F2(
	function (mode, el) {
		switch (el.$) {
			case 'Unstyled':
				var html = el.a;
				return html($mdgriffith$elm_ui$Internal$Model$asEl);
			case 'Styled':
				var styles = el.a.styles;
				var html = el.a.html;
				return A2(
					html,
					mode(styles),
					$mdgriffith$elm_ui$Internal$Model$asEl);
			case 'Text':
				var text = el.a;
				return $mdgriffith$elm_ui$Internal$Model$textElement(text);
			default:
				return $mdgriffith$elm_ui$Internal$Model$textElement('');
		}
	});
var $mdgriffith$elm_ui$Internal$Model$renderRoot = F3(
	function (optionList, attributes, child) {
		var options = $mdgriffith$elm_ui$Internal$Model$optionsToRecord(optionList);
		var embedStyle = function () {
			var _v0 = options.mode;
			if (_v0.$ === 'NoStaticStyleSheet') {
				return $mdgriffith$elm_ui$Internal$Model$OnlyDynamic(options);
			} else {
				return $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic(options);
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Internal$Model$toHtml,
			embedStyle,
			A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				attributes,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[child]))));
	});
var $mdgriffith$elm_ui$Internal$Model$rootStyle = function () {
	var families = _List_fromArray(
		[
			$mdgriffith$elm_ui$Internal$Model$Typeface('Open Sans'),
			$mdgriffith$elm_ui$Internal$Model$Typeface('Helvetica'),
			$mdgriffith$elm_ui$Internal$Model$Typeface('Verdana'),
			$mdgriffith$elm_ui$Internal$Model$SansSerif
		]);
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$bgColor,
			A3(
				$mdgriffith$elm_ui$Internal$Model$Colored,
				'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0)),
				'background-color',
				A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontColor,
			A3(
				$mdgriffith$elm_ui$Internal$Model$Colored,
				'fc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1)),
				'color',
				A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontSize,
			$mdgriffith$elm_ui$Internal$Model$FontSize(20)),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontFamily,
			A2(
				$mdgriffith$elm_ui$Internal$Model$FontFamily,
				A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderFontClassName, 'font-', families),
				families))
		]);
}();
var $mdgriffith$elm_ui$Element$layoutWith = F3(
	function (_v0, attrs, child) {
		var options = _v0.options;
		return A3(
			$mdgriffith$elm_ui$Internal$Model$renderRoot,
			options,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass(
					A2(
						$elm$core$String$join,
						' ',
						_List_fromArray(
							[$mdgriffith$elm_ui$Internal$Style$classes.root, $mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single]))),
				_Utils_ap($mdgriffith$elm_ui$Internal$Model$rootStyle, attrs)),
			child);
	});
var $author$project$Pages$Blank$view = A2($mdgriffith$elm_ui$Element$el, _List_Nil, $mdgriffith$elm_ui$Element$none);
var $mdgriffith$elm_ui$Internal$Model$Bottom = {$: 'Bottom'};
var $mdgriffith$elm_ui$Element$alignBottom = $mdgriffith$elm_ui$Internal$Model$AlignY($mdgriffith$elm_ui$Internal$Model$Bottom);
var $author$project$Colors$darkness = A3($mdgriffith$elm_ui$Element$rgb255, 51, 63, 78);
var $author$project$Colors$black = A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0);
var $mdgriffith$elm_ui$Internal$Flag$fontWeight = $mdgriffith$elm_ui$Internal$Flag$flag(13);
var $mdgriffith$elm_ui$Element$Font$bold = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontWeight, $mdgriffith$elm_ui$Internal$Style$classes.bold);
var $mdgriffith$elm_ui$Internal$Model$Heading = function (a) {
	return {$: 'Heading', a: a};
};
var $mdgriffith$elm_ui$Element$Region$heading = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Describe, $mdgriffith$elm_ui$Internal$Model$Heading);
var $author$project$Style$header2Style = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$Region$heading(2),
		$mdgriffith$elm_ui$Element$Font$size(24),
		$mdgriffith$elm_ui$Element$Font$color(
		A3($mdgriffith$elm_ui$Element$rgb255, 51, 63, 78)),
		$mdgriffith$elm_ui$Element$Font$family(
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$typeface('SF Pro Display'),
				$mdgriffith$elm_ui$Element$Font$sansSerif
			])),
		$mdgriffith$elm_ui$Element$Font$bold,
		A2($mdgriffith$elm_ui$Element$paddingXY, 0, 10)
	]);
var $author$project$StyledElement$customTextStack = F4(
	function (title, body, spacing, highlightColor) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				$author$project$Style$header2Style,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$Font$color($author$project$Colors$black)
					])),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$alignLeft,
							A2($mdgriffith$elm_ui$Element$paddingXY, 0, spacing)
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text(title)
						])),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$alignLeft,
							$mdgriffith$elm_ui$Element$Font$color(highlightColor)
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text(body)
						]))
				]));
	});
var $author$project$StyledElement$textStackWithSpacing = F3(
	function (title, body, spacing) {
		return A4($author$project$StyledElement$customTextStack, title, body, spacing, $author$project$Colors$darkGreen);
	});
var $author$project$Pages$Buses$AboutBus$viewCrewPage = function (model) {
	var viewEmployee = F4(
		function (role, name, phone, email) {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
					]),
				A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerY,
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$spacing(8),
							$mdgriffith$elm_ui$Element$width(
							A2($mdgriffith$elm_ui$Element$maximum, 300, $mdgriffith$elm_ui$Element$fill))
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							_List_fromArray(
								[
									A3($author$project$StyledElement$textStackWithSpacing, role, name, 8),
									$author$project$Icons$chevronDown(
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$rotate((-$elm$core$Basics$pi) / 2),
											$mdgriffith$elm_ui$Element$alignBottom,
											$mdgriffith$elm_ui$Element$moveUp(16)
										]))
								])),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(2)),
									$mdgriffith$elm_ui$Element$Background$color(
									A2($author$project$Colors$withAlpha, $author$project$Colors$darkness, 0.34))
								]),
							$mdgriffith$elm_ui$Element$none),
							A2($mdgriffith$elm_ui$Element$el, _List_Nil, $mdgriffith$elm_ui$Element$none),
							A2(
							$mdgriffith$elm_ui$Element$el,
							$author$project$Style$labelStyle,
							$mdgriffith$elm_ui$Element$text(phone)),
							A2(
							$mdgriffith$elm_ui$Element$el,
							$author$project$Style$labelStyle,
							$mdgriffith$elm_ui$Element$text(email))
						])));
		});
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(20),
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				A4(viewEmployee, 'Assistant', 'Thomas Magnum', 'Phone Number', 'Email'),
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(2)),
						$mdgriffith$elm_ui$Element$height(
						A2($mdgriffith$elm_ui$Element$maximum, 300, $mdgriffith$elm_ui$Element$fill)),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$darkness)
					]),
				$mdgriffith$elm_ui$Element$none),
				A4(viewEmployee, 'Driver', 'James Ferrazi', 'Phone Number', 'Email')
			]));
};
var $mdgriffith$elm_ui$Element$fillPortion = $mdgriffith$elm_ui$Internal$Model$Fill;
var $author$project$StyledElement$googleMap = function (mapClasses) {
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_Utils_ap(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$id('google-map')),
					$mdgriffith$elm_ui$Element$Background$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 237, 237, 237))
				]),
			mapClasses),
		$mdgriffith$elm_ui$Element$none);
};
var $mdgriffith$elm_ui$Element$Lazy$embed = function (x) {
	switch (x.$) {
		case 'Unstyled':
			var html = x.a;
			return html;
		case 'Styled':
			var styled = x.a;
			return styled.html(
				A2(
					$mdgriffith$elm_ui$Internal$Model$OnlyDynamic,
					{
						focus: {backgroundColor: $elm$core$Maybe$Nothing, borderColor: $elm$core$Maybe$Nothing, shadow: $elm$core$Maybe$Nothing},
						hover: $mdgriffith$elm_ui$Internal$Model$AllowHover,
						mode: $mdgriffith$elm_ui$Internal$Model$Layout
					},
					styled.styles));
		case 'Text':
			var text = x.a;
			return $elm$core$Basics$always(
				$elm$virtual_dom$VirtualDom$text(text));
		default:
			return $elm$core$Basics$always(
				$elm$virtual_dom$VirtualDom$text(''));
	}
};
var $mdgriffith$elm_ui$Element$Lazy$apply1 = F2(
	function (fn, a) {
		return $mdgriffith$elm_ui$Element$Lazy$embed(
			fn(a));
	});
var $mdgriffith$elm_ui$Element$Lazy$lazy = F2(
	function (fn, a) {
		return $mdgriffith$elm_ui$Internal$Model$Unstyled(
			A3($elm$virtual_dom$VirtualDom$lazy3, $mdgriffith$elm_ui$Element$Lazy$apply1, fn, a));
	});
var $author$project$Pages$Buses$AboutBus$viewGMAP = A2(
	$mdgriffith$elm_ui$Element$Lazy$lazy,
	$author$project$StyledElement$googleMap,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$height(
			A2($mdgriffith$elm_ui$Element$minimum, 300, $mdgriffith$elm_ui$Element$fill)),
			$mdgriffith$elm_ui$Element$width(
			$mdgriffith$elm_ui$Element$fillPortion(2))
		]));
var $mdgriffith$elm_ui$Internal$Model$Padding = F5(
	function (a, b, c, d, e) {
		return {$: 'Padding', a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Internal$Model$Spaced = F3(
	function (a, b, c) {
		return {$: 'Spaced', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$extractSpacingAndPadding = function (attrs) {
	return A3(
		$elm$core$List$foldr,
		F2(
			function (attr, _v0) {
				var pad = _v0.a;
				var spacing = _v0.b;
				return _Utils_Tuple2(
					function () {
						if (pad.$ === 'Just') {
							var x = pad.a;
							return pad;
						} else {
							if ((attr.$ === 'StyleClass') && (attr.b.$ === 'PaddingStyle')) {
								var _v3 = attr.b;
								var name = _v3.a;
								var t = _v3.b;
								var r = _v3.c;
								var b = _v3.d;
								var l = _v3.e;
								return $elm$core$Maybe$Just(
									A5($mdgriffith$elm_ui$Internal$Model$Padding, name, t, r, b, l));
							} else {
								return $elm$core$Maybe$Nothing;
							}
						}
					}(),
					function () {
						if (spacing.$ === 'Just') {
							var x = spacing.a;
							return spacing;
						} else {
							if ((attr.$ === 'StyleClass') && (attr.b.$ === 'SpacingStyle')) {
								var _v6 = attr.b;
								var name = _v6.a;
								var x = _v6.b;
								var y = _v6.c;
								return $elm$core$Maybe$Just(
									A3($mdgriffith$elm_ui$Internal$Model$Spaced, name, x, y));
							} else {
								return $elm$core$Maybe$Nothing;
							}
						}
					}());
			}),
		_Utils_Tuple2($elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing),
		attrs);
};
var $mdgriffith$elm_ui$Element$wrappedRow = F2(
	function (attrs, children) {
		var _v0 = $mdgriffith$elm_ui$Internal$Model$extractSpacingAndPadding(attrs);
		var padded = _v0.a;
		var spaced = _v0.b;
		if (spaced.$ === 'Nothing') {
			return A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asRow,
				$mdgriffith$elm_ui$Internal$Model$div,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.wrapped)))),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
							attrs))),
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
		} else {
			var _v2 = spaced.a;
			var spaceName = _v2.a;
			var x = _v2.b;
			var y = _v2.c;
			var newPadding = function () {
				if (padded.$ === 'Just') {
					var _v5 = padded.a;
					var name = _v5.a;
					var t = _v5.b;
					var r = _v5.c;
					var b = _v5.d;
					var l = _v5.e;
					return ((_Utils_cmp(r, (x / 2) | 0) > -1) && (_Utils_cmp(b, (y / 2) | 0) > -1)) ? $elm$core$Maybe$Just(
						$mdgriffith$elm_ui$Element$paddingEach(
							{bottom: b - ((y / 2) | 0), left: l - ((x / 2) | 0), right: r - ((x / 2) | 0), top: t - ((y / 2) | 0)})) : $elm$core$Maybe$Nothing;
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}();
			if (newPadding.$ === 'Just') {
				var pad = newPadding.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asRow,
					$mdgriffith$elm_ui$Internal$Model$div,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.wrapped)))),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
								_Utils_ap(
									attrs,
									_List_fromArray(
										[pad]))))),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
			} else {
				var halfY = -(y / 2);
				var halfX = -(x / 2);
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					attrs,
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[
								A4(
								$mdgriffith$elm_ui$Internal$Model$element,
								$mdgriffith$elm_ui$Internal$Model$asRow,
								$mdgriffith$elm_ui$Internal$Model$div,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.wrapped)))),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Internal$Model$Attr(
											A2(
												$elm$html$Html$Attributes$style,
												'margin',
												$elm$core$String$fromFloat(halfY) + ('px' + (' ' + ($elm$core$String$fromFloat(halfX) + 'px'))))),
										A2(
											$elm$core$List$cons,
											$mdgriffith$elm_ui$Internal$Model$Attr(
												A2(
													$elm$html$Html$Attributes$style,
													'width',
													'calc(100% + ' + ($elm$core$String$fromInt(x) + 'px)'))),
											A2(
												$elm$core$List$cons,
												$mdgriffith$elm_ui$Internal$Model$Attr(
													A2(
														$elm$html$Html$Attributes$style,
														'height',
														'calc(100% + ' + ($elm$core$String$fromInt(y) + 'px)'))),
												A2(
													$elm$core$List$cons,
													A2(
														$mdgriffith$elm_ui$Internal$Model$StyleClass,
														$mdgriffith$elm_ui$Internal$Flag$spacing,
														A3($mdgriffith$elm_ui$Internal$Model$SpacingStyle, spaceName, x, y)),
													_List_Nil))))),
								$mdgriffith$elm_ui$Internal$Model$Unkeyed(children))
							])));
			}
		}
	});
var $author$project$Pages$Buses$AboutBus$viewRoutePage = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$wrappedRow,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(24)
			]),
		_List_fromArray(
			[$author$project$Pages$Buses$AboutBus$viewGMAP]));
};
var $author$project$StyledElement$textStack = F2(
	function (title, body) {
		return A3($author$project$StyledElement$textStackWithSpacing, title, body, 0);
	});
var $author$project$Pages$Buses$AboutBus$viewStatisticsPage = function (model) {
	var sidebarViews = $elm$core$List$concat(
		_List_fromArray(
			[
				_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Element$el, _List_Nil, $mdgriffith$elm_ui$Element$none)
				]),
				function () {
				var _v0 = model.bus.last_seen;
				if (_v0.$ === 'Nothing') {
					return _List_Nil;
				} else {
					var last_seen = _v0.a;
					return _List_fromArray(
						[
							A2($author$project$StyledElement$textStack, 'Distance Travelled', '2,313 km'),
							A2($author$project$StyledElement$textStack, 'Fuel Consumed', '3,200 l'),
							A2(
							$author$project$StyledElement$textStack,
							'Current Speed',
							$elm$core$String$fromFloat(last_seen.speed) + ' km/h'),
							A2($author$project$StyledElement$textStack, 'Repairs Made', '23')
						]);
				}
			}(),
				_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Element$el, _List_Nil, $mdgriffith$elm_ui$Element$none)
				])
			]));
	return A2(
		$mdgriffith$elm_ui$Element$wrappedRow,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(24)
			]),
		_List_fromArray(
			[
				$author$project$Pages$Buses$AboutBus$viewGMAP,
				A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spaceEvenly,
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(300))
					]),
				sidebarViews)
			]));
};
var $author$project$Pages$Buses$AboutBus$SelectedStudent = function (a) {
	return {$: 'SelectedStudent', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$bgGradient = $mdgriffith$elm_ui$Internal$Flag$flag(10);
var $mdgriffith$elm_ui$Element$Background$gradient = function (_v0) {
	var angle = _v0.angle;
	var steps = _v0.steps;
	if (!steps.b) {
		return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
	} else {
		if (!steps.b.b) {
			var clr = steps.a;
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$bgColor,
				A3(
					$mdgriffith$elm_ui$Internal$Model$Colored,
					'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
					'background-color',
					clr));
		} else {
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$bgGradient,
				A3(
					$mdgriffith$elm_ui$Internal$Model$Single,
					'bg-grad-' + A2(
						$elm$core$String$join,
						'-',
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$floatClass(angle),
							A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$formatColorClass, steps))),
					'background-image',
					'linear-gradient(' + (A2(
						$elm$core$String$join,
						', ',
						A2(
							$elm$core$List$cons,
							$elm$core$String$fromFloat(angle) + 'rad',
							A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$formatColor, steps))) + ')')));
		}
	}
};
var $author$project$Colors$withGradient = F2(
	function (radius, color) {
		return $mdgriffith$elm_ui$Element$Background$gradient(
			{
				angle: radius,
				steps: _List_fromArray(
					[
						color,
						A2($author$project$Colors$withAlpha, color, 0),
						A2($author$project$Colors$withAlpha, color, 0)
					])
			});
	});
var $author$project$Pages$Buses$AboutBus$viewStudentsPage = F2(
	function (model, viewHeight) {
		var viewStudent = F2(
			function (index, student) {
				var selected = _Utils_eq(
					$author$project$Pages$Buses$AboutBus$Students(
						$elm$core$Maybe$Just(index)),
					model.currentPage);
				var highlightAttrs = _List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$darkGreen),
						$mdgriffith$elm_ui$Element$Font$color($author$project$Colors$white)
					]);
				return A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$paddingEach(
							_Utils_update(
								$author$project$Style$edges,
								{right: 12}))
						]),
					{
						label: A2(
							$mdgriffith$elm_ui$Element$paragraph,
							_Utils_ap(
								$author$project$Style$header2Style,
								_Utils_ap(
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Element$paddingXY, 4, 10),
											$mdgriffith$elm_ui$Element$Font$size(16),
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$mouseOver(highlightAttrs),
											$author$project$Style$animatesAll
										]),
									selected ? highlightAttrs : _List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$white),
											$mdgriffith$elm_ui$Element$Font$color($author$project$Colors$darkGreen)
										]))),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text(student)
								])),
						onPress: $elm$core$Maybe$Just(
							$author$project$Pages$Buses$AboutBus$SelectedStudent(index))
					});
			});
		var gradient = A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$paddingEach(
					_Utils_update(
						$author$project$Style$edges,
						{right: 12})),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$alignBottom
				]),
			A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(36)),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						A2($author$project$Colors$withGradient, $elm$core$Basics$pi, $author$project$Colors$white)
					]),
				$mdgriffith$elm_ui$Element$none));
		return A2(
			$mdgriffith$elm_ui$Element$wrappedRow,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(24)
				]),
			_List_fromArray(
				[
					$author$project$Pages$Buses$AboutBus$viewGMAP,
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
								]),
							{
								label: A2(
									$mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$spacing(10)
										]),
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$el,
											$author$project$Style$header2Style,
											$mdgriffith$elm_ui$Element$text('All Students')),
											$author$project$Icons$chevronDown(
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$rotate((-$elm$core$Basics$pi) / 2)
												]))
										])),
								onPress: $elm$core$Maybe$Nothing
							}),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$height(
									A2($mdgriffith$elm_ui$Element$maximum, (viewHeight / 2) | 0, $mdgriffith$elm_ui$Element$fill)),
									$mdgriffith$elm_ui$Element$Border$color($author$project$Colors$darkGreen),
									$mdgriffith$elm_ui$Element$Border$width(0),
									$mdgriffith$elm_ui$Element$inFront(gradient)
								]),
							A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$height(
										A2($mdgriffith$elm_ui$Element$maximum, (viewHeight / 2) | 0, $mdgriffith$elm_ui$Element$fill)),
										$mdgriffith$elm_ui$Element$scrollbarY,
										$mdgriffith$elm_ui$Element$paddingEach(
										_Utils_update(
											$author$project$Style$edges,
											{bottom: 24}))
									]),
								A2(
									$elm$core$List$indexedMap,
									viewStudent,
									_List_fromArray(
										['Bansilal Brata', 'Bansilal Brata', '  Brata', 'Bansilal Brata', 'Bansilal Brata', 'Bansilal Brata', 'Bansilal Brata', 'Bansilal Brata', 'Bansilal Brata', 'Bansilal Brata', 'Bansilal Brata', 'Bansilal Brata', 'Bansilal Brata', 'Bansilal Brata', 'Bansilal Brata', 'Bansilal Brata', 'Bansilal Brata', 'Bansilal Brata', 'Bansilal Brata']))))
						]))
				]));
	});
var $author$project$Pages$Buses$AboutBus$view = F2(
	function (model, viewHeight) {
		var _v0 = model.currentPage;
		switch (_v0.$) {
			case 'Statistics':
				return $author$project$Pages$Buses$AboutBus$viewStatisticsPage(model);
			case 'Students':
				return A2($author$project$Pages$Buses$AboutBus$viewStudentsPage, model, viewHeight);
			case 'Route':
				return $author$project$Pages$Buses$AboutBus$viewRoutePage(model);
			default:
				return $author$project$Pages$Buses$AboutBus$viewCrewPage(model);
		}
	});
var $author$project$Pages$Buses$BusDevicePage$RemoveDevice = {$: 'RemoveDevice'};
var $author$project$Icons$box = $author$project$Icons$iconNamed('images/box.svg');
var $author$project$Style$cssResponsive = $author$project$Style$classAttr('cssResponsive');
var $author$project$StyledElement$plainButton = F2(
	function (attributes, config) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			attributes,
			{label: config.label, onPress: config.onPress});
	});
var $author$project$StyledElement$button = F2(
	function (attributes, config) {
		return A2(
			$author$project$StyledElement$plainButton,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$purple),
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(46)),
						$mdgriffith$elm_ui$Element$Font$color(
						A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
						$mdgriffith$elm_ui$Element$Font$size(18),
						$author$project$Style$cssResponsive,
						$mdgriffith$elm_ui$Element$Border$rounded(3),
						$author$project$Style$animatesAll,
						$mdgriffith$elm_ui$Element$mouseOver(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$moveUp(1),
								$mdgriffith$elm_ui$Element$Border$shadow(
								{
									blur: 8,
									color: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.14),
									offset: _Utils_Tuple2(0, 4),
									size: 0
								})
							]))
					]),
				_Utils_ap($author$project$Style$defaultFontFace, attributes)),
			config);
	});
var $author$project$Colors$fillWhite = $mdgriffith$elm_ui$Element$htmlAttribute(
	A2($elm$html$Html$Attributes$style, 'filter', 'brightness(100%) saturate(0) invert(1)'));
var $author$project$Icons$trash = $author$project$Icons$iconNamed('images/trash.svg');
var $author$project$Pages$Buses$BusDevicePage$viewDevice = function (device) {
	var take4 = F2(
		function (list, string) {
			take4:
			while (true) {
				if (string === '') {
					return list;
				} else {
					var $temp$list = A2(
						$elm$core$List$cons,
						A2($elm$core$String$left, 4, string),
						list),
						$temp$string = A2($elm$core$String$dropLeft, 4, string);
					list = $temp$list;
					string = $temp$string;
					continue take4;
				}
			}
		});
	var formattedSerial = A2(
		$elm$core$String$join,
		' ',
		$elm$core$List$reverse(
			A2(take4, _List_Nil, device)));
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(80),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						A2($mdgriffith$elm_ui$Element$paddingXY, 80, 0)
					]),
				_List_fromArray(
					[
						$author$project$Icons$box(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$white),
								$mdgriffith$elm_ui$Element$alpha(1)
							])),
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerY,
								$mdgriffith$elm_ui$Element$spacing(40),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$paddingEach(
								_Utils_update(
									$author$project$Style$edges,
									{bottom: 20}))
							]),
						_List_fromArray(
							[
								A2($author$project$StyledElement$textStack, 'Serial No', formattedSerial),
								A2($author$project$StyledElement$textStack, 'Serial No', '1231 4453 7523 1262')
							]))
					])),
				A2($mdgriffith$elm_ui$Element$el, _List_Nil, $mdgriffith$elm_ui$Element$none),
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[$mdgriffith$elm_ui$Element$alignRight, $mdgriffith$elm_ui$Element$alignBottom]),
				A2(
					$author$project$StyledElement$button,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$errorRed),
							$mdgriffith$elm_ui$Element$alignBottom,
							$mdgriffith$elm_ui$Element$alignRight
						]),
					{
						label: A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(8)
								]),
							_List_fromArray(
								[
									$author$project$Icons$trash(
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$centerY,
											$author$project$Colors$fillWhite,
											$mdgriffith$elm_ui$Element$alpha(1)
										])),
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$centerY,
											$mdgriffith$elm_ui$Element$paddingEach(
											_Utils_update(
												$author$project$Style$edges,
												{top: 2}))
										]),
									$mdgriffith$elm_ui$Element$text('Remove from bus'))
								])),
						onPress: $elm$core$Maybe$Just($author$project$Pages$Buses$BusDevicePage$RemoveDevice)
					}))
			]));
};
var $author$project$Pages$Buses$BusDevicePage$viewDeviceFeatures = function (device) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(80),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						A2($mdgriffith$elm_ui$Element$paddingXY, 80, 0)
					]),
				_List_fromArray(
					[
						$author$project$Icons$box(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$white),
								$mdgriffith$elm_ui$Element$alpha(1)
							])),
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerY,
								$mdgriffith$elm_ui$Element$spacing(40),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$paddingEach(
								_Utils_update(
									$author$project$Style$edges,
									{bottom: 20}))
							]),
						_List_fromArray(
							[
								A2($author$project$StyledElement$textStack, 'Tracking ', 'Location tracking with\n5 metre resolution'),
								A2($author$project$StyledElement$textStack, 'Realtime Reporting', 'Know where your bus is\nright now'),
								A2($author$project$StyledElement$textStack, 'Battery Optimization', 'Last longer between charges')
							]))
					])),
				A2($mdgriffith$elm_ui$Element$el, _List_Nil, $mdgriffith$elm_ui$Element$none),
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[$mdgriffith$elm_ui$Element$alignRight, $mdgriffith$elm_ui$Element$alignBottom]),
				A2(
					$author$project$StyledElement$button,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$errorRed),
							$mdgriffith$elm_ui$Element$alignBottom,
							$mdgriffith$elm_ui$Element$alignRight
						]),
					{
						label: A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(8)
								]),
							_List_fromArray(
								[
									$author$project$Icons$trash(
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$centerY,
											$author$project$Colors$fillWhite,
											$mdgriffith$elm_ui$Element$alpha(1)
										])),
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$centerY,
											$mdgriffith$elm_ui$Element$paddingEach(
											_Utils_update(
												$author$project$Style$edges,
												{top: 2}))
										]),
									$mdgriffith$elm_ui$Element$text('Remove from bus'))
								])),
						onPress: $elm$core$Maybe$Just($author$project$Pages$Buses$BusDevicePage$RemoveDevice)
					}))
			]));
};
var $author$project$Pages$Buses$BusDevicePage$AddDevice = {$: 'AddDevice'};
var $author$project$Icons$add = function (attrs) {
	return A2(
		$author$project$Icons$iconNamed,
		'images/add.svg',
		A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Element$alpha(1),
			attrs));
};
var $author$project$Icons$dashedBox = $author$project$Icons$iconNamed('images/dotted_box.svg');
var $author$project$Pages$Buses$BusDevicePage$viewDeviceRegistration = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(60),
				$mdgriffith$elm_ui$Element$centerX
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(30),
						$mdgriffith$elm_ui$Element$centerX
					]),
				_List_fromArray(
					[
						$author$project$Icons$dashedBox(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$white)
							])),
						A2(
						$mdgriffith$elm_ui$Element$el,
						A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$centerX, $author$project$Style$labelStyle),
						$mdgriffith$elm_ui$Element$text('You have not yet linked a device to this bus'))
					])),
				A2(
				$author$project$StyledElement$button,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$purple),
						$mdgriffith$elm_ui$Element$alignBottom,
						$mdgriffith$elm_ui$Element$centerX
					]),
				{
					label: A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(8)
							]),
						_List_fromArray(
							[
								$author$project$Icons$add(
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$centerY,
										$author$project$Colors$fillWhite,
										$mdgriffith$elm_ui$Element$alpha(1)
									])),
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$centerY,
										$mdgriffith$elm_ui$Element$paddingEach(
										_Utils_update(
											$author$project$Style$edges,
											{top: 2}))
									]),
								$mdgriffith$elm_ui$Element$text('Add device'))
							])),
					onPress: $elm$core$Maybe$Just($author$project$Pages$Buses$BusDevicePage$AddDevice)
				})
			]));
};
var $author$project$Pages$Buses$BusDevicePage$view = function (model) {
	var _v0 = model.bus.device;
	if (_v0.$ === 'Just') {
		var device = _v0.a;
		var _v1 = model.currentPage;
		if (_v1.$ === 'About') {
			return $author$project$Pages$Buses$BusDevicePage$viewDevice(device);
		} else {
			return $author$project$Pages$Buses$BusDevicePage$viewDeviceFeatures(device);
		}
	} else {
		return $author$project$Pages$Buses$BusDevicePage$viewDeviceRegistration(model);
	}
};
var $author$project$StyledElement$buttonLink = F2(
	function (attributes, config) {
		return A2(
			$mdgriffith$elm_ui$Element$link,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$purple),
						$mdgriffith$elm_ui$Element$htmlAttribute(
						$elm$html$Html$Attributes$class('button-link')),
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(46)),
						$mdgriffith$elm_ui$Element$Font$color(
						A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
						$mdgriffith$elm_ui$Element$Font$size(18),
						$mdgriffith$elm_ui$Element$Border$rounded(3),
						$author$project$Style$animatesAll,
						$author$project$Style$cssResponsive,
						$mdgriffith$elm_ui$Element$mouseOver(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$moveUp(1),
								$mdgriffith$elm_ui$Element$Border$shadow(
								{
									blur: 8,
									color: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.14),
									offset: _Utils_Tuple2(0, 4),
									size: 0
								})
							]))
					]),
				_Utils_ap($author$project$Style$defaultFontFace, attributes)),
			{
				label: A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerY]),
					config.label),
				url: $author$project$Navigation$href(config.route)
			});
	});
var $author$project$Style$clipStyle = $author$project$Style$classAttr('safari-clip');
var $author$project$Colors$fillPurple = $mdgriffith$elm_ui$Element$htmlAttribute(
	A2($elm$html$Html$Attributes$style, 'filter', 'brightness(0) saturate(100%) invert(24%) sepia(97%) saturate(1937%) hue-rotate(235deg) brightness(97%) contrast(93%)'));
var $author$project$Pages$Buses$BusRepairsPage$HoveredOver = function (a) {
	return {$: 'HoveredOver', a: a};
};
var $author$project$Style$animatesShadow = $author$project$Style$classAttr('animatesShadow');
var $elm$html$Html$Events$onMouseEnter = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mouseenter',
		$elm$json$Json$Decode$succeed(msg));
};
var $mdgriffith$elm_ui$Element$Events$onMouseEnter = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Events$onMouseEnter);
var $elm$html$Html$Events$onMouseLeave = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mouseleave',
		$elm$json$Json$Decode$succeed(msg));
};
var $mdgriffith$elm_ui$Element$Events$onMouseLeave = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Events$onMouseLeave);
var $author$project$Pages$Buses$BusRepairsPage$viewRepair = function (repair) {
	var timeStyle = _Utils_ap(
		$author$project$Style$defaultFontFace,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$color(
				A3($mdgriffith$elm_ui$Element$rgb255, 119, 122, 129)),
				$mdgriffith$elm_ui$Element$Font$size(13)
			]));
	var routeStyle = _Utils_ap(
		$author$project$Style$defaultFontFace,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$color(
				A3($mdgriffith$elm_ui$Element$rgb255, 85, 88, 98)),
				$mdgriffith$elm_ui$Element$Font$size(14)
			]));
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px(64)),
				$mdgriffith$elm_ui$Element$width(
				A2(
					$mdgriffith$elm_ui$Element$minimum,
					200,
					$mdgriffith$elm_ui$Element$fillPortion(1))),
				$mdgriffith$elm_ui$Element$spacing(8),
				A2($mdgriffith$elm_ui$Element$paddingXY, 12, 11),
				$mdgriffith$elm_ui$Element$Border$color(
				A2($author$project$Colors$withAlpha, $author$project$Colors$darkness, 0.3)),
				$mdgriffith$elm_ui$Element$Border$solid,
				$mdgriffith$elm_ui$Element$Border$width(1),
				$mdgriffith$elm_ui$Element$Events$onMouseEnter(
				$author$project$Pages$Buses$BusRepairsPage$HoveredOver(
					$elm$core$Maybe$Just(repair))),
				$mdgriffith$elm_ui$Element$Events$onMouseLeave(
				$author$project$Pages$Buses$BusRepairsPage$HoveredOver($elm$core$Maybe$Nothing)),
				$author$project$Style$animatesShadow
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(3)),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$darkGreen)
					]),
				$mdgriffith$elm_ui$Element$none),
				A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(8)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						routeStyle,
						$mdgriffith$elm_ui$Element$text(
							$author$project$Models$Bus$titleForPart(repair.part))),
						A2(
						$mdgriffith$elm_ui$Element$el,
						timeStyle,
						$mdgriffith$elm_ui$Element$text(
							'KES.' + $elm$core$String$fromInt(repair.cost)))
					]))
			]));
};
var $author$project$Pages$Buses$BusRepairsPage$viewGroupedRepairs = function (groupedRepairs) {
	var viewGroup = function (_v0) {
		var title = _v0.a;
		var repairs = _v0.b;
		var totalCost = A3(
			$elm$core$List$foldl,
			F2(
				function (x, y) {
					return y + x.cost;
				}),
			0,
			repairs);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					$author$project$Style$header2Style,
					$mdgriffith$elm_ui$Element$text(
						title + (' - KES. ' + $elm$core$String$fromInt(totalCost)))),
					A2(
					$mdgriffith$elm_ui$Element$wrappedRow,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(10),
							$mdgriffith$elm_ui$Element$width(
							A2($mdgriffith$elm_ui$Element$maximum, 800, $mdgriffith$elm_ui$Element$fill))
						]),
					A2($elm$core$List$map, $author$project$Pages$Buses$BusRepairsPage$viewRepair, repairs))
				]));
	};
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$scrollbarY,
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$fillPortion(2))
			]),
		A2($elm$core$List$map, viewGroup, groupedRepairs));
};
var $author$project$Icons$Repairs$iconNamed = F2(
	function (name, attrs) {
		return A2(
			$mdgriffith$elm_ui$Element$image,
			attrs,
			{description: '', src: name});
	});
var $author$project$Icons$Repairs$chassis = function (attrs) {
	return A2(
		$author$project$Icons$Repairs$iconNamed,
		'images/repairs/chassis.svg',
		A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Element$htmlAttribute(
				A2($elm$html$Html$Attributes$style, 'pointer-events', 'none')),
			attrs));
};
var $author$project$Icons$Repairs$engine = function (attrs) {
	return A2(
		$author$project$Icons$Repairs$iconNamed,
		'images/repairs/engine.svg',
		A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Element$centerX,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'pointer-events', 'none')),
				A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$alignTop, attrs))));
};
var $author$project$Icons$Repairs$engineRepair = function (attrs) {
	return A2(
		$author$project$Icons$Repairs$iconNamed,
		'images/repairs/repair/engine_repair.svg',
		A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Element$paddingEach(
				_Utils_update(
					$author$project$Style$edges,
					{top: 73})),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$centerX,
				A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$alignTop, attrs))));
};
var $author$project$Icons$Repairs$frontCrossAxisRepair = function (attrs) {
	return A2(
		$author$project$Icons$Repairs$iconNamed,
		'images/repairs/repair/front_cross_axis_repair.svg',
		A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Element$centerX,
			A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$alignTop, attrs)));
};
var $author$project$Icons$Repairs$frontLeftTireRepair = function (attrs) {
	return A2(
		$author$project$Icons$Repairs$iconNamed,
		'images/repairs/repair/front_left_tire_repair.svg',
		A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$alignLeft, attrs));
};
var $author$project$Icons$Repairs$frontRightTireRepair = function (attrs) {
	return A2(
		$author$project$Icons$Repairs$iconNamed,
		'images/repairs/repair/front_right_tire_repair.svg',
		A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$alignRight, attrs));
};
var $author$project$Icons$Repairs$rearCrossAxisRepair = function (attrs) {
	return A2(
		$author$project$Icons$Repairs$iconNamed,
		'images/repairs/repair/rear_cross_axis_repair.svg',
		A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Element$centerX,
			A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$alignBottom, attrs)));
};
var $author$project$Icons$Repairs$rearLeftTireRepair = function (attrs) {
	return A2(
		$author$project$Icons$Repairs$iconNamed,
		'images/repairs/repair/rear_left_tire_repair.svg',
		A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Element$alignBottom,
			A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$alignLeft, attrs)));
};
var $author$project$Icons$Repairs$rearRightTireRepair = function (attrs) {
	return A2(
		$author$project$Icons$Repairs$iconNamed,
		'images/repairs/repair/rear_right_tire_repair.svg',
		A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Element$alignBottom,
			A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$alignRight, attrs)));
};
var $author$project$Icons$Repairs$verticalAxisRepair = function (attrs) {
	return A2(
		$author$project$Icons$Repairs$iconNamed,
		'images/repairs/repair/vertical_axis_repair.svg',
		A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Element$centerX,
			A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$centerY, attrs)));
};
var $author$project$Models$Bus$imageForPart = function (part) {
	switch (part.$) {
		case 'VerticalAxis':
			return $author$project$Icons$Repairs$verticalAxisRepair;
		case 'Engine':
			return $author$project$Icons$Repairs$engineRepair;
		case 'FrontLeftTire':
			return $author$project$Icons$Repairs$frontLeftTireRepair;
		case 'FrontRightTire':
			return $author$project$Icons$Repairs$frontRightTireRepair;
		case 'RearLeftTire':
			return $author$project$Icons$Repairs$rearLeftTireRepair;
		case 'RearRightTire':
			return $author$project$Icons$Repairs$rearRightTireRepair;
		case 'FrontCrossAxis':
			return $author$project$Icons$Repairs$frontCrossAxisRepair;
		default:
			return $author$project$Icons$Repairs$rearCrossAxisRepair;
	}
};
var $mdgriffith$elm_ui$Internal$Model$Scale = function (a) {
	return {$: 'Scale', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$scale = $mdgriffith$elm_ui$Internal$Flag$flag(23);
var $mdgriffith$elm_ui$Element$scale = function (n) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$scale,
		$mdgriffith$elm_ui$Internal$Model$Scale(
			_Utils_Tuple3(n, n, 1)));
};
var $author$project$Pages$Buses$BusRepairsPage$viewVehicle = function (model) {
	var viewImage = function (part) {
		var _v1 = model.highlightedRepair;
		if (_v1.$ === 'Just') {
			var repair = _v1.a;
			return _Utils_eq(repair.part, part) ? $mdgriffith$elm_ui$Element$inFront(
				A2($author$project$Models$Bus$imageForPart, part, _List_Nil)) : $mdgriffith$elm_ui$Element$moveUp(0);
		} else {
			return $mdgriffith$elm_ui$Element$moveUp(0);
		}
	};
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$padding(10),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				$author$project$Icons$Repairs$chassis(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$scale(0.8),
						$mdgriffith$elm_ui$Element$centerX,
						viewImage($author$project$Models$Bus$VerticalAxis),
						$mdgriffith$elm_ui$Element$inFront(
						$author$project$Icons$Repairs$engine(_List_Nil)),
						viewImage($author$project$Models$Bus$Engine),
						viewImage($author$project$Models$Bus$FrontLeftTire),
						viewImage($author$project$Models$Bus$FrontRightTire),
						viewImage($author$project$Models$Bus$RearLeftTire),
						viewImage($author$project$Models$Bus$RearRightTire),
						viewImage($author$project$Models$Bus$FrontCrossAxis),
						viewImage($author$project$Models$Bus$RearCrossAxis)
					])),
				A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_Utils_ap(
					$author$project$Style$labelStyle,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						])),
				_List_fromArray(
					[
						function () {
						var _v0 = model.highlightedRepair;
						if (_v0.$ === 'Nothing') {
							return $mdgriffith$elm_ui$Element$none;
						} else {
							var repair = _v0.a;
							return $mdgriffith$elm_ui$Element$text(repair.description);
						}
					}()
					]))
			]));
};
var $author$project$Pages$Buses$BusRepairsPage$viewPastRepairs = F2(
	function (model, viewHeight) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(viewHeight)),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$author$project$Style$clipStyle,
					$mdgriffith$elm_ui$Element$spacing(20)
				]),
			_List_fromArray(
				[
					$author$project$Pages$Buses$BusRepairsPage$viewGroupedRepairs(model.groupedRepairs),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(2)),
							$mdgriffith$elm_ui$Element$height(
							A2($mdgriffith$elm_ui$Element$maximum, 500, $mdgriffith$elm_ui$Element$fill)),
							$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$darkness)
						]),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$fillPortion(1))
						]),
					_List_fromArray(
						[
							A2(
							$author$project$StyledElement$buttonLink,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$centerX,
									$mdgriffith$elm_ui$Element$Border$width(3),
									$mdgriffith$elm_ui$Element$Border$color($author$project$Colors$purple),
									$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$white)
								]),
							{
								label: A2(
									$mdgriffith$elm_ui$Element$row,
									_List_Nil,
									_List_fromArray(
										[
											$author$project$Icons$add(
											_List_fromArray(
												[$author$project$Colors$fillPurple, $mdgriffith$elm_ui$Element$centerY])),
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$centerY,
													$mdgriffith$elm_ui$Element$Font$color($author$project$Colors$purple)
												]),
											$mdgriffith$elm_ui$Element$text('Add Repair record'))
										])),
								route: $author$project$Navigation$CreateBusRepair(model.busID)
							}),
							$author$project$Pages$Buses$BusRepairsPage$viewVehicle(model)
						]))
				]));
	});
var $author$project$Pages$Buses$BusRepairsPage$viewSummary = F2(
	function (model, viewHeight) {
		var totalCost = A3(
			$elm$core$List$foldl,
			F2(
				function (x, y) {
					return y + x.cost;
				}),
			0,
			model.repairs);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(viewHeight)),
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(500)),
					A2($mdgriffith$elm_ui$Element$paddingXY, 40, 40)
				]),
			_List_fromArray(
				[
					A2($author$project$StyledElement$textStack, 'Due for maintenance in', '300km'),
					A2(
					$author$project$StyledElement$textStack,
					'Total Paid for Repairs',
					'KES. ' + $elm$core$String$fromInt(totalCost))
				]));
	});
var $author$project$Pages$Buses$BusRepairsPage$view = F2(
	function (model, height) {
		var _v0 = model.currentPage;
		if (_v0.$ === 'Summary') {
			return A2($author$project$Pages$Buses$BusRepairsPage$viewSummary, model, height - 220);
		} else {
			return A2($author$project$Pages$Buses$BusRepairsPage$viewPastRepairs, model, height - 220);
		}
	});
var $author$project$Pages$Buses$FuelHistoryPage$view = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px(10)),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$author$project$Style$clipStyle,
				$mdgriffith$elm_ui$Element$Border$solid,
				$mdgriffith$elm_ui$Element$Border$color(
				A3($mdgriffith$elm_ui$Element$rgb255, 197, 197, 197)),
				$mdgriffith$elm_ui$Element$Border$width(1),
				$mdgriffith$elm_ui$Element$clip,
				$mdgriffith$elm_ui$Element$Background$color(
				A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.05))
			]),
		A2($mdgriffith$elm_ui$Element$el, _List_Nil, $mdgriffith$elm_ui$Element$none));
};
var $author$project$Pages$Buses$TripsHistoryPage$AdjustedValue = function (a) {
	return {$: 'AdjustedValue', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$active = $mdgriffith$elm_ui$Internal$Flag$flag(32);
var $mdgriffith$elm_ui$Internal$Model$getHeight = function (attrs) {
	return A3(
		$elm$core$List$foldr,
		F2(
			function (attr, acc) {
				if (acc.$ === 'Just') {
					var x = acc.a;
					return $elm$core$Maybe$Just(x);
				} else {
					if (attr.$ === 'Height') {
						var len = attr.a;
						return $elm$core$Maybe$Just(len);
					} else {
						return $elm$core$Maybe$Nothing;
					}
				}
			}),
		$elm$core$Maybe$Nothing,
		attrs);
};
var $mdgriffith$elm_ui$Internal$Model$getSpacing = F2(
	function (attrs, _default) {
		return A2(
			$elm$core$Maybe$withDefault,
			_default,
			A3(
				$elm$core$List$foldr,
				F2(
					function (attr, acc) {
						if (acc.$ === 'Just') {
							var x = acc.a;
							return $elm$core$Maybe$Just(x);
						} else {
							if ((attr.$ === 'StyleClass') && (attr.b.$ === 'SpacingStyle')) {
								var _v2 = attr.b;
								var x = _v2.b;
								var y = _v2.c;
								return $elm$core$Maybe$Just(
									_Utils_Tuple2(x, y));
							} else {
								return $elm$core$Maybe$Nothing;
							}
						}
					}),
				$elm$core$Maybe$Nothing,
				attrs));
	});
var $mdgriffith$elm_ui$Internal$Model$getWidth = function (attrs) {
	return A3(
		$elm$core$List$foldr,
		F2(
			function (attr, acc) {
				if (acc.$ === 'Just') {
					var x = acc.a;
					return $elm$core$Maybe$Just(x);
				} else {
					if (attr.$ === 'Width') {
						var len = attr.a;
						return $elm$core$Maybe$Just(len);
					} else {
						return $elm$core$Maybe$Nothing;
					}
				}
			}),
		$elm$core$Maybe$Nothing,
		attrs);
};
var $mdgriffith$elm_ui$Element$spacingXY = F2(
	function (x, y) {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$spacing,
			A3(
				$mdgriffith$elm_ui$Internal$Model$SpacingStyle,
				A2($mdgriffith$elm_ui$Internal$Model$spacingName, x, y),
				x,
				y));
	});
var $elm$html$Html$Attributes$step = function (n) {
	return A2($elm$html$Html$Attributes$stringProperty, 'step', n);
};
var $elm$core$Basics$abs = function (n) {
	return (n < 0) ? (-n) : n;
};
var $mdgriffith$elm_ui$Internal$Model$mapAttr = F2(
	function (fn, attr) {
		switch (attr.$) {
			case 'NoAttribute':
				return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
			case 'Describe':
				var description = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Describe(description);
			case 'AlignX':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignX(x);
			case 'AlignY':
				var y = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignY(y);
			case 'Width':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Width(x);
			case 'Height':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Height(x);
			case 'Class':
				var x = attr.a;
				var y = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Class, x, y);
			case 'StyleClass':
				var flag = attr.a;
				var style = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, flag, style);
			case 'Nearby':
				var location = attr.a;
				var elem = attr.b;
				return A2(
					$mdgriffith$elm_ui$Internal$Model$Nearby,
					location,
					A2($mdgriffith$elm_ui$Internal$Model$map, fn, elem));
			case 'Attr':
				var htmlAttr = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Attr(
					A2($elm$virtual_dom$VirtualDom$mapAttribute, fn, htmlAttr));
			default:
				var fl = attr.a;
				var trans = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$TransformComponent, fl, trans);
		}
	});
var $mdgriffith$elm_ui$Element$Input$viewHorizontalThumb = F3(
	function (factor, thumbAttributes, trackHeight) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height(
					A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$fill, trackHeight)),
					$mdgriffith$elm_ui$Element$centerY
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$fillPortion(
								$elm$core$Basics$round(factor * 10000)))
						]),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$el,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$centerY,
						A2(
							$elm$core$List$map,
							$mdgriffith$elm_ui$Internal$Model$mapAttr($elm$core$Basics$never),
							thumbAttributes)),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$fillPortion(
								$elm$core$Basics$round(
									$elm$core$Basics$abs(1 - factor) * 10000)))
						]),
					$mdgriffith$elm_ui$Element$none)
				]));
	});
var $mdgriffith$elm_ui$Element$Input$viewVerticalThumb = F3(
	function (factor, thumbAttributes, trackWidth) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$width(
					A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$fill, trackWidth)),
					$mdgriffith$elm_ui$Element$centerX
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$fillPortion(
								$elm$core$Basics$round(
									$elm$core$Basics$abs(1 - factor) * 10000)))
						]),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$el,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$centerX,
						A2(
							$elm$core$List$map,
							$mdgriffith$elm_ui$Internal$Model$mapAttr($elm$core$Basics$never),
							thumbAttributes)),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$fillPortion(
								$elm$core$Basics$round(factor * 10000)))
						]),
					$mdgriffith$elm_ui$Element$none)
				]));
	});
var $mdgriffith$elm_ui$Element$Input$slider = F2(
	function (attributes, input) {
		var trackWidth = $mdgriffith$elm_ui$Internal$Model$getWidth(attributes);
		var trackHeight = $mdgriffith$elm_ui$Internal$Model$getHeight(attributes);
		var vertical = function () {
			var _v8 = _Utils_Tuple2(trackWidth, trackHeight);
			_v8$3:
			while (true) {
				if (_v8.a.$ === 'Nothing') {
					if (_v8.b.$ === 'Nothing') {
						var _v9 = _v8.a;
						var _v10 = _v8.b;
						return false;
					} else {
						break _v8$3;
					}
				} else {
					if ((_v8.a.a.$ === 'Px') && (_v8.b.$ === 'Just')) {
						switch (_v8.b.a.$) {
							case 'Px':
								var w = _v8.a.a.a;
								var h = _v8.b.a.a;
								return _Utils_cmp(h, w) > 0;
							case 'Fill':
								return true;
							default:
								break _v8$3;
						}
					} else {
						break _v8$3;
					}
				}
			}
			return false;
		}();
		var factor = (input.value - input.min) / (input.max - input.min);
		var _v0 = input.thumb;
		var thumbAttributes = _v0.a;
		var height = $mdgriffith$elm_ui$Internal$Model$getHeight(thumbAttributes);
		var thumbHeightString = function () {
			if (height.$ === 'Nothing') {
				return '20px';
			} else {
				if (height.a.$ === 'Px') {
					var px = height.a.a;
					return $elm$core$String$fromInt(px) + 'px';
				} else {
					return '100%';
				}
			}
		}();
		var width = $mdgriffith$elm_ui$Internal$Model$getWidth(thumbAttributes);
		var thumbWidthString = function () {
			if (width.$ === 'Nothing') {
				return '20px';
			} else {
				if (width.a.$ === 'Px') {
					var px = width.a.a;
					return $elm$core$String$fromInt(px) + 'px';
				} else {
					return '100%';
				}
			}
		}();
		var className = 'thmb-' + (thumbWidthString + ('-' + thumbHeightString));
		var thumbShadowStyle = _List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', thumbWidthString),
				A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', thumbHeightString)
			]);
		var _v1 = A2(
			$mdgriffith$elm_ui$Internal$Model$getSpacing,
			attributes,
			_Utils_Tuple2(5, 5));
		var spacingX = _v1.a;
		var spacingY = _v1.b;
		return A3(
			$mdgriffith$elm_ui$Element$Input$applyLabel,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Input$isHiddenLabel(input.label) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : A2($mdgriffith$elm_ui$Element$spacingXY, spacingX, spacingY),
					$mdgriffith$elm_ui$Element$Region$announce,
					$mdgriffith$elm_ui$Element$width(
					function () {
						if (trackWidth.$ === 'Nothing') {
							return $mdgriffith$elm_ui$Element$fill;
						} else {
							if (trackWidth.a.$ === 'Px') {
								return $mdgriffith$elm_ui$Element$shrink;
							} else {
								var x = trackWidth.a;
								return x;
							}
						}
					}()),
					$mdgriffith$elm_ui$Element$height(
					function () {
						if (trackHeight.$ === 'Nothing') {
							return $mdgriffith$elm_ui$Element$shrink;
						} else {
							if (trackHeight.a.$ === 'Px') {
								return $mdgriffith$elm_ui$Element$shrink;
							} else {
								var x = trackHeight.a;
								return x;
							}
						}
					}())
				]),
			input.label,
			A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$fill, trackWidth)),
						$mdgriffith$elm_ui$Element$height(
						A2(
							$elm$core$Maybe$withDefault,
							$mdgriffith$elm_ui$Element$px(20),
							trackHeight))
					]),
				_List_fromArray(
					[
						A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asEl,
						$mdgriffith$elm_ui$Internal$Model$NodeName('input'),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(input.label),
								A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$active,
								A2($mdgriffith$elm_ui$Internal$Model$Style, 'input[type=\"range\"].' + (className + '::-moz-range-thumb'), thumbShadowStyle)),
								A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$hover,
								A2($mdgriffith$elm_ui$Internal$Model$Style, 'input[type=\"range\"].' + (className + '::-webkit-slider-thumb'), thumbShadowStyle)),
								A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$focus,
								A2($mdgriffith$elm_ui$Internal$Model$Style, 'input[type=\"range\"].' + (className + '::-ms-thumb'), thumbShadowStyle)),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$class(className + ' focusable-parent')),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Events$onInput(
									function (str) {
										var _v4 = $elm$core$String$toFloat(str);
										if (_v4.$ === 'Nothing') {
											return input.onChange(0);
										} else {
											var val = _v4.a;
											return input.onChange(val);
										}
									})),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$type_('range')),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$step(
									function () {
										var _v5 = input.step;
										if (_v5.$ === 'Nothing') {
											return 'any';
										} else {
											var step = _v5.a;
											return $elm$core$String$fromFloat(step);
										}
									}())),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$min(
									$elm$core$String$fromFloat(input.min))),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$max(
									$elm$core$String$fromFloat(input.max))),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$value(
									$elm$core$String$fromFloat(input.value))),
								vertical ? $mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$attribute, 'orient', 'vertical')) : $mdgriffith$elm_ui$Internal$Model$NoAttribute,
								$mdgriffith$elm_ui$Element$width(
								vertical ? A2(
									$elm$core$Maybe$withDefault,
									$mdgriffith$elm_ui$Element$px(20),
									trackHeight) : A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$fill, trackWidth)),
								$mdgriffith$elm_ui$Element$height(
								vertical ? A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$fill, trackWidth) : A2(
									$elm$core$Maybe$withDefault,
									$mdgriffith$elm_ui$Element$px(20),
									trackHeight))
							]),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_Nil)),
						A2(
						$mdgriffith$elm_ui$Element$el,
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$width(
								A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$fill, trackWidth)),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$height(
									A2(
										$elm$core$Maybe$withDefault,
										$mdgriffith$elm_ui$Element$px(20),
										trackHeight)),
								_Utils_ap(
									attributes,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$behindContent(
											vertical ? A3($mdgriffith$elm_ui$Element$Input$viewVerticalThumb, factor, thumbAttributes, trackWidth) : A3($mdgriffith$elm_ui$Element$Input$viewHorizontalThumb, factor, thumbAttributes, trackHeight))
										])))),
						$mdgriffith$elm_ui$Element$none)
					])));
	});
var $mdgriffith$elm_ui$Element$Input$Thumb = function (a) {
	return {$: 'Thumb', a: a};
};
var $mdgriffith$elm_ui$Element$Input$thumb = $mdgriffith$elm_ui$Element$Input$Thumb;
var $ryannhg$date_format$DateFormat$AmPmLowercase = {$: 'AmPmLowercase'};
var $ryannhg$date_format$DateFormat$amPmLowercase = $ryannhg$date_format$DateFormat$AmPmLowercase;
var $ryannhg$date_format$DateFormat$HourNumber = {$: 'HourNumber'};
var $ryannhg$date_format$DateFormat$hourNumber = $ryannhg$date_format$DateFormat$HourNumber;
var $ryannhg$date_format$DateFormat$MinuteFixed = {$: 'MinuteFixed'};
var $ryannhg$date_format$DateFormat$minuteFixed = $ryannhg$date_format$DateFormat$MinuteFixed;
var $author$project$Utils$DateFormatter$timeFormatter = $ryannhg$date_format$DateFormat$format(
	_List_fromArray(
		[
			$ryannhg$date_format$DateFormat$hourNumber,
			$ryannhg$date_format$DateFormat$text(':'),
			$ryannhg$date_format$DateFormat$minuteFixed,
			$ryannhg$date_format$DateFormat$text(' '),
			$ryannhg$date_format$DateFormat$amPmLowercase
		]));
var $author$project$Pages$Buses$TripsHistoryPage$viewSlider = F3(
	function (model, zone, trip) {
		var ticks = function () {
			var createTick = function (point) {
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerY,
							_Utils_eq(
							$elm$core$List$head(trip.reports),
							$elm$core$Maybe$Just(point)) ? $mdgriffith$elm_ui$Element$Background$color(
							A4($mdgriffith$elm_ui$Element$rgba, 1, 1, 1, 0)) : $mdgriffith$elm_ui$Element$Background$color($author$project$Colors$purple)
						]),
					$mdgriffith$elm_ui$Element$none);
			};
			return A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spaceEvenly,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$centerY
					]),
				A2($elm$core$List$map, createTick, trip.reports));
		}();
		var max = $elm$core$List$length(trip.reports) - 1;
		var currentPointTimeElement = function () {
			var routeStyle = _Utils_ap(
				$author$project$Style$defaultFontFace,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$color($author$project$Colors$darkness),
						$mdgriffith$elm_ui$Element$Font$size(14),
						$mdgriffith$elm_ui$Element$Font$bold
					]));
			var _v0 = A2($author$project$Pages$Buses$TripsHistoryPage$pointAt, model.sliderValue, trip);
			if (_v0.$ === 'Nothing') {
				return $mdgriffith$elm_ui$Element$none;
			} else {
				var point = _v0.a;
				return A2(
					$mdgriffith$elm_ui$Element$el,
					A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$centerX, routeStyle),
					$mdgriffith$elm_ui$Element$text(
						$elm$core$String$toUpper(
							A2($author$project$Utils$DateFormatter$timeFormatter, zone, point.time))));
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Element$paddingXY, 10, 0),
					$mdgriffith$elm_ui$Element$Border$color($author$project$Colors$darkness),
					$mdgriffith$elm_ui$Element$Border$widthEach(
					_Utils_update(
						$author$project$Style$edges,
						{top: 1})),
					$mdgriffith$elm_ui$Element$alignBottom,
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(93)),
					$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$white),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$fillPortion(1)),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$fillPortion(1))
						]),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$fillPortion(40))
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$slider,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(48)),
									$mdgriffith$elm_ui$Element$below(
									A2(
										$mdgriffith$elm_ui$Element$el,
										_Utils_ap(
											$author$project$Style$captionLabelStyle,
											_List_fromArray(
												[$mdgriffith$elm_ui$Element$alignLeft])),
										$mdgriffith$elm_ui$Element$text(
											$elm$core$String$toUpper(
												A2($author$project$Utils$DateFormatter$timeFormatter, zone, trip.startTime))))),
									$mdgriffith$elm_ui$Element$below(
									A2(
										$mdgriffith$elm_ui$Element$el,
										_Utils_ap(
											$author$project$Style$captionLabelStyle,
											_List_fromArray(
												[$mdgriffith$elm_ui$Element$alignRight])),
										$mdgriffith$elm_ui$Element$text(
											$elm$core$String$toUpper(
												A2($author$project$Utils$DateFormatter$timeFormatter, zone, trip.endTime))))),
									$mdgriffith$elm_ui$Element$behindContent(
									A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
												$mdgriffith$elm_ui$Element$centerY,
												$mdgriffith$elm_ui$Element$behindContent(ticks)
											]),
										_List_fromArray(
											[
												A2(
												$mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$width(
														$mdgriffith$elm_ui$Element$fillPortion(model.sliderValue)),
														$mdgriffith$elm_ui$Element$height(
														$mdgriffith$elm_ui$Element$px(3)),
														$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$purple),
														$mdgriffith$elm_ui$Element$Border$rounded(2)
													]),
												$mdgriffith$elm_ui$Element$none),
												A2(
												$mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$width(
														$mdgriffith$elm_ui$Element$fillPortion(max - model.sliderValue)),
														$mdgriffith$elm_ui$Element$height(
														$mdgriffith$elm_ui$Element$px(3)),
														$mdgriffith$elm_ui$Element$alpha(0.38),
														$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$purple),
														$mdgriffith$elm_ui$Element$Border$rounded(2)
													]),
												$mdgriffith$elm_ui$Element$none)
											])))
								]),
							{
								label: $mdgriffith$elm_ui$Element$Input$labelHidden('Timeline Slider'),
								max: max,
								min: 0,
								onChange: A2($elm$core$Basics$composeR, $elm$core$Basics$round, $author$project$Pages$Buses$TripsHistoryPage$AdjustedValue),
								step: $elm$core$Maybe$Just(1),
								thumb: $mdgriffith$elm_ui$Element$Input$thumb(
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$purple),
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(16)),
											$mdgriffith$elm_ui$Element$height(
											$mdgriffith$elm_ui$Element$px(16)),
											$mdgriffith$elm_ui$Element$Border$rounded(8),
											$mdgriffith$elm_ui$Element$Border$solid,
											$mdgriffith$elm_ui$Element$Border$color(
											A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
											$mdgriffith$elm_ui$Element$Border$width(2)
										])),
								value: model.sliderValue
							}),
							currentPointTimeElement
						])),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$fillPortion(1))
						]),
					$mdgriffith$elm_ui$Element$none)
				]));
	});
var $author$project$Style$ignoreCss = $author$project$Style$classAttr('ignoreCss');
var $author$project$Pages$Buses$TripsHistoryPage$viewStudentActivities = F2(
	function (activities, timezone) {
		var timeStyle = _Utils_ap(
			$author$project$Style$defaultFontFace,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 119, 122, 129)),
					$mdgriffith$elm_ui$Element$Font$size(13)
				]));
		var selectionStyles = _List_Nil;
		var routeStyle = _Utils_ap(
			$author$project$Style$defaultFontFace,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 85, 88, 98)),
					$mdgriffith$elm_ui$Element$Font$size(14)
				]));
		var viewActivity = function (activity) {
			return A2(
				$author$project$StyledElement$plainButton,
				_List_fromArray(
					[$author$project$Style$ignoreCss]),
				{
					label: A2(
						$mdgriffith$elm_ui$Element$row,
						_Utils_ap(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(64)),
									$mdgriffith$elm_ui$Element$width(
									A2(
										$mdgriffith$elm_ui$Element$minimum,
										200,
										$mdgriffith$elm_ui$Element$fillPortion(1))),
									$mdgriffith$elm_ui$Element$spacing(8),
									A2($mdgriffith$elm_ui$Element$paddingXY, 12, 11),
									$mdgriffith$elm_ui$Element$Background$color(
									A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
									$author$project$Style$animatesShadow
								]),
							selectionStyles),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(8)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										A2(
											$elm$core$List$cons,
											$mdgriffith$elm_ui$Element$alignRight,
											_Utils_ap(
												timeStyle,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$Font$color($author$project$Colors$darkText)
													]))),
										$mdgriffith$elm_ui$Element$text(
											$elm$core$String$toUpper(
												A2($author$project$Utils$DateFormatter$timeFormatter, timezone, activity.time))))
									])),
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(3)),
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$darkGreen)
									]),
								$mdgriffith$elm_ui$Element$none),
								A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(8)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$paragraph,
										routeStyle,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text(
												'activity.studentName' + (' ' + A3($elm$core$String$replace, '_', ' ', activity.activity)))
											]))
									]))
							])),
					onPress: $elm$core$Maybe$Nothing
				});
		};
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
				]),
			A2($elm$core$List$map, viewActivity, activities));
	});
var $author$project$Pages$Buses$TripsHistoryPage$viewMap = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px(500)),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$author$project$Style$clipStyle,
				$mdgriffith$elm_ui$Element$Border$solid,
				$mdgriffith$elm_ui$Element$Border$color($author$project$Colors$darkness),
				$mdgriffith$elm_ui$Element$Border$width(1),
				$mdgriffith$elm_ui$Element$clip,
				$mdgriffith$elm_ui$Element$Background$color(
				A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.05))
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
					]),
				_List_fromArray(
					[
						$author$project$StyledElement$googleMap(_List_Nil),
						function () {
						var _v0 = model.selectedTrip;
						if (_v0.$ === 'Just') {
							var trip = _v0.a;
							return A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(250)),
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$white),
										$mdgriffith$elm_ui$Element$Border$color(
										A2($author$project$Colors$withAlpha, $author$project$Colors$darkness, 0.5)),
										$mdgriffith$elm_ui$Element$Border$widthEach(
										_Utils_update(
											$author$project$Style$edges,
											{left: 1}))
									]),
								A2($author$project$Pages$Buses$TripsHistoryPage$viewStudentActivities, trip.studentActivities, model.timezone));
						} else {
							return $mdgriffith$elm_ui$Element$none;
						}
					}()
					])),
				function () {
				var _v1 = model.selectedTrip;
				if (_v1.$ === 'Just') {
					var trip = _v1.a;
					return A3($author$project$Pages$Buses$TripsHistoryPage$viewSlider, model, model.timezone, trip);
				} else {
					return $mdgriffith$elm_ui$Element$none;
				}
			}()
			]));
};
var $author$project$Pages$Buses$TripsHistoryPage$viewMapOptions = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Element$paddingXY, 10, 0),
				$mdgriffith$elm_ui$Element$spacing(110)
			]),
		_List_Nil);
};
var $author$project$Pages$Buses$TripsHistoryPage$ClickedOn = function (a) {
	return {$: 'ClickedOn', a: a};
};
var $mdgriffith$elm_ui$Element$rgba255 = F4(
	function (red, green, blue, a) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, red / 255, green / 255, blue / 255, a);
	});
var $author$project$Pages$Buses$TripsHistoryPage$viewTrip = F3(
	function (selectedTrip, timezone, trip) {
		var timeStyle = _Utils_ap(
			$author$project$Style$defaultFontFace,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 119, 122, 129)),
					$mdgriffith$elm_ui$Element$Font$size(13)
				]));
		var selectionStyles = _Utils_eq(
			$elm$core$Maybe$Just(trip),
			selectedTrip) ? _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Border$color(
				A3($mdgriffith$elm_ui$Element$rgb255, 97, 165, 145)),
				$mdgriffith$elm_ui$Element$moveUp(2),
				$mdgriffith$elm_ui$Element$Border$shadow(
				{
					blur: 20,
					color: A4($mdgriffith$elm_ui$Element$rgba255, 97, 165, 145, 0.3),
					offset: _Utils_Tuple2(0, 12),
					size: 0
				})
			]) : _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Border$color(
				A4($mdgriffith$elm_ui$Element$rgba255, 197, 197, 197, 0.5))
			]);
		var routeStyle = _Utils_ap(
			$author$project$Style$defaultFontFace,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 85, 88, 98)),
					$mdgriffith$elm_ui$Element$Font$size(14)
				]));
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(64)),
						$mdgriffith$elm_ui$Element$width(
						A2(
							$mdgriffith$elm_ui$Element$minimum,
							200,
							$mdgriffith$elm_ui$Element$fillPortion(1))),
						$mdgriffith$elm_ui$Element$spacing(8),
						A2($mdgriffith$elm_ui$Element$paddingXY, 12, 11),
						$mdgriffith$elm_ui$Element$Background$color(
						A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
						$mdgriffith$elm_ui$Element$Border$solid,
						$mdgriffith$elm_ui$Element$Border$width(1),
						$mdgriffith$elm_ui$Element$Events$onClick(
						$author$project$Pages$Buses$TripsHistoryPage$ClickedOn(trip)),
						$author$project$Style$animatesShadow
					]),
				selectionStyles),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(8)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$alignRight,
								_Utils_ap(
									timeStyle,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$color($author$project$Colors$darkText)
										]))),
							$mdgriffith$elm_ui$Element$text(
								$elm$core$String$toUpper(
									A2($author$project$Utils$DateFormatter$timeFormatter, timezone, trip.startTime)))),
							A2(
							$mdgriffith$elm_ui$Element$el,
							A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$alignRight, timeStyle),
							$mdgriffith$elm_ui$Element$text(
								$elm$core$String$toUpper(
									A2($author$project$Utils$DateFormatter$timeFormatter, timezone, trip.endTime))))
						])),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(3)),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$darkGreen)
						]),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(8)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							routeStyle,
							$mdgriffith$elm_ui$Element$text('trip.route'))
						]))
				]));
	});
var $author$project$Pages$Buses$TripsHistoryPage$viewTrips = function (_v0) {
	var selectedGroup = _v0.selectedGroup;
	var selectedTrip = _v0.selectedTrip;
	var timezone = _v0.timezone;
	var groupedTrips = _v0.groupedTrips;
	if (selectedGroup.$ === 'Nothing') {
		return _Utils_eq(groupedTrips, _List_Nil) ? A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
			$mdgriffith$elm_ui$Element$text('No trips available')) : A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
			$mdgriffith$elm_ui$Element$text('Select a date from below'));
	} else {
		var selectedGroup_ = selectedGroup.a;
		return A2(
			$mdgriffith$elm_ui$Element$wrappedRow,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(12)
				]),
			A2(
				$elm$core$List$map,
				A2($author$project$Pages$Buses$TripsHistoryPage$viewTrip, selectedTrip, timezone),
				$elm$core$List$reverse(selectedGroup_.b)));
	}
};
var $author$project$Pages$Buses$TripsHistoryPage$view = function (model) {
	var _v0 = model.trips;
	switch (_v0.$) {
		case 'NotAsked':
			return $mdgriffith$elm_ui$Element$text('Not fetching');
		case 'Loading':
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
					]),
				$author$project$Icons$loading(
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY])));
		case 'Success':
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing(16)
					]),
				_List_fromArray(
					[
						$author$project$Pages$Buses$TripsHistoryPage$viewMap(model),
						$author$project$Pages$Buses$TripsHistoryPage$viewMapOptions(model),
						$author$project$Pages$Buses$TripsHistoryPage$viewTrips(model)
					]));
		default:
			var error = _v0.a;
			var _v1 = $author$project$Errors$decodeErrors(error);
			var apiError = _v1.a;
			return $mdgriffith$elm_ui$Element$text(
				$author$project$Errors$errorToString(apiError));
	}
};
var $author$project$Pages$Buses$BusPage$viewBody = F2(
	function (height, busData) {
		var viewPage = F2(
			function (pageView, toMsg) {
				return A2($mdgriffith$elm_ui$Element$map, toMsg, pageView);
			});
		var _v0 = busData.currentPage;
		switch (_v0.$) {
			case 'About':
				var subPageModel = _v0.a;
				return A2(
					viewPage,
					A2($author$project$Pages$Buses$AboutBus$view, subPageModel, height),
					$author$project$Pages$Buses$BusPage$GotAboutMsg);
			case 'RouteHistory':
				var subPageModel = _v0.a;
				return A2(
					viewPage,
					$author$project$Pages$Buses$TripsHistoryPage$view(subPageModel),
					$author$project$Pages$Buses$BusPage$GotRouteHistoryMsg);
			case 'FuelHistory':
				var subPageModel = _v0.a;
				return A2(
					viewPage,
					$author$project$Pages$Buses$FuelHistoryPage$view(subPageModel),
					$author$project$Pages$Buses$BusPage$GotFuelHistoryMsg);
			case 'BusDevice':
				var subPageModel = _v0.a;
				return A2(
					viewPage,
					$author$project$Pages$Buses$BusDevicePage$view(subPageModel),
					$author$project$Pages$Buses$BusPage$GotBusDeviceMsg);
			default:
				var subPageModel = _v0.a;
				return A2(
					viewPage,
					A2($author$project$Pages$Buses$BusRepairsPage$view, subPageModel, height),
					$author$project$Pages$Buses$BusPage$GotBusRepairsMsg);
		}
	});
var $author$project$Pages$Buses$AboutBus$ClickedCrewPage = {$: 'ClickedCrewPage'};
var $author$project$Pages$Buses$AboutBus$ClickedRoute = {$: 'ClickedRoute'};
var $author$project$Pages$Buses$AboutBus$ClickedStatisticsPage = {$: 'ClickedStatisticsPage'};
var $author$project$Pages$Buses$AboutBus$ClickedStudentsPage = {$: 'ClickedStudentsPage'};
var $author$project$Pages$Buses$AboutBus$pageToString = function (page) {
	switch (page.$) {
		case 'Statistics':
			return 'Statistics';
		case 'Students':
			return 'Students Onboard';
		case 'Route':
			return 'Route';
		default:
			return 'Crew';
	}
};
var $author$project$StyledElement$textStackWithColor = F3(
	function (title, body, highlightColor) {
		return A4($author$project$StyledElement$customTextStack, title, body, 0, highlightColor);
	});
var $author$project$Colors$transparent = A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0);
var $author$project$StyledElement$Footer$footerChild = F6(
	function (highlightColor, currentPage, pageToString, page, body, action) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignTop,
					$mdgriffith$elm_ui$Element$width(
					A2($mdgriffith$elm_ui$Element$maximum, 190, $mdgriffith$elm_ui$Element$fill))
				]),
			{
				label: A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(16)),
									$author$project$Style$animatesAll,
									$mdgriffith$elm_ui$Element$Background$color(
									_Utils_eq(
										pageToString(currentPage),
										pageToString(page)) ? highlightColor : $author$project$Colors$transparent),
									$mdgriffith$elm_ui$Element$width(
									A2($mdgriffith$elm_ui$Element$maximum, 190, $mdgriffith$elm_ui$Element$fill))
								]),
							$mdgriffith$elm_ui$Element$none),
							A3(
							$author$project$StyledElement$textStackWithColor,
							pageToString(page),
							body,
							highlightColor)
						])),
				onPress: $elm$core$Maybe$Just(action)
			});
	});
var $author$project$Colors$semiDarkText = A2(
	$author$project$Colors$withAlpha,
	A3($mdgriffith$elm_ui$Element$rgb255, 4, 30, 37),
	0.69);
var $author$project$StyledElement$Footer$coloredView = F3(
	function (currentPage, pageToString, tabs) {
		var renderFooterChild = function (_v0) {
			var page = _v0.page;
			var body = _v0.body;
			var action = _v0.action;
			var highlightColor = _v0.highlightColor;
			return A6($author$project$StyledElement$Footer$footerChild, highlightColor, currentPage, pageToString, page, body, action);
		};
		var paddedTabViews = ($elm$core$List$length(tabs) >= 3) ? A2($elm$core$List$map, renderFooterChild, tabs) : _Utils_ap(
			A2($elm$core$List$map, renderFooterChild, tabs),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							A2($mdgriffith$elm_ui$Element$maximum, 10, $mdgriffith$elm_ui$Element$fill))
						]),
					$mdgriffith$elm_ui$Element$none)
				]));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(0)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(2)),
							$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$semiDarkText)
						]),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spaceEvenly,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					paddedTabViews)
				]));
	});
var $author$project$StyledElement$Footer$view = F3(
	function (currentPage, pageToString, tabs) {
		var mappedTabs = A2(
			$elm$core$List$map,
			function (_v0) {
				var page = _v0.a;
				var body = _v0.b;
				var action = _v0.c;
				return {action: action, body: body, highlightColor: $author$project$Colors$darkGreen, page: page};
			},
			tabs);
		return A3($author$project$StyledElement$Footer$coloredView, currentPage, pageToString, mappedTabs);
	});
var $author$project$Pages$Buses$AboutBus$viewFooter = function (model) {
	return A3(
		$author$project$StyledElement$Footer$view,
		model.currentPage,
		$author$project$Pages$Buses$AboutBus$pageToString,
		_List_fromArray(
			[
				_Utils_Tuple3($author$project$Pages$Buses$AboutBus$Statistics, '', $author$project$Pages$Buses$AboutBus$ClickedStatisticsPage),
				_Utils_Tuple3(
				$author$project$Pages$Buses$AboutBus$Students($elm$core$Maybe$Nothing),
				'2',
				$author$project$Pages$Buses$AboutBus$ClickedStudentsPage),
				_Utils_Tuple3(
				$author$project$Pages$Buses$AboutBus$Route,
				function () {
					var _v0 = model.bus.route;
					if (_v0.$ === 'Just') {
						var route = _v0.a;
						return route.name;
					} else {
						return 'Not set';
					}
				}(),
				$author$project$Pages$Buses$AboutBus$ClickedRoute),
				_Utils_Tuple3($author$project$Pages$Buses$AboutBus$Crew, 'Thomas Magnum + 1', $author$project$Pages$Buses$AboutBus$ClickedCrewPage)
			]));
};
var $author$project$Pages$Buses$BusDevicePage$ClickedAboutPage = {$: 'ClickedAboutPage'};
var $author$project$Pages$Buses$BusDevicePage$ClickedFeaturesPage = {$: 'ClickedFeaturesPage'};
var $author$project$Pages$Buses$BusDevicePage$pageToString = function (page) {
	if (page.$ === 'About') {
		return 'About';
	} else {
		return 'Features';
	}
};
var $author$project$Pages$Buses$BusDevicePage$viewFooter = function (model) {
	var _v0 = model.bus.device;
	if (_v0.$ === 'Just') {
		var device = _v0.a;
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A3(
					$author$project$StyledElement$Footer$view,
					model.currentPage,
					$author$project$Pages$Buses$BusDevicePage$pageToString,
					_List_fromArray(
						[
							_Utils_Tuple3($author$project$Pages$Buses$BusDevicePage$About, '', $author$project$Pages$Buses$BusDevicePage$ClickedAboutPage),
							_Utils_Tuple3($author$project$Pages$Buses$BusDevicePage$Features, '', $author$project$Pages$Buses$BusDevicePage$ClickedFeaturesPage)
						])),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(24))
						]),
					$mdgriffith$elm_ui$Element$none)
				]));
	} else {
		return $mdgriffith$elm_ui$Element$none;
	}
};
var $author$project$Pages$Buses$BusRepairsPage$ClickedPastRepairsPage = {$: 'ClickedPastRepairsPage'};
var $author$project$Pages$Buses$BusRepairsPage$ClickedSummaryPage = {$: 'ClickedSummaryPage'};
var $author$project$Pages$Buses$BusRepairsPage$pageToString = function (page) {
	if (page.$ === 'Summary') {
		return 'Summary';
	} else {
		return 'Past Repairs';
	}
};
var $author$project$Pages$Buses$BusRepairsPage$viewFooter = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$fillPortion(2))
					]),
				A3(
					$author$project$StyledElement$Footer$view,
					model.currentPage,
					$author$project$Pages$Buses$BusRepairsPage$pageToString,
					_List_fromArray(
						[
							_Utils_Tuple3($author$project$Pages$Buses$BusRepairsPage$Summary, '', $author$project$Pages$Buses$BusRepairsPage$ClickedSummaryPage),
							_Utils_Tuple3(
							$author$project$Pages$Buses$BusRepairsPage$PastRepairs,
							$elm$core$String$fromInt(
								$elm$core$List$length(model.repairs)),
							$author$project$Pages$Buses$BusRepairsPage$ClickedPastRepairsPage)
						]))),
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$fillPortion(1))
					]),
				$mdgriffith$elm_ui$Element$none)
			]));
};
var $author$project$Pages$Buses$FuelHistoryPage$ClickedConsumptionSpikesPage = {$: 'ClickedConsumptionSpikesPage'};
var $author$project$Pages$Buses$FuelHistoryPage$ClickedSummaryPage = {$: 'ClickedSummaryPage'};
var $author$project$Pages$Buses$FuelHistoryPage$pageToString = function (page) {
	if (page.$ === 'Summary') {
		return 'Summary';
	} else {
		return 'Consumption Spikes';
	}
};
var $author$project$Pages$Buses$FuelHistoryPage$viewFooter = function (model) {
	return A3(
		$author$project$StyledElement$Footer$coloredView,
		model.currentPage,
		$author$project$Pages$Buses$FuelHistoryPage$pageToString,
		_List_fromArray(
			[
				{action: $author$project$Pages$Buses$FuelHistoryPage$ClickedSummaryPage, body: '', highlightColor: $author$project$Colors$darkGreen, page: $author$project$Pages$Buses$FuelHistoryPage$Summary},
				{action: $author$project$Pages$Buses$FuelHistoryPage$ClickedConsumptionSpikesPage, body: '3', highlightColor: $author$project$Colors$errorRed, page: $author$project$Pages$Buses$FuelHistoryPage$ConsumptionSpikes}
			]));
};
var $author$project$Pages$Buses$TripsHistoryPage$SelectedGroup = function (a) {
	return {$: 'SelectedGroup', a: a};
};
var $author$project$Style$normalScrolling = $mdgriffith$elm_ui$Element$htmlAttribute(
	A2($elm$html$Html$Attributes$style, 'direction', 'ltr'));
var $author$project$Style$reverseScrolling = $mdgriffith$elm_ui$Element$htmlAttribute(
	A2($elm$html$Html$Attributes$style, 'direction', 'rtl'));
var $mdgriffith$elm_ui$Element$scrollbarX = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.scrollbarsX);
var $author$project$Pages$Buses$TripsHistoryPage$viewFooter = function (model) {
	var viewScrollTrip = function (group) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignTop,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					A2($mdgriffith$elm_ui$Element$paddingXY, 50, 0)
				]),
			{
				label: A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$spacing(10),
							$author$project$Style$normalScrolling
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(16)),
									$author$project$Style$animatesAll,
									$mdgriffith$elm_ui$Element$width(
									A2($mdgriffith$elm_ui$Element$maximum, 190, $mdgriffith$elm_ui$Element$fill)),
									$mdgriffith$elm_ui$Element$Background$color(
									function () {
										var _v0 = model.selectedGroup;
										if (_v0.$ === 'Just') {
											var selectedGroup = _v0.a;
											return _Utils_eq(selectedGroup.a, group.a) ? $author$project$Colors$darkGreen : $author$project$Colors$transparent;
										} else {
											return $author$project$Colors$transparent;
										}
									}())
								]),
							$mdgriffith$elm_ui$Element$none),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text(group.a))
						])),
				onPress: $elm$core$Maybe$Just(
					$author$project$Pages$Buses$TripsHistoryPage$SelectedGroup(group))
			});
	};
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$inFront(
				A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							A2($author$project$Colors$withGradient, $elm$core$Basics$pi / 2, $author$project$Colors$white),
							$mdgriffith$elm_ui$Element$width(
							A2($mdgriffith$elm_ui$Element$maximum, 40, $mdgriffith$elm_ui$Element$fill)),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
						]),
					$mdgriffith$elm_ui$Element$none))
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(2)),
						$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$semiDarkText)
					]),
				$mdgriffith$elm_ui$Element$none),
				A2(
				$mdgriffith$elm_ui$Element$row,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$scrollbarX,
							$author$project$Style$reverseScrolling
						]),
					_Utils_ap(
						$author$project$Style$header2Style,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$paddingEach(
								_Utils_update(
									$author$project$Style$edges,
									{bottom: 16}))
							]))),
				A2($elm$core$List$map, viewScrollTrip, model.groupedTrips))
			]));
};
var $author$project$Pages$Buses$BusPage$viewFooter = function (busData) {
	var viewPage = F2(
		function (pageView, toMsg) {
			return A2($mdgriffith$elm_ui$Element$map, toMsg, pageView);
		});
	var _v0 = busData.currentPage;
	switch (_v0.$) {
		case 'About':
			var subPageModel = _v0.a;
			return A2(
				viewPage,
				$author$project$Pages$Buses$AboutBus$viewFooter(subPageModel),
				$author$project$Pages$Buses$BusPage$GotAboutMsg);
		case 'RouteHistory':
			var subPageModel = _v0.a;
			return A2(
				viewPage,
				$author$project$Pages$Buses$TripsHistoryPage$viewFooter(subPageModel),
				$author$project$Pages$Buses$BusPage$GotRouteHistoryMsg);
		case 'FuelHistory':
			var subPageModel = _v0.a;
			return A2(
				viewPage,
				$author$project$Pages$Buses$FuelHistoryPage$viewFooter(subPageModel),
				$author$project$Pages$Buses$BusPage$GotFuelHistoryMsg);
		case 'BusDevice':
			var subPageModel = _v0.a;
			return A2(
				viewPage,
				$author$project$Pages$Buses$BusDevicePage$viewFooter(subPageModel),
				$author$project$Pages$Buses$BusPage$GotBusDeviceMsg);
		default:
			var subPageModel = _v0.a;
			return A2(
				viewPage,
				$author$project$Pages$Buses$BusRepairsPage$viewFooter(subPageModel),
				$author$project$Pages$Buses$BusPage$GotBusRepairsMsg);
	}
};
var $author$project$Style$headerStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$Region$heading(1),
		$mdgriffith$elm_ui$Element$Font$size(31),
		$mdgriffith$elm_ui$Element$Font$family(
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$typeface('SF Pro Display'),
				$mdgriffith$elm_ui$Element$Font$sansSerif
			])),
		A2($mdgriffith$elm_ui$Element$paddingXY, 0, 10),
		$mdgriffith$elm_ui$Element$Font$bold
	]);
var $mdgriffith$elm_ui$Element$Font$semiBold = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontWeight, $mdgriffith$elm_ui$Internal$Style$classes.textSemiBold);
var $author$project$Pages$Buses$BusPage$viewHeading = function (busData) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				A2($mdgriffith$elm_ui$Element$paddingXY, 8, 8)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$paragraph,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$Font$color($author$project$Colors$darkText),
					_Utils_ap(
						$author$project$Style$headerStyle,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$Font$semiBold]))),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_Nil,
						$mdgriffith$elm_ui$Element$text(
							$author$project$Pages$Buses$BusPage$pageName(busData.currentPage))),
						$mdgriffith$elm_ui$Element$text(' for '),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$color($author$project$Colors$semiDarkText),
								$mdgriffith$elm_ui$Element$Font$semiBold,
								$mdgriffith$elm_ui$Element$below(
								A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Background$color(
											A2($author$project$Colors$withAlpha, $author$project$Colors$semiDarkText, 0.2)),
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$height(
											$mdgriffith$elm_ui$Element$px(2))
										]),
									$mdgriffith$elm_ui$Element$none))
							]),
						$mdgriffith$elm_ui$Element$text(busData.bus.numberPlate))
					])),
				function () {
				var _v0 = busData.bus.route;
				if (_v0.$ === 'Nothing') {
					return $mdgriffith$elm_ui$Element$none;
				} else {
					var route = _v0.a;
					return A2(
						$mdgriffith$elm_ui$Element$el,
						$author$project$Style$captionLabelStyle,
						$mdgriffith$elm_ui$Element$text(route.name));
				}
			}()
			]));
};
var $author$project$Pages$Buses$BusPage$iconForPage = F3(
	function (pageIcon, page, currentPage) {
		var iconFillColor = _Utils_eq(page, currentPage) ? _List_fromArray(
			[
				$author$project$Colors$fillPurple,
				$mdgriffith$elm_ui$Element$alpha(1)
			]) : _List_Nil;
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Border$rounded(25),
					$mdgriffith$elm_ui$Element$centerX
				]),
			A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$padding(14)
					]),
				pageIcon(
					_Utils_ap(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerY,
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(20)),
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(20))
							]),
						iconFillColor))));
	});
var $author$project$Pages$Buses$BusPage$SelectedPage = function (a) {
	return {$: 'SelectedPage', a: a};
};
var $mdgriffith$elm_ui$Element$transparent = function (on) {
	return on ? A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$transparency,
		A2($mdgriffith$elm_ui$Internal$Model$Transparency, 'transparent', 1.0)) : A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$transparency,
		A2($mdgriffith$elm_ui$Internal$Model$Transparency, 'visible', 0.0));
};
var $author$project$Pages$Buses$BusPage$slider = F3(
	function (pageCount, pageIndex, visible) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Element$paddingXY, 0, 7),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$transparent(!visible)
				]),
			A2(
				$mdgriffith$elm_ui$Element$Input$slider,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(48 + 14)),
						$mdgriffith$elm_ui$Element$centerY
					]),
				{
					label: $mdgriffith$elm_ui$Element$Input$labelHidden('Timeline Slider'),
					max: pageCount - 1,
					min: 0,
					onChange: A2($elm$core$Basics$composeR, $elm$core$Basics$round, $author$project$Pages$Buses$BusPage$SelectedPage),
					step: $elm$core$Maybe$Just(1),
					thumb: $mdgriffith$elm_ui$Element$Input$thumb(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Background$color(
								A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(48)),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(48)),
								$mdgriffith$elm_ui$Element$Border$rounded(48),
								$mdgriffith$elm_ui$Element$Border$solid,
								A2($mdgriffith$elm_ui$Element$paddingXY, 0, 7),
								$mdgriffith$elm_ui$Element$Border$shadow(
								{
									blur: 5,
									color: A4($mdgriffith$elm_ui$Element$rgba255, 0, 0, 0, 0.2),
									offset: _Utils_Tuple2(0, 2),
									size: 0
								})
							])),
					value: pageIndex
				}));
	});
var $author$project$Pages$Buses$BusPage$viewSidebar = function (busData) {
	var iconize = F2(
		function (index, _v0) {
			var icon = _v0.a;
			return A3(
				$author$project$Pages$Buses$BusPage$iconForPage,
				icon,
				index,
				($elm$core$List$length(busData.pages) - busData.pageIndex) - 1);
		});
	var allPages_ = busData.pages;
	var pageCount = $elm$core$List$length(allPages_);
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
			]),
		A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Background$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 233, 233, 243)),
					$mdgriffith$elm_ui$Element$padding(7),
					$mdgriffith$elm_ui$Element$Border$rounded(100),
					$mdgriffith$elm_ui$Element$inFront(
					A3($author$project$Pages$Buses$BusPage$slider, pageCount, busData.pageIndex, false)),
					$mdgriffith$elm_ui$Element$behindContent(
					A3($author$project$Pages$Buses$BusPage$slider, pageCount, busData.pageIndex, true))
				]),
			A2($elm$core$List$indexedMap, iconize, allPages_)));
};
var $author$project$Pages$Buses$BusPage$viewLoaded = F2(
	function (model, busData) {
		var edges = $author$project$Style$edges;
		var _v0 = _Utils_Tuple2(
			A2($author$project$Pages$Buses$BusPage$viewBody, model.height, busData),
			A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$paddingEach(
						_Utils_update(
							edges,
							{bottom: 24}))
					]),
				$author$project$Pages$Buses$BusPage$viewFooter(busData)));
		var body = _v0.a;
		var footer = _v0.b;
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(8),
					A2($mdgriffith$elm_ui$Element$paddingXY, 36, 0)
				]),
			_List_fromArray(
				[
					$author$project$Pages$Buses$BusPage$viewHeading(busData),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$spacing(26)
						]),
					_List_fromArray(
						[
							$author$project$Pages$Buses$BusPage$viewSidebar(busData),
							body
						])),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(16))
						]),
					$mdgriffith$elm_ui$Element$none),
					footer
				]));
	});
var $author$project$Pages$Buses$BusPage$view = function (model) {
	var _v0 = model.busData;
	switch (_v0.$) {
		case 'Success':
			var busData = _v0.a;
			return A2($author$project$Pages$Buses$BusPage$viewLoaded, model, busData);
		case 'Failure':
			return A2(
				$mdgriffith$elm_ui$Element$el,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$centerX,
					A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$centerY, $author$project$Style$labelStyle)),
				A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_Nil,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('Something went wrong, please reload the page')
						])));
		default:
			return $author$project$Icons$loading(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(46)),
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(46))
					]));
	}
};
var $author$project$Pages$Buses$BusesPage$busesFromModel = function (model) {
	if (model.$ === 'Success') {
		var buses = model.a;
		return $elm$core$Maybe$Just(buses);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Style$blurredStyle = $author$project$Style$classAttr('blurred');
var $mdgriffith$elm_ui$Internal$Model$MoveX = function (a) {
	return {$: 'MoveX', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$moveX = $mdgriffith$elm_ui$Internal$Flag$flag(25);
var $mdgriffith$elm_ui$Element$moveRight = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveX,
		$mdgriffith$elm_ui$Internal$Model$MoveX(x));
};
var $mdgriffith$elm_ui$Internal$Flag$letterSpacing = $mdgriffith$elm_ui$Internal$Flag$flag(16);
var $mdgriffith$elm_ui$Element$Font$letterSpacing = function (offset) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$letterSpacing,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			'ls-' + $mdgriffith$elm_ui$Internal$Model$floatClass(offset),
			'letter-spacing',
			$elm$core$String$fromFloat(offset) + 'px'));
};
var $author$project$Pages$Buses$BusesPage$viewMapDetails = function (maybeBus) {
	if (maybeBus.$ === 'Just') {
		var bus = maybeBus.a;
		var viewStudents = A2(
			$mdgriffith$elm_ui$Element$row,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(8)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_Utils_ap(
								$author$project$Style$header2Style,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$color($author$project$Colors$white)
									])),
							$mdgriffith$elm_ui$Element$text('Students')),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_Utils_ap(
								$author$project$Style$labelStyle,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$color($author$project$Colors$white)
									])),
							$mdgriffith$elm_ui$Element$text('3 Onboard')),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_Utils_ap(
								$author$project$Style$labelStyle,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$color($author$project$Colors$white)
									])),
							$mdgriffith$elm_ui$Element$text('4 Registered'))
						]))
				]));
		var viewCrew = A2(
			$mdgriffith$elm_ui$Element$row,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(12)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_Utils_ap(
								$author$project$Style$header2Style,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$color($author$project$Colors$white)
									])),
							$mdgriffith$elm_ui$Element$text('Crew')),
							A2(
							$mdgriffith$elm_ui$Element$wrappedRow,
							_Utils_ap(
								$author$project$Style$labelStyle,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$color($author$project$Colors$white),
										$mdgriffith$elm_ui$Element$spacing(4)
									])),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text('Driver'),
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$Font$semiBold]),
									$mdgriffith$elm_ui$Element$text('Carlos Montaigne'))
								])),
							A2(
							$mdgriffith$elm_ui$Element$wrappedRow,
							_Utils_ap(
								$author$project$Style$labelStyle,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$color($author$project$Colors$white),
										$mdgriffith$elm_ui$Element$spacing(4)
									])),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text('Assistant'),
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$Font$semiBold]),
									$mdgriffith$elm_ui$Element$text('Harvey Mudd'))
								]))
						]))
				]));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Element$paddingXY, 20, 20),
					$mdgriffith$elm_ui$Element$spacing(16),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_Utils_ap(
						$author$project$Style$headerStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$color($author$project$Colors$white),
								$mdgriffith$elm_ui$Element$Font$letterSpacing(1),
								$mdgriffith$elm_ui$Element$padding(0)
							])),
					$mdgriffith$elm_ui$Element$text(bus.numberPlate)),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_Utils_ap(
						$author$project$Style$labelStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$color($author$project$Colors$white)
							])),
					function () {
						var _v1 = bus.route;
						if (_v1.$ === 'Just') {
							var route = _v1.a;
							return $mdgriffith$elm_ui$Element$text(route.name);
						} else {
							return $mdgriffith$elm_ui$Element$text('Route not set');
						}
					}()),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(2)),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$darkness)
						]),
					$mdgriffith$elm_ui$Element$none),
					viewStudents,
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(2)),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$darkness)
						]),
					$mdgriffith$elm_ui$Element$none),
					viewCrew
				]));
	} else {
		return $mdgriffith$elm_ui$Element$none;
	}
};
var $author$project$Pages$Buses$BusesPage$googleMap = F2(
	function (buses, bus) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$clip,
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(300)),
								$mdgriffith$elm_ui$Element$alignRight,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$author$project$Style$animatesAll,
								_Utils_eq(bus, $elm$core$Maybe$Nothing) ? $mdgriffith$elm_ui$Element$moveRight(300) : $mdgriffith$elm_ui$Element$moveRight(0)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$Background$color(
										A2($author$project$Colors$withAlpha, $author$project$Colors$darkness, 0.9)),
										$author$project$Style$blurredStyle,
										$author$project$Style$animatesAll
									]),
								$author$project$Pages$Buses$BusesPage$viewMapDetails(bus)),
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(2)),
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
									]),
								$mdgriffith$elm_ui$Element$none)
							])))
				]),
			_List_fromArray(
				[
					$author$project$StyledElement$googleMap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height(
							A2($mdgriffith$elm_ui$Element$minimum, 500, $mdgriffith$elm_ui$Element$fill))
						])),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(2)),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$darkness)
						]),
					$mdgriffith$elm_ui$Element$none)
				]));
	});
var $author$project$Pages$Buses$BusesPage$CreateBus = {$: 'CreateBus'};
var $author$project$Pages$Buses$BusesPage$PreviewBus = function (a) {
	return {$: 'PreviewBus', a: a};
};
var $author$project$StyledElement$iconButton = F2(
	function (attributes, _v0) {
		var onPress = _v0.onPress;
		var iconAttrs = _v0.iconAttrs;
		var icon = _v0.icon;
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$padding(12),
						$mdgriffith$elm_ui$Element$alignBottom,
						$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$purple),
						$mdgriffith$elm_ui$Element$Border$rounded(8),
						$author$project$Style$animatesAll,
						$mdgriffith$elm_ui$Element$mouseOver(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$moveUp(1),
								$mdgriffith$elm_ui$Element$Border$shadow(
								{
									blur: 8,
									color: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.14),
									offset: _Utils_Tuple2(2, 4),
									size: 0
								})
							]))
					]),
				attributes),
			{
				label: icon(iconAttrs),
				onPress: onPress
			});
	});
var $mdgriffith$elm_ui$Element$InternalColumn = function (a) {
	return {$: 'InternalColumn', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$GridPosition = function (a) {
	return {$: 'GridPosition', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$GridTemplateStyle = function (a) {
	return {$: 'GridTemplateStyle', a: a};
};
var $elm$core$List$all = F2(
	function (isOkay, list) {
		return !A2(
			$elm$core$List$any,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, isOkay),
			list);
	});
var $mdgriffith$elm_ui$Internal$Model$AsGrid = {$: 'AsGrid'};
var $mdgriffith$elm_ui$Internal$Model$asGrid = $mdgriffith$elm_ui$Internal$Model$AsGrid;
var $mdgriffith$elm_ui$Internal$Flag$gridPosition = $mdgriffith$elm_ui$Internal$Flag$flag(35);
var $mdgriffith$elm_ui$Internal$Flag$gridTemplate = $mdgriffith$elm_ui$Internal$Flag$flag(34);
var $elm$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (n <= 0) {
				return result;
			} else {
				var $temp$result = A2($elm$core$List$cons, value, result),
					$temp$n = n - 1,
					$temp$value = value;
				result = $temp$result;
				n = $temp$n;
				value = $temp$value;
				continue repeatHelp;
			}
		}
	});
var $elm$core$List$repeat = F2(
	function (n, value) {
		return A3($elm$core$List$repeatHelp, _List_Nil, n, value);
	});
var $mdgriffith$elm_ui$Element$tableHelper = F2(
	function (attrs, config) {
		var onGrid = F3(
			function (rowLevel, columnLevel, elem) {
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$StyleClass,
							$mdgriffith$elm_ui$Internal$Flag$gridPosition,
							$mdgriffith$elm_ui$Internal$Model$GridPosition(
								{col: columnLevel, height: 1, row: rowLevel, width: 1}))
						]),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[elem])));
			});
		var columnWidth = function (col) {
			if (col.$ === 'InternalIndexedColumn') {
				var colConfig = col.a;
				return colConfig.width;
			} else {
				var colConfig = col.a;
				return colConfig.width;
			}
		};
		var columnHeader = function (col) {
			if (col.$ === 'InternalIndexedColumn') {
				var colConfig = col.a;
				return colConfig.header;
			} else {
				var colConfig = col.a;
				return colConfig.header;
			}
		};
		var maybeHeaders = function (headers) {
			return A2(
				$elm$core$List$all,
				$elm$core$Basics$eq($mdgriffith$elm_ui$Internal$Model$Empty),
				headers) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
				A2(
					$elm$core$List$indexedMap,
					F2(
						function (col, header) {
							return A3(onGrid, 1, col + 1, header);
						}),
					headers));
		}(
			A2($elm$core$List$map, columnHeader, config.columns));
		var add = F3(
			function (cell, columnConfig, cursor) {
				if (columnConfig.$ === 'InternalIndexedColumn') {
					var col = columnConfig.a;
					return _Utils_update(
						cursor,
						{
							column: cursor.column + 1,
							elements: A2(
								$elm$core$List$cons,
								A3(
									onGrid,
									cursor.row,
									cursor.column,
									A2(
										col.view,
										_Utils_eq(maybeHeaders, $elm$core$Maybe$Nothing) ? (cursor.row - 1) : (cursor.row - 2),
										cell)),
								cursor.elements)
						});
				} else {
					var col = columnConfig.a;
					return {
						column: cursor.column + 1,
						elements: A2(
							$elm$core$List$cons,
							A3(
								onGrid,
								cursor.row,
								cursor.column,
								col.view(cell)),
							cursor.elements),
						row: cursor.row
					};
				}
			});
		var build = F3(
			function (columns, rowData, cursor) {
				var newCursor = A3(
					$elm$core$List$foldl,
					add(rowData),
					cursor,
					columns);
				return {column: 1, elements: newCursor.elements, row: cursor.row + 1};
			});
		var children = A3(
			$elm$core$List$foldl,
			build(config.columns),
			{
				column: 1,
				elements: _List_Nil,
				row: _Utils_eq(maybeHeaders, $elm$core$Maybe$Nothing) ? 1 : 2
			},
			config.data);
		var _v0 = A2(
			$mdgriffith$elm_ui$Internal$Model$getSpacing,
			attrs,
			_Utils_Tuple2(0, 0));
		var sX = _v0.a;
		var sY = _v0.b;
		var template = A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$gridTemplate,
			$mdgriffith$elm_ui$Internal$Model$GridTemplateStyle(
				{
					columns: A2($elm$core$List$map, columnWidth, config.columns),
					rows: A2(
						$elm$core$List$repeat,
						$elm$core$List$length(config.data),
						$mdgriffith$elm_ui$Internal$Model$Content),
					spacing: _Utils_Tuple2(
						$mdgriffith$elm_ui$Element$px(sX),
						$mdgriffith$elm_ui$Element$px(sY))
				}));
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asGrid,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				A2($elm$core$List$cons, template, attrs)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				function () {
					if (maybeHeaders.$ === 'Nothing') {
						return children.elements;
					} else {
						var renderedHeaders = maybeHeaders.a;
						return _Utils_ap(
							renderedHeaders,
							$elm$core$List$reverse(children.elements));
					}
				}()));
	});
var $mdgriffith$elm_ui$Element$table = F2(
	function (attrs, config) {
		return A2(
			$mdgriffith$elm_ui$Element$tableHelper,
			attrs,
			{
				columns: A2($elm$core$List$map, $mdgriffith$elm_ui$Element$InternalColumn, config.columns),
				data: config.data
			});
	});
var $author$project$Style$tableHeaderStyle = _Utils_ap(
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Region$heading(4),
			$mdgriffith$elm_ui$Element$Font$size(14),
			$mdgriffith$elm_ui$Element$Font$color(
			A3($mdgriffith$elm_ui$Element$rgb255, 115, 115, 115)),
			$mdgriffith$elm_ui$Element$Font$letterSpacing(0.58),
			$mdgriffith$elm_ui$Element$Font$bold,
			$mdgriffith$elm_ui$Element$alignLeft
		]),
	$author$project$Style$defaultFontFace);
var $author$project$StyledElement$textLink = F2(
	function (attributes, config) {
		return A2(
			$mdgriffith$elm_ui$Element$link,
			_Utils_ap(
				$author$project$Style$defaultFontFace,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($author$project$Colors$purple),
							$mdgriffith$elm_ui$Element$Font$size(18),
							$mdgriffith$elm_ui$Element$Border$rounded(3),
							$mdgriffith$elm_ui$Element$mouseOver(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$alpha(0.9)
								]))
						]),
					attributes)),
			{
				label: config.label,
				url: $author$project$Navigation$href(config.route)
			});
	});
var $author$project$Pages$Buses$BusesPage$viewTable = function (buses) {
	var tableHeader = function (text) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			$author$project$Style$tableHeaderStyle,
			$mdgriffith$elm_ui$Element$text(
				$elm$core$String$toUpper(text)));
	};
	return A2(
		$mdgriffith$elm_ui$Element$table,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(20),
				$mdgriffith$elm_ui$Element$paddingEach(
				_Utils_update(
					$author$project$Style$edges,
					{bottom: 24, left: 16, right: 16, top: 16}))
			]),
		{
			columns: _List_fromArray(
				[
					{
					header: tableHeader('NUMBER PLATE'),
					view: function (bus) {
						return A2(
							$author$project$StyledElement$textLink,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width(
									A2($mdgriffith$elm_ui$Element$minimum, 220, $mdgriffith$elm_ui$Element$fill)),
									$mdgriffith$elm_ui$Element$centerY
								]),
							{
								label: $mdgriffith$elm_ui$Element$text(bus.numberPlate),
								route: A2($author$project$Navigation$Bus, bus.id, $elm$core$Maybe$Nothing)
							});
					},
					width: $mdgriffith$elm_ui$Element$shrink
				},
					{
					header: tableHeader(''),
					view: function (bus) {
						return A2(
							$author$project$StyledElement$iconButton,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$padding(0),
									$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$transparent)
								]),
							{
								icon: $author$project$Icons$pin,
								iconAttrs: _List_Nil,
								onPress: $elm$core$Maybe$Just(
									$author$project$Pages$Buses$BusesPage$PreviewBus(
										$elm$core$Maybe$Just(bus)))
							});
					},
					width: $mdgriffith$elm_ui$Element$shrink
				},
					{
					header: tableHeader('ROUTE'),
					view: function (bus) {
						var _v0 = bus.route;
						if (_v0.$ === 'Just') {
							var route = _v0.a;
							return A2(
								$author$project$StyledElement$textLink,
								_List_fromArray(
									[$mdgriffith$elm_ui$Element$centerY]),
								{
									label: $mdgriffith$elm_ui$Element$text(route.name),
									route: A2($author$project$Navigation$Bus, bus.id, $elm$core$Maybe$Nothing)
								});
						} else {
							return $mdgriffith$elm_ui$Element$none;
						}
					},
					width: $mdgriffith$elm_ui$Element$shrink
				}
				]),
			data: buses
		});
};
var $author$project$Pages$Buses$BusesPage$viewBuses = F2(
	function (buses, filterText) {
		var lowerFilterText = $elm$core$String$toLower(filterText);
		var filteredBuses = A2(
			$elm$core$List$filter,
			function (x) {
				var vehicleType = $elm$core$String$toLower(
					$author$project$Models$Bus$vehicleTypeToString(x.vehicleType));
				var numberPlate = $elm$core$String$toLower(x.numberPlate);
				return A2(
					$elm$core$List$any,
					$elm$core$String$contains(lowerFilterText),
					_List_fromArray(
						[numberPlate, vehicleType]));
			},
			buses);
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$spacing(10)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								$author$project$Style$headerStyle,
								$mdgriffith$elm_ui$Element$text('Vehicles')),
								A2(
								$author$project$StyledElement$button,
								_List_fromArray(
									[$mdgriffith$elm_ui$Element$alignRight]),
								{
									label: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(8)
											]),
										_List_fromArray(
											[
												$author$project$Icons$add(
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$alpha(1),
														$author$project$Colors$fillWhite
													])),
												A2(
												$mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[$mdgriffith$elm_ui$Element$centerY]),
												$mdgriffith$elm_ui$Element$text('Add Bus'))
											])),
									onPress: $elm$core$Maybe$Just($author$project$Pages$Buses$BusesPage$CreateBus)
								})
							])),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_Nil,
						function () {
							var _v0 = _Utils_Tuple2(filteredBuses, filterText);
							if (!_v0.a.b) {
								if (_v0.b === '') {
									return A2(
										$mdgriffith$elm_ui$Element$el,
										A2(
											$elm$core$List$cons,
											$mdgriffith$elm_ui$Element$centerX,
											A2(
												$elm$core$List$cons,
												$mdgriffith$elm_ui$Element$centerY,
												A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Element$padding(30),
													$author$project$Style$labelStyle))),
										$mdgriffith$elm_ui$Element$text('No buses created yet'));
								} else {
									return A2(
										$mdgriffith$elm_ui$Element$el,
										A2(
											$elm$core$List$cons,
											$mdgriffith$elm_ui$Element$centerX,
											A2(
												$elm$core$List$cons,
												$mdgriffith$elm_ui$Element$centerY,
												A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Element$padding(30),
													$author$project$Style$labelStyle))),
										$mdgriffith$elm_ui$Element$text('No matches for ' + filterText));
								}
							} else {
								var someBuses = _v0.a;
								return $author$project$Pages$Buses$BusesPage$viewTable(someBuses);
							}
						}())
					])));
	});
var $author$project$Pages$Buses$BusesPage$viewBody = function (model) {
	var body = function () {
		var _v0 = model.buses;
		switch (_v0.$) {
			case 'NotAsked':
				return $mdgriffith$elm_ui$Element$text('Initialising.');
			case 'Loading':
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
						]),
					$author$project$Icons$loading(
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY])));
			case 'Failure':
				var error = _v0.a;
				var _v1 = $author$project$Errors$decodeErrors(error);
				var apiError = _v1.a;
				return $mdgriffith$elm_ui$Element$text(
					$author$project$Errors$errorToString(apiError));
			default:
				var buses = _v0.a;
				return A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							A2($author$project$Pages$Buses$BusesPage$viewBuses, buses, model.filterText)
						]));
		}
	}();
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(40),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$paddingEach(
				_Utils_update(
					$author$project$Style$edges,
					{bottom: 44}))
			]),
		_List_fromArray(
			[
				body,
				A2($mdgriffith$elm_ui$Element$el, _List_Nil, $mdgriffith$elm_ui$Element$none)
			]));
};
var $author$project$Pages$Buses$BusesPage$view = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px(model.height)),
				$mdgriffith$elm_ui$Element$spacing(40),
				A2($mdgriffith$elm_ui$Element$paddingXY, 90, 70)
			]),
		_List_fromArray(
			[
				A2(
				$author$project$Pages$Buses$BusesPage$googleMap,
				$author$project$Pages$Buses$BusesPage$busesFromModel(model.buses),
				model.selectedBus),
				$author$project$Pages$Buses$BusesPage$viewBody(model)
			]));
};
var $author$project$Pages$Buses$CreateBusPage$SeatsAvailable = function (a) {
	return {$: 'SeatsAvailable', a: a};
};
var $elm$core$Basics$clamp = F3(
	function (low, high, number) {
		return (_Utils_cmp(number, low) < 0) ? low : ((_Utils_cmp(number, high) > 0) ? high : number);
	});
var $elm$regex$Regex$replace = _Regex_replaceAtMost(_Regex_infinity);
var $author$project$Icons$subtract = function (attrs) {
	return A2(
		$author$project$Icons$iconNamed,
		'images/subtract.svg',
		A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Element$alpha(1),
			attrs));
};
var $mdgriffith$elm_ui$Element$Input$text = $mdgriffith$elm_ui$Element$Input$textHelper(
	{
		autofill: $elm$core$Maybe$Nothing,
		spellchecked: false,
		type_: $mdgriffith$elm_ui$Element$Input$TextInputNode('text')
	});
var $author$project$StyledElement$numberInput = F2(
	function (attributes, _v0) {
		var title = _v0.title;
		var caption = _v0.caption;
		var errorCaption = _v0.errorCaption;
		var value = _v0.value;
		var onChange = _v0.onChange;
		var placeholder = _v0.placeholder;
		var ariaLabel = _v0.ariaLabel;
		var icon = _v0.icon;
		var minimum = _v0.minimum;
		var maximum = _v0.maximum;
		var userReplace = F3(
			function (userRegex, replacer, string) {
				var _v4 = $elm$regex$Regex$fromString(userRegex);
				if (_v4.$ === 'Nothing') {
					return string;
				} else {
					var regex = _v4.a;
					return A3($elm$regex$Regex$replace, regex, replacer, string);
				}
			});
		var onlyDigits = function (str) {
			return A3(
				userReplace,
				'[^\\d]',
				function (_v3) {
					return '';
				},
				str);
		};
		var onChangeWithMaxAndMin = function () {
			var minimumValue = A2($elm$core$Maybe$withDefault, 0, minimum);
			var maximumValue = A2($elm$core$Maybe$withDefault, 100000, maximum);
			return A2(
				$elm$core$Basics$composeR,
				onlyDigits,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$String$toInt,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$Maybe$withDefault(value),
						A2(
							$elm$core$Basics$composeR,
							A2($elm$core$Basics$clamp, minimumValue, maximumValue),
							onChange))));
		}();
		var textField = A2(
			$mdgriffith$elm_ui$Element$Input$text,
			_Utils_ap(
				$author$project$Style$labelStyle,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$Border$width(0),
						$mdgriffith$elm_ui$Element$Background$color(
						A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0))
					])),
			{
				label: $mdgriffith$elm_ui$Element$Input$labelHidden(ariaLabel),
				onChange: onChangeWithMaxAndMin,
				placeholder: placeholder,
				text: $elm$core$String$fromInt(value)
			});
		var body = A7(
			$author$project$StyledElement$wrappedInput,
			textField,
			title,
			caption,
			errorCaption,
			icon,
			attributes,
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: $author$project$Icons$subtract(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width(
									$mdgriffith$elm_ui$Element$px(24)),
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(24))
								])),
						onPress: function () {
							if (minimum.$ === 'Nothing') {
								return $elm$core$Maybe$Just(
									onChange(value - 1));
							} else {
								var min = minimum.a;
								return (_Utils_cmp(value - 1, min) < 0) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
									onChange(value - 1));
							}
						}()
					}),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.12)),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(1)),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(20))
						]),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: $author$project$Icons$add(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width(
									$mdgriffith$elm_ui$Element$px(24)),
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(24))
								])),
						onPress: function () {
							if (maximum.$ === 'Nothing') {
								return $elm$core$Maybe$Just(
									onChange(value + 1));
							} else {
								var max = maximum.a;
								return (_Utils_cmp(value + 1, max) > 0) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
									onChange(value + 1));
							}
						}()
					}),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(0)),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(20))
						]),
					$mdgriffith$elm_ui$Element$none)
				]));
		return body;
	});
var $author$project$Pages$Buses$CreateBusPage$viewAvailableSeatingInput = F2(
	function (seats, problems) {
		var errorMapper = $author$project$Errors$inputErrorsFor(problems);
		return A2(
			$author$project$StyledElement$numberInput,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					A2($mdgriffith$elm_ui$Element$maximum, 300, $mdgriffith$elm_ui$Element$fill)),
					$mdgriffith$elm_ui$Element$alignTop
				]),
			{
				ariaLabel: 'How many seats are available for students on the bus?',
				caption: $elm$core$Maybe$Just('How many seats are available for students on the bus?'),
				errorCaption: A2(errorMapper, 'seats_available', _List_Nil),
				icon: $elm$core$Maybe$Nothing,
				maximum: $elm$core$Maybe$Just(70),
				minimum: $elm$core$Maybe$Just(3),
				onChange: A2($elm$core$Basics$composeR, $author$project$Pages$Buses$CreateBusPage$SeatsAvailable, $author$project$Pages$Buses$CreateBusPage$Changed),
				placeholder: $elm$core$Maybe$Nothing,
				title: 'Student Seats',
				value: seats
			});
	});
var $author$project$Pages$Buses$CreateBusPage$SubmitButtonMsg = {$: 'SubmitButtonMsg'};
var $author$project$Pages$Buses$CreateBusPage$viewButton = function (requestState) {
	var buttonView = function () {
		if (requestState.$ === 'Loading') {
			return $author$project$Icons$loading(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$alignRight,
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(46)),
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(46))
					]));
		} else {
			return A2(
				$author$project$StyledElement$button,
				_List_fromArray(
					[$mdgriffith$elm_ui$Element$alignRight]),
				{
					label: $mdgriffith$elm_ui$Element$text('Submit'),
					onPress: $elm$core$Maybe$Just($author$project$Pages$Buses$CreateBusPage$SubmitButtonMsg)
				});
		}
	}();
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_Utils_ap(
			$author$project$Style$labelStyle,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$paddingEach(
					_Utils_update(
						$author$project$Style$edges,
						{right: 24}))
				])),
		buttonView);
};
var $author$project$Pages$Buses$CreateBusPage$viewConsumptionDropDown = function (model) {
	var _v0 = $author$project$Pages$Buses$CreateBusPage$consumptionDropDown(model);
	var dropDown = _v0.a;
	return dropDown;
};
var $author$project$Pages$Buses$CreateBusPage$FuelConsumptionAmount = function (a) {
	return {$: 'FuelConsumptionAmount', a: a};
};
var $elm$regex$Regex$findAtMost = _Regex_findAtMost;
var $author$project$StyledElement$FloatInput$view = F2(
	function (attributes, _v0) {
		var title = _v0.title;
		var caption = _v0.caption;
		var errorCaption = _v0.errorCaption;
		var value = _v0.value;
		var onChange = _v0.onChange;
		var placeholder = _v0.placeholder;
		var ariaLabel = _v0.ariaLabel;
		var icon = _v0.icon;
		var minimum = _v0.minimum;
		var maximum = _v0.maximum;
		var userFind = F2(
			function (userRegex, string) {
				var _v3 = $elm$regex$Regex$fromString(userRegex);
				if (_v3.$ === 'Nothing') {
					return '';
				} else {
					var regex = _v3.a;
					var matches = A3($elm$regex$Regex$findAtMost, 1, regex, string);
					var _v4 = $elm$core$List$head(matches);
					if (_v4.$ === 'Just') {
						var match = _v4.a;
						return match.match;
					} else {
						return '';
					}
				}
			});
		var onlyFloat = function (str) {
			return A2(userFind, '^[0-9]*\\.?[0-9]{0,2}', str);
		};
		var _v1 = function () {
			var v = value.a;
			var s = value.b;
			return _Utils_Tuple2(v, s);
		}();
		var originalValue = _v1.a;
		var floatString = _v1.b;
		var onChangeWithMaxAndMin = function () {
			var minimumValue = A2($elm$core$Maybe$withDefault, 0, minimum);
			var maximumValue = A2($elm$core$Maybe$withDefault, 100000, maximum);
			var newFloatInput = function (cleanedStr) {
				var newValue = A3(
					$elm$core$Basics$clamp,
					minimumValue,
					maximumValue,
					A2(
						$elm$core$Maybe$withDefault,
						originalValue,
						$elm$core$String$toFloat(cleanedStr)));
				return (cleanedStr === '') ? A2($author$project$StyledElement$FloatInput$FloatInput, 0, cleanedStr) : (_Utils_eq(
					$elm$core$Maybe$Just(newValue),
					$elm$core$String$toFloat(cleanedStr)) ? A2($author$project$StyledElement$FloatInput$FloatInput, newValue, cleanedStr) : A2(
					$author$project$StyledElement$FloatInput$FloatInput,
					newValue,
					$elm$core$String$fromFloat(newValue)));
			};
			return A2(
				$elm$core$Basics$composeR,
				onlyFloat,
				A2($elm$core$Basics$composeR, newFloatInput, onChange));
		}();
		var textField = A2(
			$mdgriffith$elm_ui$Element$Input$text,
			_Utils_ap(
				$author$project$Style$labelStyle,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$Border$width(0),
						$mdgriffith$elm_ui$Element$Background$color(
						A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0))
					])),
			{
				label: $mdgriffith$elm_ui$Element$Input$labelHidden(ariaLabel),
				onChange: onChangeWithMaxAndMin,
				placeholder: placeholder,
				text: floatString
			});
		var body = A7($author$project$StyledElement$wrappedInput, textField, title, caption, errorCaption, icon, attributes, _List_Nil);
		return body;
	});
var $author$project$Pages$Buses$CreateBusPage$viewConsumptionInput = function (consumptionAmount) {
	return A2(
		$author$project$StyledElement$FloatInput$view,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width(
				A2($mdgriffith$elm_ui$Element$maximum, 300, $mdgriffith$elm_ui$Element$fill)),
				$mdgriffith$elm_ui$Element$alignTop
			]),
		{
			ariaLabel: 'What is the vehicle\'s mileage?',
			caption: $elm$core$Maybe$Nothing,
			errorCaption: $elm$core$Maybe$Nothing,
			icon: $elm$core$Maybe$Nothing,
			maximum: $elm$core$Maybe$Just(30),
			minimum: $elm$core$Maybe$Just(0),
			onChange: A2($elm$core$Basics$composeR, $author$project$Pages$Buses$CreateBusPage$FuelConsumptionAmount, $author$project$Pages$Buses$CreateBusPage$Changed),
			placeholder: $elm$core$Maybe$Nothing,
			title: 'Custom Mileage (Km / Litre)',
			value: consumptionAmount
		});
};
var $author$project$Pages$Buses$CreateBusPage$viewDivider = A2(
	$mdgriffith$elm_ui$Element$el,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
			$mdgriffith$elm_ui$Element$height(
			$mdgriffith$elm_ui$Element$px(1)),
			$mdgriffith$elm_ui$Element$Background$color(
			A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.1))
		]),
	$mdgriffith$elm_ui$Element$none);
var $author$project$StyledElement$toDropDownView = function (aDropdown) {
	var view = aDropdown.a;
	return view;
};
var $author$project$Pages$Buses$CreateBusPage$viewFuelTypeDropDown = function (model) {
	return $author$project$StyledElement$toDropDownView(
		$author$project$Pages$Buses$CreateBusPage$fuelDropDown(model));
};
var $author$project$Pages$Buses$CreateBusPage$NumberPlate = function (a) {
	return {$: 'NumberPlate', a: a};
};
var $author$project$StyledElement$textInput = F2(
	function (attributes, _v0) {
		var title = _v0.title;
		var caption = _v0.caption;
		var errorCaption = _v0.errorCaption;
		var value = _v0.value;
		var onChange = _v0.onChange;
		var placeholder = _v0.placeholder;
		var ariaLabel = _v0.ariaLabel;
		var icon = _v0.icon;
		var input = A2(
			$mdgriffith$elm_ui$Element$Input$text,
			_Utils_ap(
				$author$project$Style$labelStyle,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$Border$width(0),
						$mdgriffith$elm_ui$Element$Background$color(
						A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0))
					])),
			{
				label: $mdgriffith$elm_ui$Element$Input$labelHidden(ariaLabel),
				onChange: onChange,
				placeholder: placeholder,
				text: value
			});
		return A7($author$project$StyledElement$wrappedInput, input, title, caption, errorCaption, icon, attributes, _List_Nil);
	});
var $author$project$Pages$Buses$CreateBusPage$viewNumberPlateInput = F2(
	function (numberPlate, problems) {
		var errorMapper = $author$project$Errors$inputErrorsFor(problems);
		return A2(
			$author$project$StyledElement$textInput,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					A2($mdgriffith$elm_ui$Element$maximum, 300, $mdgriffith$elm_ui$Element$fill)),
					$mdgriffith$elm_ui$Element$alignTop
				]),
			{
				ariaLabel: 'Number Plate',
				caption: $elm$core$Maybe$Nothing,
				errorCaption: A2(
					errorMapper,
					'number_plate',
					_List_fromArray(
						[$author$project$Pages$Buses$CreateBusPage$InvalidNumberPlate])),
				icon: $elm$core$Maybe$Nothing,
				onChange: A2(
					$elm$core$Basics$composeR,
					$elm$core$String$toUpper,
					A2($elm$core$Basics$composeR, $author$project$Pages$Buses$CreateBusPage$NumberPlate, $author$project$Pages$Buses$CreateBusPage$Changed)),
				placeholder: $elm$core$Maybe$Just(
					A2(
						$mdgriffith$elm_ui$Element$Input$placeholder,
						_List_Nil,
						$mdgriffith$elm_ui$Element$text('Eg. KXX123X or KXX123'))),
				title: 'Number Plate',
				value: numberPlate
			});
	});
var $author$project$Pages$Buses$CreateBusPage$viewRouteDropDown = function (model) {
	var _v0 = $author$project$Pages$Buses$CreateBusPage$routeDropDown(model);
	var dropDown = _v0.a;
	return dropDown;
};
var $author$project$Pages$Buses$CreateBusPage$VehicleType = function (a) {
	return {$: 'VehicleType', a: a};
};
var $author$project$Style$animatesAllDelayed = $author$project$Style$classAttr('animatesAllDelayed');
var $author$project$Icons$bus = function (attrs) {
	return A2(
		$mdgriffith$elm_ui$Element$image,
		_Utils_ap(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(218)),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(68))
				]),
			attrs),
		{description: '', src: 'images/busOutlines/bus.svg'});
};
var $author$project$Icons$shuttle = function (attrs) {
	return A2(
		$mdgriffith$elm_ui$Element$image,
		_Utils_ap(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(176)),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(73))
				]),
			attrs),
		{description: '', src: 'images/busOutlines/shuttle.svg'});
};
var $author$project$Icons$van = function (attrs) {
	return A2(
		$mdgriffith$elm_ui$Element$image,
		_Utils_ap(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(123)),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(56))
				]),
			attrs),
		{description: '', src: 'images/busOutlines/van.svg'});
};
var $author$project$Pages$Buses$CreateBusPage$vehicleTypeToIcon = function (vehicleType) {
	switch (vehicleType.$) {
		case 'Van':
			return $author$project$Icons$van;
		case 'Shuttle':
			return $author$project$Icons$shuttle;
		default:
			return $author$project$Icons$bus;
	}
};
var $author$project$Pages$Buses$CreateBusPage$viewVehicle = F2(
	function (vehicleType, currentClass) {
		var name = function () {
			switch (vehicleType.$) {
				case 'Van':
					return 'Van';
				case 'Shuttle':
					return 'Mini Bus / Shuttle';
				default:
					return 'Bus';
			}
		}();
		var icon = $author$project$Pages$Buses$CreateBusPage$vehicleTypeToIcon(vehicleType);
		var currentType = $author$project$Pages$Buses$CreateBusPage$toVehicleType(currentClass);
		var selected = _Utils_eq(currentType, vehicleType);
		var selectedAttr = selected ? _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Border$color($author$project$Colors$purple),
				$mdgriffith$elm_ui$Element$Border$shadow(
				{
					blur: 16,
					color: A2($author$project$Colors$withAlpha, $author$project$Colors$darkGreen, 0.2),
					offset: _Utils_Tuple2(0, 12),
					size: 0
				})
			]) : _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Border$color(
				A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1))
			]);
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_Nil,
			{
				label: A2(
					$mdgriffith$elm_ui$Element$column,
					_Utils_ap(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerY,
								$mdgriffith$elm_ui$Element$Border$width(3),
								$mdgriffith$elm_ui$Element$spacing(16),
								$author$project$Style$animatesAllDelayed,
								$mdgriffith$elm_ui$Element$paddingEach(
								_Utils_update(
									$author$project$Style$edges,
									{bottom: 12, left: 33, right: 33, top: 41}))
							]),
						selectedAttr),
					_List_fromArray(
						[
							icon(_List_Nil),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$centerX,
									$mdgriffith$elm_ui$Element$Font$bold,
									$mdgriffith$elm_ui$Element$Font$color($author$project$Colors$purple),
									$mdgriffith$elm_ui$Element$Font$size(21)
								]),
							$mdgriffith$elm_ui$Element$text(name))
						])),
				onPress: $elm$core$Maybe$Just(
					$author$project$Pages$Buses$CreateBusPage$Changed(
						$author$project$Pages$Buses$CreateBusPage$VehicleType(vehicleType)))
			});
	});
var $author$project$Pages$Buses$CreateBusPage$viewTypePicker = function (vehicleClass) {
	return A2(
		$mdgriffith$elm_ui$Element$wrappedRow,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(32)
			]),
		_List_fromArray(
			[
				A2($author$project$Pages$Buses$CreateBusPage$viewVehicle, $author$project$Models$Bus$SchoolBus, vehicleClass),
				A2($author$project$Pages$Buses$CreateBusPage$viewVehicle, $author$project$Models$Bus$Shuttle, vehicleClass),
				A2($author$project$Pages$Buses$CreateBusPage$viewVehicle, $author$project$Models$Bus$Van, vehicleClass)
			]));
};
var $author$project$Pages$Buses$CreateBusPage$viewVerticalDivider = A2(
	$mdgriffith$elm_ui$Element$el,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
			$mdgriffith$elm_ui$Element$width(
			$mdgriffith$elm_ui$Element$px(2)),
			$mdgriffith$elm_ui$Element$Background$color(
			A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.1))
		]),
	$mdgriffith$elm_ui$Element$none);
var $author$project$Pages$Buses$CreateBusPage$viewForm = function (model) {
	var form = model.form;
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(50),
				$mdgriffith$elm_ui$Element$paddingEach(
				_Utils_update(
					$author$project$Style$edges,
					{bottom: 100})),
				$mdgriffith$elm_ui$Element$centerX
			]),
		_List_fromArray(
			[
				$author$project$Pages$Buses$CreateBusPage$viewTypePicker(form.vehicleClass),
				$author$project$Pages$Buses$CreateBusPage$viewDivider,
				A2(
				$mdgriffith$elm_ui$Element$wrappedRow,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spaceEvenly,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(32),
								$mdgriffith$elm_ui$Element$width(
								A2(
									$mdgriffith$elm_ui$Element$maximum,
									300,
									A2($mdgriffith$elm_ui$Element$minimum, 300, $mdgriffith$elm_ui$Element$fill))),
								$mdgriffith$elm_ui$Element$alignTop
							]),
						_List_fromArray(
							[
								A2($author$project$Pages$Buses$CreateBusPage$viewNumberPlateInput, form.numberPlate, form.problems),
								A2($author$project$Pages$Buses$CreateBusPage$viewAvailableSeatingInput, form.seatsAvailable, form.problems),
								$author$project$Pages$Buses$CreateBusPage$viewRouteDropDown(model)
							])),
						$author$project$Pages$Buses$CreateBusPage$viewVerticalDivider,
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(32),
								$mdgriffith$elm_ui$Element$width(
								A2(
									$mdgriffith$elm_ui$Element$maximum,
									300,
									A2($mdgriffith$elm_ui$Element$minimum, 300, $mdgriffith$elm_ui$Element$fill))),
								$mdgriffith$elm_ui$Element$alignTop
							]),
						_List_fromArray(
							[
								$author$project$Pages$Buses$CreateBusPage$viewFuelTypeDropDown(model),
								$author$project$Pages$Buses$CreateBusPage$viewConsumptionDropDown(model),
								_Utils_eq(form.consumptionType, $author$project$Pages$Buses$CreateBusPage$Custom) ? $author$project$Pages$Buses$CreateBusPage$viewConsumptionInput(form.consumptionAmount) : $mdgriffith$elm_ui$Element$none
							]))
					])),
				$author$project$Pages$Buses$CreateBusPage$viewButton(model.requestState)
			]));
};
var $author$project$Views$Heading$viewDivider = A2(
	$mdgriffith$elm_ui$Element$el,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$width(
			A2($mdgriffith$elm_ui$Element$maximum, 480, $mdgriffith$elm_ui$Element$fill)),
			$mdgriffith$elm_ui$Element$padding(10),
			$mdgriffith$elm_ui$Element$spacing(7),
			$mdgriffith$elm_ui$Element$Border$widthEach(
			{bottom: 2, left: 0, right: 0, top: 0}),
			$mdgriffith$elm_ui$Element$Border$color(
			A3($mdgriffith$elm_ui$Element$rgb255, 243, 243, 243))
		]),
	$mdgriffith$elm_ui$Element$none);
var $author$project$Views$Heading$viewHeading = F2(
	function (title, subLine) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					$author$project$Style$headerStyle,
					$mdgriffith$elm_ui$Element$text(title)),
					function () {
					if (subLine.$ === 'Nothing') {
						return $mdgriffith$elm_ui$Element$none;
					} else {
						var caption = subLine.a;
						return A2(
							$mdgriffith$elm_ui$Element$el,
							$author$project$Style$captionLabelStyle,
							$mdgriffith$elm_ui$Element$text(caption));
					}
				}(),
					$author$project$Views$Heading$viewDivider
				]));
	});
var $author$project$Pages$Buses$CreateBusPage$viewBody = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(40),
				A2($mdgriffith$elm_ui$Element$paddingXY, 24, 8),
				$mdgriffith$elm_ui$Element$alignTop
			]),
		_List_fromArray(
			[
				A2($author$project$Views$Heading$viewHeading, 'Add a Vehicle', $elm$core$Maybe$Nothing),
				$author$project$Pages$Buses$CreateBusPage$viewForm(model)
			]));
};
var $author$project$Pages$Buses$CreateBusPage$view = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				$author$project$Pages$Buses$CreateBusPage$viewBody(model)
			]));
};
var $author$project$Pages$Buses$CreateBusRepairPage$DraggedOver = {$: 'DraggedOver'};
var $author$project$Pages$Buses$CreateBusRepairPage$DropOn = {$: 'DropOn'};
var $mdgriffith$elm_ui$Element$Border$dashed = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$borderStyle, $mdgriffith$elm_ui$Internal$Style$classes.borderDashed);
var $author$project$Views$DragAndDrop$droppable = function (_v0) {
	var onDrop = _v0.onDrop;
	var onDragOver = _v0.onDragOver;
	return _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$htmlAttribute(
			A2($elm$html$Html$Attributes$attribute, 'droppable', 'true')),
			$mdgriffith$elm_ui$Element$htmlAttribute(
			A2(
				$elm$html$Html$Events$custom,
				'drop',
				$elm$json$Json$Decode$succeed(
					{message: onDrop, preventDefault: true, stopPropagation: true}))),
			$mdgriffith$elm_ui$Element$htmlAttribute(
			A2(
				$elm$html$Html$Events$custom,
				'dragover',
				$elm$json$Json$Decode$succeed(
					{message: onDragOver, preventDefault: true, stopPropagation: true})))
		]);
};
var $author$project$Pages$Buses$CreateBusRepairPage$ChangedCost = F2(
	function (a, b) {
		return {$: 'ChangedCost', a: a, b: b};
	});
var $author$project$Pages$Buses$CreateBusRepairPage$ChangedDescription = F2(
	function (a, b) {
		return {$: 'ChangedDescription', a: a, b: b};
	});
var $author$project$Pages$Buses$CreateBusRepairPage$Delete = function (a) {
	return {$: 'Delete', a: a};
};
var $author$project$Pages$Buses$CreateBusRepairPage$Record = function (a) {
	return {$: 'Record', a: a};
};
var $author$project$Pages$Buses$CreateBusRepairPage$StartedDragging = function (a) {
	return {$: 'StartedDragging', a: a};
};
var $author$project$Pages$Buses$CreateBusRepairPage$StoppedDragging = {$: 'StoppedDragging'};
var $author$project$Views$DragAndDrop$draggable = function (_v0) {
	var onDragStart = _v0.onDragStart;
	var onDragEnd = _v0.onDragEnd;
	return _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$htmlAttribute(
			A2($elm$html$Html$Attributes$attribute, 'draggable', 'true')),
			$mdgriffith$elm_ui$Element$htmlAttribute(
			A2(
				$elm$html$Html$Events$on,
				'dragstart',
				$elm$json$Json$Decode$succeed(onDragStart))),
			$mdgriffith$elm_ui$Element$htmlAttribute(
			A2(
				$elm$html$Html$Events$on,
				'dragend',
				$elm$json$Json$Decode$succeed(onDragEnd)))
		]);
};
var $author$project$Colors$fillErrorRed = $mdgriffith$elm_ui$Element$htmlAttribute(
	A2($elm$html$Html$Attributes$style, 'filter', 'invert(41%) sepia(141%) saturate(396%) hue-rotate(294deg) brightness(74%) contrast(121%)'));
var $mdgriffith$elm_ui$Element$Font$medium = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontWeight, $mdgriffith$elm_ui$Internal$Style$classes.textMedium);
var $mdgriffith$elm_ui$Element$Input$multiline = F2(
	function (attrs, multi) {
		return A3(
			$mdgriffith$elm_ui$Element$Input$textHelper,
			{autofill: $elm$core$Maybe$Nothing, spellchecked: multi.spellcheck, type_: $mdgriffith$elm_ui$Element$Input$TextArea},
			attrs,
			{label: multi.label, onChange: multi.onChange, placeholder: multi.placeholder, text: multi.text});
	});
var $author$project$StyledElement$multilineInput = F2(
	function (attributes, _v0) {
		var title = _v0.title;
		var caption = _v0.caption;
		var errorCaption = _v0.errorCaption;
		var value = _v0.value;
		var onChange = _v0.onChange;
		var placeholder = _v0.placeholder;
		var ariaLabel = _v0.ariaLabel;
		var icon = _v0.icon;
		var input = A2(
			$mdgriffith$elm_ui$Element$Input$multiline,
			_Utils_ap(
				$author$project$Style$labelStyle,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$Border$width(0),
						$mdgriffith$elm_ui$Element$Background$color(
						A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0))
					])),
			{
				label: $mdgriffith$elm_ui$Element$Input$labelHidden(ariaLabel),
				onChange: onChange,
				placeholder: placeholder,
				spellcheck: true,
				text: value
			});
		return A7($author$project$StyledElement$wrappedInput, input, title, caption, errorCaption, icon, attributes, _List_Nil);
	});
var $mdgriffith$elm_ui$Internal$Model$VariantActive = function (a) {
	return {$: 'VariantActive', a: a};
};
var $mdgriffith$elm_ui$Element$Font$smallCaps = $mdgriffith$elm_ui$Internal$Model$VariantActive('smcp');
var $mdgriffith$elm_ui$Internal$Flag$fontVariant = $mdgriffith$elm_ui$Internal$Flag$flag(48);
var $mdgriffith$elm_ui$Element$Font$variant = function (_var) {
	switch (_var.$) {
		case 'VariantActive':
			var name = _var.a;
			return A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontVariant, 'v-' + name);
		case 'VariantOff':
			var name = _var.a;
			return A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontVariant, 'v-' + (name + '-off'));
		default:
			var name = _var.a;
			var index = _var.b;
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$fontVariant,
				A3(
					$mdgriffith$elm_ui$Internal$Model$Single,
					'v-' + (name + ('-' + $elm$core$String$fromInt(index))),
					'font-feature-settings',
					'\"' + (name + ('\" ' + $elm$core$String$fromInt(index)))));
	}
};
var $author$project$Pages$Buses$CreateBusRepairPage$viewRecord = F2(
	function (problems, repair) {
		var errorMapper = F2(
			function (field, match) {
				return A4(
					$author$project$Errors$customInputErrorsFor,
					problems,
					$elm$core$String$fromInt(repair.id) + ('_' + field),
					field,
					match);
			});
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					A2($mdgriffith$elm_ui$Element$paddingXY, 20, 30),
					$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$white),
					$mdgriffith$elm_ui$Element$Border$width(1)
				]),
			A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(250))
							]),
						A2(
							$author$project$Models$Bus$imageForPart,
							repair.part,
							_Utils_ap(
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$padding(0),
										$mdgriffith$elm_ui$Element$alignLeft
									]),
								$author$project$Views$DragAndDrop$draggable(
									{
										onDragEnd: $author$project$Pages$Buses$CreateBusRepairPage$StoppedDragging,
										onDragStart: $author$project$Pages$Buses$CreateBusRepairPage$StartedDragging(
											$author$project$Pages$Buses$CreateBusRepairPage$Record(repair.id))
									})))),
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$spacing(16)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Font$variant($mdgriffith$elm_ui$Element$Font$smallCaps),
												$mdgriffith$elm_ui$Element$Font$medium,
												$mdgriffith$elm_ui$Element$alignTop
											]),
										$mdgriffith$elm_ui$Element$text(
											$author$project$Models$Bus$titleForPart(repair.part))),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$alignRight]),
										A2(
											$author$project$StyledElement$plainButton,
											_List_Nil,
											{
												label: $author$project$Icons$trash(
													_List_fromArray(
														[
															$author$project$Colors$fillErrorRed,
															$mdgriffith$elm_ui$Element$alpha(1)
														])),
												onPress: $elm$core$Maybe$Just(
													$author$project$Pages$Buses$CreateBusRepairPage$Delete(repair.id))
											}))
									])),
								A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$alignRight, $author$project$Style$captionLabelStyle),
										$mdgriffith$elm_ui$Element$text(
											$elm$core$String$fromInt(
												$elm$core$String$length(repair.description)) + '/500')),
										A2(
										$author$project$StyledElement$multilineInput,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
												$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
											]),
										{
											ariaLabel: 'Description of repair',
											caption: $elm$core$Maybe$Just('Description of repair'),
											errorCaption: A2(errorMapper, 'description', _List_Nil),
											icon: $elm$core$Maybe$Nothing,
											onChange: $author$project$Pages$Buses$CreateBusRepairPage$ChangedDescription(repair.id),
											placeholder: $elm$core$Maybe$Nothing,
											title: '',
											value: repair.description
										})
									])),
								A2(
								$author$project$StyledElement$textInput,
								_List_Nil,
								{
									ariaLabel: 'Cost of repair',
									caption: $elm$core$Maybe$Just('Cost of repair'),
									errorCaption: A2(
										errorMapper,
										'cost',
										_List_fromArray(
											[
												A2($author$project$Pages$Buses$CreateBusRepairPage$RepairProblem, repair.id, $author$project$Pages$Buses$CreateBusRepairPage$ZeroCost)
											])),
									icon: $elm$core$Maybe$Nothing,
									onChange: $author$project$Pages$Buses$CreateBusRepairPage$ChangedCost(repair.id),
									placeholder: $elm$core$Maybe$Nothing,
									title: '',
									value: (!repair.cost) ? '' : $elm$core$String$fromInt(repair.cost)
								})
							]))
					])));
	});
var $author$project$Pages$Buses$CreateBusRepairPage$viewRecords = function (model) {
	var problemAttrs = A2(
		$elm$core$List$member,
		$author$project$Errors$toClientSideError($author$project$Pages$Buses$CreateBusRepairPage$noRecordsError),
		model.problems) ? _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Border$solid,
			$mdgriffith$elm_ui$Element$Border$color($author$project$Colors$errorRed),
			$mdgriffith$elm_ui$Element$below(
			A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$color($author$project$Colors$errorRed),
						A2($mdgriffith$elm_ui$Element$paddingXY, 0, 8)
					]),
				$mdgriffith$elm_ui$Element$text($author$project$Pages$Buses$CreateBusRepairPage$noRecordsError.b)))
		]) : _List_Nil;
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$fillPortion(4)),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$spacing(10)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$htmlAttribute(
						$elm$html$Html$Attributes$id($author$project$Pages$Buses$CreateBusRepairPage$viewRecordsID)),
						$mdgriffith$elm_ui$Element$scrollbarY,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing(10)
					]),
				A2(
					$elm$core$List$map,
					$author$project$Pages$Buses$CreateBusRepairPage$viewRecord(model.problems),
					model.repairs)),
				A2(
				$mdgriffith$elm_ui$Element$el,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(66)),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$Border$dashed,
							$mdgriffith$elm_ui$Element$Border$width(3)
						]),
					_Utils_ap(
						(model.isAboveDropOffPoint && (!_Utils_eq(model.pickedUpItem, $elm$core$Maybe$Nothing))) ? _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Background$color(
								A2($author$project$Colors$withAlpha, $author$project$Colors$darkGreen, 0.3))
							]) : _List_Nil,
						_Utils_ap(
							problemAttrs,
							$author$project$Views$DragAndDrop$droppable(
								{onDragOver: $author$project$Pages$Buses$CreateBusRepairPage$DraggedOver, onDrop: $author$project$Pages$Buses$CreateBusRepairPage$DropOn})))),
				A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
					$mdgriffith$elm_ui$Element$text('Drag and drop a vehicle part here ')))
			]));
};
var $author$project$Pages$Buses$CreateBusRepairPage$Part = function (a) {
	return {$: 'Part', a: a};
};
var $author$project$Pages$Buses$CreateBusRepairPage$Submit = {$: 'Submit'};
var $author$project$Pages$Buses$CreateBusRepairPage$viewButton = function (requestState) {
	var buttonView = function () {
		switch (requestState.$) {
			case 'Loading':
				return $author$project$Icons$loading(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$alignRight,
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(46)),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(46))
						]));
			case 'Failure':
				return A2(
					$author$project$StyledElement$button,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$alignRight,
							$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$errorRed)
						]),
					{
						label: A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(8)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$centerY]),
									$mdgriffith$elm_ui$Element$text('Try Again'))
								])),
						onPress: $elm$core$Maybe$Just($author$project$Pages$Buses$CreateBusRepairPage$Submit)
					});
			default:
				return A2(
					$author$project$StyledElement$button,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$alignRight]),
					{
						label: $mdgriffith$elm_ui$Element$text('Submit'),
						onPress: $elm$core$Maybe$Just($author$project$Pages$Buses$CreateBusRepairPage$Submit)
					});
		}
	}();
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_Utils_ap(
			$author$project$Style$labelStyle,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				])),
		buttonView);
};
var $author$project$Pages$Buses$CreateBusRepairPage$viewVehicle = function (model) {
	var visibleParts = A2(
		$elm$core$List$map,
		function ($) {
			return $.part;
		},
		model.repairs);
	var viewImage = function (part) {
		return ((!_Utils_eq(
			model.pickedUpItem,
			$elm$core$Maybe$Just(
				$author$project$Pages$Buses$CreateBusRepairPage$Part(part)))) && (!A2($elm$core$List$member, part, visibleParts))) ? $mdgriffith$elm_ui$Element$inFront(
			A2(
				$author$project$Models$Bus$imageForPart,
				part,
				$author$project$Views$DragAndDrop$draggable(
					{
						onDragEnd: $author$project$Pages$Buses$CreateBusRepairPage$StoppedDragging,
						onDragStart: $author$project$Pages$Buses$CreateBusRepairPage$StartedDragging(
							$author$project$Pages$Buses$CreateBusRepairPage$Part(part))
					}))) : $mdgriffith$elm_ui$Element$moveUp(0);
	};
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_Utils_ap(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$fillPortion(2)),
					A2($mdgriffith$elm_ui$Element$paddingXY, 0, 30)
				]),
			$author$project$Views$DragAndDrop$droppable(
				{
					onDragOver: $author$project$Pages$Buses$CreateBusRepairPage$NoOp,
					onDrop: $author$project$Pages$Buses$CreateBusRepairPage$Delete(
						A2(
							$elm$core$Maybe$withDefault,
							-1,
							function () {
								var _v0 = model.pickedUpItem;
								if ((_v0.$ === 'Just') && (_v0.a.$ === 'Record')) {
									var id = _v0.a.a;
									return $elm$core$Maybe$Just(id);
								} else {
									return $elm$core$Maybe$Nothing;
								}
							}()))
				})),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$alignRight,
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				$author$project$Icons$Repairs$chassis(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerY,
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$inFront(
							$author$project$Icons$Repairs$engine(_List_Nil)),
							viewImage($author$project$Models$Bus$VerticalAxis),
							viewImage($author$project$Models$Bus$Engine),
							viewImage($author$project$Models$Bus$FrontLeftTire),
							viewImage($author$project$Models$Bus$FrontRightTire),
							viewImage($author$project$Models$Bus$RearLeftTire),
							viewImage($author$project$Models$Bus$RearRightTire),
							viewImage($author$project$Models$Bus$FrontCrossAxis),
							viewImage($author$project$Models$Bus$RearCrossAxis)
						]))),
				$author$project$Pages$Buses$CreateBusRepairPage$viewButton(model.requestState)
			]));
};
var $author$project$Pages$Buses$CreateBusRepairPage$view = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Element$paddingXY, 40, 10),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px(model.height)),
				$mdgriffith$elm_ui$Element$spacing(10)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				$author$project$Style$headerStyle,
				$mdgriffith$elm_ui$Element$text('Create Repair Record')),
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(model.height - 80)),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				_List_fromArray(
					[
						$author$project$Pages$Buses$CreateBusRepairPage$viewRecords(model),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$fillPortion(1))
							]),
						$mdgriffith$elm_ui$Element$none),
						$author$project$Pages$Buses$CreateBusRepairPage$viewVehicle(model)
					]))
			]));
};
var $author$project$Pages$Crew$CrewMemberRegistrationPage$isEditing = function (model) {
	return !_Utils_eq(model.editState, $elm$core$Maybe$Nothing);
};
var $author$project$Pages$Crew$CrewMemberRegistrationPage$SubmitButtonMsg = {$: 'SubmitButtonMsg'};
var $author$project$Pages$Crew$CrewMemberRegistrationPage$viewButton = function (requestState) {
	var buttonView = function () {
		switch (requestState.$) {
			case 'Loading':
				return $author$project$Icons$loading(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$alignRight,
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(46)),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(46))
						]));
			case 'Failure':
				return A2(
					$author$project$StyledElement$button,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$alignRight,
							$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$errorRed)
						]),
					{
						label: A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(8)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$centerY]),
									$mdgriffith$elm_ui$Element$text('Try Again'))
								])),
						onPress: $elm$core$Maybe$Just($author$project$Pages$Crew$CrewMemberRegistrationPage$SubmitButtonMsg)
					});
			default:
				return A2(
					$author$project$StyledElement$button,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$alignRight]),
					{
						label: $mdgriffith$elm_ui$Element$text('Submit'),
						onPress: $elm$core$Maybe$Just($author$project$Pages$Crew$CrewMemberRegistrationPage$SubmitButtonMsg)
					});
		}
	}();
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_Utils_ap(
			$author$project$Style$labelStyle,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				])),
		buttonView);
};
var $author$project$Pages$Crew$CrewMemberRegistrationPage$Email = function (a) {
	return {$: 'Email', a: a};
};
var $author$project$Icons$email = $author$project$Icons$iconNamed('images/email.svg');
var $mdgriffith$elm_ui$Element$Input$email = $mdgriffith$elm_ui$Element$Input$textHelper(
	{
		autofill: $elm$core$Maybe$Just('email'),
		spellchecked: false,
		type_: $mdgriffith$elm_ui$Element$Input$TextInputNode('email')
	});
var $author$project$StyledElement$emailInput = F2(
	function (attributes, _v0) {
		var title = _v0.title;
		var caption = _v0.caption;
		var errorCaption = _v0.errorCaption;
		var value = _v0.value;
		var onChange = _v0.onChange;
		var placeholder = _v0.placeholder;
		var ariaLabel = _v0.ariaLabel;
		var icon = _v0.icon;
		var input = A2(
			$mdgriffith$elm_ui$Element$Input$email,
			_Utils_ap(
				$author$project$Style$labelStyle,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$Border$width(0),
						$mdgriffith$elm_ui$Element$Background$color(
						A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0))
					])),
			{
				label: $mdgriffith$elm_ui$Element$Input$labelHidden(ariaLabel),
				onChange: onChange,
				placeholder: placeholder,
				text: value
			});
		return A7($author$project$StyledElement$wrappedInput, input, title, caption, errorCaption, icon, attributes, _List_Nil);
	});
var $author$project$Pages$Crew$CrewMemberRegistrationPage$viewEmailInput = F2(
	function (problems, email) {
		return A2(
			$author$project$StyledElement$emailInput,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					A2($mdgriffith$elm_ui$Element$maximum, 300, $mdgriffith$elm_ui$Element$fill))
				]),
			{
				ariaLabel: 'Email Address',
				caption: $elm$core$Maybe$Just('Used to connect the parent to the mobile app'),
				errorCaption: A3(
					$author$project$Errors$inputErrorsFor,
					problems,
					'email',
					_List_fromArray(
						[$author$project$Pages$Crew$CrewMemberRegistrationPage$EmptyEmail, $author$project$Pages$Crew$CrewMemberRegistrationPage$InvalidEmail])),
				icon: $elm$core$Maybe$Just($author$project$Icons$email),
				onChange: A2($elm$core$Basics$composeR, $author$project$Pages$Crew$CrewMemberRegistrationPage$Email, $author$project$Pages$Crew$CrewMemberRegistrationPage$Changed),
				placeholder: $elm$core$Maybe$Nothing,
				title: 'Email',
				value: email
			});
	});
var $author$project$Pages$Crew$CrewMemberRegistrationPage$Name = function (a) {
	return {$: 'Name', a: a};
};
var $author$project$Pages$Crew$CrewMemberRegistrationPage$viewNameInput = F2(
	function (problems, name) {
		return A2(
			$author$project$StyledElement$emailInput,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					A2($mdgriffith$elm_ui$Element$maximum, 300, $mdgriffith$elm_ui$Element$fill))
				]),
			{
				ariaLabel: 'Name',
				caption: $elm$core$Maybe$Nothing,
				errorCaption: A3(
					$author$project$Errors$inputErrorsFor,
					problems,
					'name',
					_List_fromArray(
						[$author$project$Pages$Crew$CrewMemberRegistrationPage$EmptyName])),
				icon: $elm$core$Maybe$Nothing,
				onChange: A2($elm$core$Basics$composeR, $author$project$Pages$Crew$CrewMemberRegistrationPage$Name, $author$project$Pages$Crew$CrewMemberRegistrationPage$Changed),
				placeholder: $elm$core$Maybe$Nothing,
				title: 'Name',
				value: name
			});
	});
var $author$project$Pages$Crew$CrewMemberRegistrationPage$PhoneNumber = function (a) {
	return {$: 'PhoneNumber', a: a};
};
var $author$project$Icons$phone = $author$project$Icons$iconNamed('images/phone.svg');
var $author$project$Pages$Crew$CrewMemberRegistrationPage$viewPhoneInput = F2(
	function (problems, phone_number) {
		return A2(
			$author$project$StyledElement$textInput,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignTop,
					$mdgriffith$elm_ui$Element$width(
					A2($mdgriffith$elm_ui$Element$maximum, 300, $mdgriffith$elm_ui$Element$fill))
				]),
			{
				ariaLabel: '\'s Phone Number',
				caption: $elm$core$Maybe$Nothing,
				errorCaption: A3(
					$author$project$Errors$inputErrorsFor,
					problems,
					'phone_number',
					_List_fromArray(
						[$author$project$Pages$Crew$CrewMemberRegistrationPage$EmptyPhoneNumber, $author$project$Pages$Crew$CrewMemberRegistrationPage$InvalidPhoneNumber])),
				icon: $elm$core$Maybe$Just($author$project$Icons$phone),
				onChange: A2($elm$core$Basics$composeR, $author$project$Pages$Crew$CrewMemberRegistrationPage$PhoneNumber, $author$project$Pages$Crew$CrewMemberRegistrationPage$Changed),
				placeholder: $elm$core$Maybe$Nothing,
				title: 'Phone Number',
				value: phone_number
			});
	});
var $author$project$Pages$Crew$CrewMemberRegistrationPage$viewRoleDropDown = function (model) {
	var _v0 = $author$project$Pages$Crew$CrewMemberRegistrationPage$routeDropDown(model);
	var dropDown = _v0.a;
	return dropDown;
};
var $author$project$Pages$Crew$CrewMemberRegistrationPage$viewForm = function (model) {
	var form = model.form;
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(32),
				$mdgriffith$elm_ui$Element$width(
				A2(
					$mdgriffith$elm_ui$Element$maximum,
					300,
					A2($mdgriffith$elm_ui$Element$minimum, 300, $mdgriffith$elm_ui$Element$fill))),
				$mdgriffith$elm_ui$Element$alignTop
			]),
		_List_fromArray(
			[
				A2($author$project$Pages$Crew$CrewMemberRegistrationPage$viewNameInput, form.problems, form.name),
				A2($author$project$Pages$Crew$CrewMemberRegistrationPage$viewEmailInput, form.problems, form.email),
				A2($author$project$Pages$Crew$CrewMemberRegistrationPage$viewPhoneInput, form.problems, form.phoneNumber),
				$author$project$Pages$Crew$CrewMemberRegistrationPage$viewRoleDropDown(model),
				$author$project$Pages$Crew$CrewMemberRegistrationPage$viewButton(model.requestState)
			]));
};
var $author$project$Pages$Crew$CrewMemberRegistrationPage$view = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing(40),
						A2($mdgriffith$elm_ui$Element$paddingXY, 24, 8),
						$mdgriffith$elm_ui$Element$alignTop,
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
					]),
				_List_fromArray(
					[
						$author$project$Pages$Crew$CrewMemberRegistrationPage$isEditing(model) ? A2($author$project$Views$Heading$viewHeading, 'Edit Crew Member', $elm$core$Maybe$Nothing) : A2($author$project$Views$Heading$viewHeading, 'Add a Crew Member', $elm$core$Maybe$Nothing),
						function () {
						var _v0 = model.editState;
						if (_v0.$ === 'Just') {
							var state = _v0.a;
							var _v1 = state.requestState;
							switch (_v1.$) {
								case 'Success':
									return $author$project$Pages$Crew$CrewMemberRegistrationPage$viewForm(model);
								case 'Loading':
									return A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
												$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
											]),
										$author$project$Icons$loading(
											_List_fromArray(
												[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY])));
								default:
									return A2(
										$mdgriffith$elm_ui$Element$el,
										A2(
											$elm$core$List$cons,
											$mdgriffith$elm_ui$Element$centerX,
											A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$centerY, $author$project$Style$labelStyle)),
										A2(
											$mdgriffith$elm_ui$Element$paragraph,
											_List_Nil,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$text('Something went wrong, please reload the page')
												])));
							}
						} else {
							return $author$project$Pages$Crew$CrewMemberRegistrationPage$viewForm(model);
						}
					}()
					]))
			]));
};
var $mdgriffith$elm_ui$Element$Lazy$apply3 = F4(
	function (fn, a, b, c) {
		return $mdgriffith$elm_ui$Element$Lazy$embed(
			A3(fn, a, b, c));
	});
var $elm$virtual_dom$VirtualDom$lazy5 = _VirtualDom_lazy5;
var $mdgriffith$elm_ui$Element$Lazy$lazy3 = F4(
	function (fn, a, b, c) {
		return $mdgriffith$elm_ui$Internal$Model$Unstyled(
			A5($elm$virtual_dom$VirtualDom$lazy5, $mdgriffith$elm_ui$Element$Lazy$apply3, fn, a, b, c));
	});
var $author$project$Pages$Crew$CrewMembersPage$DraggedCrewMemberAbove = function (a) {
	return {$: 'DraggedCrewMemberAbove', a: a};
};
var $author$project$Pages$Crew$CrewMembersPage$DroppedCrewMemberOnto = function (a) {
	return {$: 'DroppedCrewMemberOnto', a: a};
};
var $author$project$Pages$Crew$CrewMembersPage$SelectedCrewMember = function (a) {
	return {$: 'SelectedCrewMember', a: a};
};
var $author$project$Pages$Crew$CrewMembersPage$StartedDragging = function (a) {
	return {$: 'StartedDragging', a: a};
};
var $author$project$Pages$Crew$CrewMembersPage$StoppedDragging = function (a) {
	return {$: 'StoppedDragging', a: a};
};
var $author$project$Colors$sassyGrey = A3($mdgriffith$elm_ui$Element$rgb255, 163, 175, 190);
var $author$project$Icons$steeringWheel = function (attrs) {
	return A2(
		$author$project$Icons$iconNamed,
		'images/stearing_wheel.svg',
		A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Element$alpha(1),
			attrs));
};
var $author$project$Pages$Crew$CrewMembersPage$viewCrew = F5(
	function (bus, drivers, assistants, inEditingMode, aboveRole) {
		var viewCrewMemberSlot = function (role) {
			return $mdgriffith$elm_ui$Element$row(
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(8),
							$mdgriffith$elm_ui$Element$Border$dashed,
							$mdgriffith$elm_ui$Element$Border$color($author$project$Colors$sassyGrey),
							$mdgriffith$elm_ui$Element$Border$width(2),
							$mdgriffith$elm_ui$Element$padding(12),
							$mdgriffith$elm_ui$Element$Border$rounded(3),
							aboveRole(role) ? $mdgriffith$elm_ui$Element$Background$color(
							A2($author$project$Colors$withAlpha, $author$project$Colors$darkGreen, 0.2)) : $mdgriffith$elm_ui$Element$mouseOver(_List_Nil)
						]),
					$author$project$Style$labelStyle));
		};
		var viewCrewMember = function (x) {
			return function (provideView) {
				return A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: A2(
							$mdgriffith$elm_ui$Element$row,
							_Utils_ap(
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(8),
										$mdgriffith$elm_ui$Element$Border$width(2),
										$mdgriffith$elm_ui$Element$padding(12),
										$mdgriffith$elm_ui$Element$Border$rounded(3),
										$mdgriffith$elm_ui$Element$Background$color(
										A2($author$project$Colors$withAlpha, $author$project$Colors$darkGreen, 0.2))
									]),
								_Utils_ap(
									$author$project$Views$DragAndDrop$draggable(
										{
											onDragEnd: $author$project$Pages$Crew$CrewMembersPage$StoppedDragging(x),
											onDragStart: $author$project$Pages$Crew$CrewMembersPage$StartedDragging(x)
										}),
									$author$project$Style$labelStyle)),
							provideView),
						onPress: $elm$core$Maybe$Just(
							$author$project$Pages$Crew$CrewMembersPage$SelectedCrewMember(
								$elm$core$Maybe$Just(x)))
					});
			};
		};
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(16),
					$mdgriffith$elm_ui$Element$alignBottom
				]),
			_List_fromArray(
				[
					function () {
					var _v0 = $elm$core$List$head(drivers);
					if (_v0.$ === 'Just') {
						var driver = _v0.a;
						return A2(
							viewCrewMember,
							driver,
							_List_fromArray(
								[
									$author$project$Icons$steeringWheel(
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$alpha(0.54)
										])),
									$mdgriffith$elm_ui$Element$text(driver.name)
								]));
					} else {
						return A2(
							viewCrewMemberSlot,
							$author$project$Models$CrewMember$Driver,
							_List_fromArray(
								[
									$author$project$Icons$steeringWheel(
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$alpha(0.54)
										])),
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$centerY]),
									$mdgriffith$elm_ui$Element$text('Assign driver'))
								]));
					}
				}(),
					function () {
					var _v1 = $elm$core$List$head(assistants);
					if (_v1.$ === 'Just') {
						var assistant = _v1.a;
						return A2(
							viewCrewMember,
							assistant,
							_List_fromArray(
								[
									$author$project$Icons$people(
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$alpha(0.54)
										])),
									$mdgriffith$elm_ui$Element$text(assistant.name)
								]));
					} else {
						return A2(
							viewCrewMemberSlot,
							$author$project$Models$CrewMember$Assistant,
							_List_fromArray(
								[
									$author$project$Icons$people(
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$alpha(0.54)
										])),
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$centerY]),
									$mdgriffith$elm_ui$Element$text('Assign assistant'))
								]));
					}
				}()
				]));
	});
var $author$project$Pages$Crew$CrewMembersPage$viewBus = F4(
	function (editedData, edits, inEditingMode, bus) {
		var crew = A2(
			$elm$core$List$filter,
			function (c) {
				return _Utils_eq(
					c.bus,
					$elm$core$Maybe$Just(bus.id));
			},
			editedData.crew);
		var drivers = A2(
			$elm$core$List$filter,
			function (x) {
				return _Utils_eq(x.role, $author$project$Models$CrewMember$Driver);
			},
			crew);
		var assistants = A2(
			$elm$core$List$filter,
			function (x) {
				return _Utils_eq(x.role, $author$project$Models$CrewMember$Assistant);
			},
			crew);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				inEditingMode ? $author$project$Views$DragAndDrop$droppable(
					{
						onDragOver: $author$project$Pages$Crew$CrewMembersPage$DraggedCrewMemberAbove(bus.id),
						onDrop: $author$project$Pages$Crew$CrewMembersPage$DroppedCrewMemberOnto(bus)
					}) : _List_Nil,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Border$width(2),
						$mdgriffith$elm_ui$Element$padding(24),
						$mdgriffith$elm_ui$Element$alignTop,
						$mdgriffith$elm_ui$Element$alignLeft,
						$mdgriffith$elm_ui$Element$spacing(24),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
					])),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(10)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(8)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_Utils_ap(
										$author$project$Style$headerStyle,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$padding(0)
											])),
									$mdgriffith$elm_ui$Element$text(bus.numberPlate)),
									A2(
									$mdgriffith$elm_ui$Element$el,
									$author$project$Style$labelStyle,
									function () {
										var _v0 = bus.route;
										if (_v0.$ === 'Just') {
											var route = _v0.a;
											return $mdgriffith$elm_ui$Element$text(route.name);
										} else {
											return $mdgriffith$elm_ui$Element$text('Route not assigned');
										}
									}())
								])),
							function () {
							var _v1 = bus.vehicleType;
							switch (_v1.$) {
								case 'Shuttle':
									return $author$project$Icons$shuttle(
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$scale(0.8)
											]));
								case 'Van':
									return $author$project$Icons$van(
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$scale(0.8)
											]));
								default:
									return $author$project$Icons$bus(
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$scale(0.8)
											]));
							}
						}()
						])),
					A5(
					$author$project$Pages$Crew$CrewMembersPage$viewCrew,
					bus,
					drivers,
					assistants,
					inEditingMode,
					function (role) {
						return _Utils_eq(
							edits.draggedAbove,
							$elm$core$Maybe$Just(bus.id)) && _Utils_eq(
							A2(
								$elm$core$Maybe$andThen,
								A2(
									$elm$core$Basics$composeR,
									function ($) {
										return $.role;
									},
									$elm$core$Maybe$Just),
								edits.draggingCrewMember),
							$elm$core$Maybe$Just(role));
					})
				]));
	});
var $author$project$Pages$Crew$CrewMembersPage$viewBuses = F3(
	function (editedData, edits, inEditingMode) {
		return A2(
			$mdgriffith$elm_ui$Element$wrappedRow,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignTop,
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$fillPortion(2)),
					$mdgriffith$elm_ui$Element$spacing(24)
				]),
			A2(
				$elm$core$List$map,
				A3($author$project$Pages$Crew$CrewMembersPage$viewBus, editedData, edits, inEditingMode),
				editedData.buses));
	});
var $author$project$Pages$Crew$CrewMembersPage$DraggedCrewMemberAboveUnassigned = {$: 'DraggedCrewMemberAboveUnassigned'};
var $author$project$Pages$Crew$CrewMembersPage$DroppedCrewMemberOntoUnassigned = {$: 'DroppedCrewMemberOntoUnassigned'};
var $author$project$Pages$Crew$CrewMembersPage$viewUnassignedCrewMembers = F3(
	function (data, windowHeight, inEditingMode) {
		var unassignedCrewMembers = A2(
			$elm$core$List$filter,
			function (c) {
				return _Utils_eq(c.bus, $elm$core$Maybe$Nothing);
			},
			data.crew);
		var unassignedDrivers = A2(
			$elm$core$List$filter,
			function (x) {
				return _Utils_eq(x.role, $author$project$Models$CrewMember$Driver);
			},
			unassignedCrewMembers);
		var unassignedAssistants = A2(
			$elm$core$List$filter,
			function (x) {
				return _Utils_eq(x.role, $author$project$Models$CrewMember$Assistant);
			},
			unassignedCrewMembers);
		var listStyle = _Utils_ap(
			$author$project$Style$header2Style,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Border$color($author$project$Colors$darkGreen),
					$mdgriffith$elm_ui$Element$Border$width(2),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$scrollbarY,
					$mdgriffith$elm_ui$Element$spacing(2),
					$mdgriffith$elm_ui$Element$padding(0),
					$mdgriffith$elm_ui$Element$Font$color($author$project$Colors$darkGreen)
				]));
		var highlightAttrs = _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$darkGreen),
				$mdgriffith$elm_ui$Element$Font$color($author$project$Colors$white)
			]);
		var textStyle = function (x) {
			return function (provideView) {
				return A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					{
						label: A2(
							$mdgriffith$elm_ui$Element$el,
							_Utils_ap(
								inEditingMode ? $author$project$Views$DragAndDrop$draggable(
									{
										onDragEnd: $author$project$Pages$Crew$CrewMembersPage$StoppedDragging(x),
										onDragStart: $author$project$Pages$Crew$CrewMembersPage$StartedDragging(x)
									}) : _List_Nil,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$padding(8),
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$mouseOver(highlightAttrs)
									])),
							provideView),
						onPress: $elm$core$Maybe$Just(
							$author$project$Pages$Crew$CrewMembersPage$SelectedCrewMember(
								$elm$core$Maybe$Just(x)))
					});
			};
		};
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing(8)
					]),
				inEditingMode ? $author$project$Views$DragAndDrop$droppable(
					{onDragOver: $author$project$Pages$Crew$CrewMembersPage$DraggedCrewMemberAboveUnassigned, onDrop: $author$project$Pages$Crew$CrewMembersPage$DroppedCrewMemberOntoUnassigned}) : _List_Nil),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height(
							A2($mdgriffith$elm_ui$Element$maximum, (windowHeight / 2) | 0, $mdgriffith$elm_ui$Element$fill)),
							$mdgriffith$elm_ui$Element$alignTop
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							$author$project$Style$header2Style,
							$mdgriffith$elm_ui$Element$text('Unassigned Drivers')),
							A2(
							$mdgriffith$elm_ui$Element$column,
							listStyle,
							A2(
								$elm$core$List$map,
								function (x) {
									return A2(
										textStyle,
										x,
										$mdgriffith$elm_ui$Element$text(x.name));
								},
								unassignedDrivers))
						])),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height(
							A2($mdgriffith$elm_ui$Element$maximum, (windowHeight / 2) | 0, $mdgriffith$elm_ui$Element$fill)),
							$mdgriffith$elm_ui$Element$alignTop
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							$author$project$Style$header2Style,
							$mdgriffith$elm_ui$Element$text('Unassigned Assistants')),
							A2(
							$mdgriffith$elm_ui$Element$column,
							listStyle,
							A2(
								$elm$core$List$map,
								function (x) {
									return A2(
										textStyle,
										x,
										$mdgriffith$elm_ui$Element$text(x.name));
								},
								unassignedAssistants))
						]))
				]));
	});
var $author$project$Pages$Crew$CrewMembersPage$viewBody = function (model) {
	var _v0 = model.data;
	switch (_v0.$) {
		case 'Success':
			var data = _v0.a;
			var editedData = A2($author$project$Models$CrewMember$applyChanges, model.edits.changes, data);
			return A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing(40)
					]),
				_List_fromArray(
					[
						A4($mdgriffith$elm_ui$Element$Lazy$lazy3, $author$project$Pages$Crew$CrewMembersPage$viewBuses, editedData, model.edits, model.inEditingMode),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(60))
							]),
						$mdgriffith$elm_ui$Element$none),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(2)),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px((model.height / 2) | 0)),
								$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$darkness)
							]),
						$mdgriffith$elm_ui$Element$none),
						A4($mdgriffith$elm_ui$Element$Lazy$lazy3, $author$project$Pages$Crew$CrewMembersPage$viewUnassignedCrewMembers, editedData, model.height, model.inEditingMode)
					]));
		case 'Failure':
			return A2(
				$mdgriffith$elm_ui$Element$el,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$centerX,
					A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$centerY, $author$project$Style$labelStyle)),
				A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_Nil,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('Something went wrong, please reload the page')
						])));
		default:
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
					]),
				$author$project$Icons$loading(
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY])));
	}
};
var $author$project$Pages$Crew$CrewMembersPage$CancelEdits = {$: 'CancelEdits'};
var $author$project$Pages$Crew$CrewMembersPage$SaveChanges = {$: 'SaveChanges'};
var $author$project$Pages$Crew$CrewMembersPage$StartEditing = {$: 'StartEditing'};
var $author$project$Icons$close = $author$project$Icons$iconNamed('images/close.svg');
var $author$project$Icons$edit = function (attrs) {
	return A2(
		$author$project$Icons$iconNamed,
		'images/edit.svg',
		A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Element$alpha(1),
			attrs));
};
var $author$project$Icons$save = $author$project$Icons$iconNamed('images/save.svg');
var $author$project$Pages$Crew$CrewMembersPage$viewHeading = function (_v0) {
	var data = _v0.data;
	var inEditingMode = _v0.inEditingMode;
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(10)
			]),
		inEditingMode ? A2(
			$elm$core$List$cons,
			A2(
				$mdgriffith$elm_ui$Element$column,
				_List_Nil,
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						$author$project$Style$headerStyle,
						$mdgriffith$elm_ui$Element$text('Editing Crew')),
						A2(
						$mdgriffith$elm_ui$Element$el,
						$author$project$Style$captionLabelStyle,
						$mdgriffith$elm_ui$Element$text('Drag and drop crew members to reassign them'))
					])),
			function () {
				switch (data.$) {
					case 'Success':
						return _List_fromArray(
							[
								A2(
								$author$project$StyledElement$button,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Border$width(3),
										$mdgriffith$elm_ui$Element$Border$color($author$project$Colors$purple),
										$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$white),
										$mdgriffith$elm_ui$Element$alignRight
									]),
								{
									label: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(8)
											]),
										_List_fromArray(
											[
												$author$project$Icons$close(
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$alpha(1),
														$author$project$Colors$fillPurple
													])),
												A2(
												$mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$centerY,
														$mdgriffith$elm_ui$Element$Font$color($author$project$Colors$purple)
													]),
												$mdgriffith$elm_ui$Element$text('Cancel'))
											])),
									onPress: $elm$core$Maybe$Just($author$project$Pages$Crew$CrewMembersPage$CancelEdits)
								}),
								A2(
								$author$project$StyledElement$button,
								_List_fromArray(
									[$mdgriffith$elm_ui$Element$alignRight]),
								{
									label: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(8)
											]),
										_List_fromArray(
											[
												$author$project$Icons$save(
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$alpha(1),
														$author$project$Colors$fillWhite
													])),
												A2(
												$mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[$mdgriffith$elm_ui$Element$centerY]),
												$mdgriffith$elm_ui$Element$text('Save changes'))
											])),
									onPress: $elm$core$Maybe$Just($author$project$Pages$Crew$CrewMembersPage$SaveChanges)
								})
							]);
					case 'Failure':
						return _List_fromArray(
							[
								A2(
								$author$project$StyledElement$button,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Border$width(3),
										$mdgriffith$elm_ui$Element$Border$color($author$project$Colors$purple),
										$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$white),
										$mdgriffith$elm_ui$Element$alignRight
									]),
								{
									label: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(8)
											]),
										_List_fromArray(
											[
												$author$project$Icons$close(
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$alpha(1),
														$author$project$Colors$fillPurple
													])),
												A2(
												$mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$centerY,
														$mdgriffith$elm_ui$Element$Font$color($author$project$Colors$purple)
													]),
												$mdgriffith$elm_ui$Element$text('Cancel'))
											])),
									onPress: $elm$core$Maybe$Just($author$project$Pages$Crew$CrewMembersPage$CancelEdits)
								}),
								A2(
								$author$project$StyledElement$button,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$alignRight,
										$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$errorRed)
									]),
								{
									label: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(8)
											]),
										_List_fromArray(
											[
												$author$project$Icons$save(
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$alpha(1),
														$author$project$Colors$fillWhite
													])),
												A2(
												$mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[$mdgriffith$elm_ui$Element$centerY]),
												$mdgriffith$elm_ui$Element$text('Try Again'))
											])),
									onPress: $elm$core$Maybe$Just($author$project$Pages$Crew$CrewMembersPage$SaveChanges)
								})
							]);
					default:
						return _List_fromArray(
							[
								$author$project$Icons$loading(
								_List_fromArray(
									[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$alignRight]))
							]);
				}
			}()) : _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				$author$project$Style$headerStyle,
				$mdgriffith$elm_ui$Element$text('Crew')),
				A2(
				$author$project$StyledElement$button,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Border$width(3),
						$mdgriffith$elm_ui$Element$Border$color($author$project$Colors$purple),
						$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$white),
						$mdgriffith$elm_ui$Element$alignRight
					]),
				{
					label: A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(8)
							]),
						_List_fromArray(
							[
								$author$project$Icons$edit(
								_List_fromArray(
									[$author$project$Colors$fillPurple])),
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$centerY,
										$mdgriffith$elm_ui$Element$Font$color($author$project$Colors$purple)
									]),
								$mdgriffith$elm_ui$Element$text('Re-assign'))
							])),
					onPress: $elm$core$Maybe$Just($author$project$Pages$Crew$CrewMembersPage$StartEditing)
				}),
				A2(
				$author$project$StyledElement$buttonLink,
				_List_fromArray(
					[$mdgriffith$elm_ui$Element$alignRight]),
				{
					label: A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(8)
							]),
						_List_fromArray(
							[
								$author$project$Icons$add(
								_List_fromArray(
									[$author$project$Colors$fillWhite])),
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[$mdgriffith$elm_ui$Element$centerY]),
								$mdgriffith$elm_ui$Element$text('Add Crew Member'))
							])),
					route: $author$project$Navigation$CrewMemberRegistration
				})
			]));
};
var $author$project$Pages$Crew$CrewMembersPage$EditCrewMember = function (a) {
	return {$: 'EditCrewMember', a: a};
};
var $author$project$Style$animatesNone = $author$project$Style$classAttr('animatesNone');
var $author$project$Models$CrewMember$roleToString = function (role) {
	if (role.$ === 'Driver') {
		return 'Driver';
	} else {
		return 'Assistant';
	}
};
var $author$project$Pages$Crew$CrewMembersPage$viewOverlay = function (_v0) {
	var selectedCrewMember = _v0.selectedCrewMember;
	return A2(
		$mdgriffith$elm_ui$Element$el,
		A2(
			$elm$core$List$cons,
			$author$project$Style$animatesAll,
			_Utils_eq(selectedCrewMember, $elm$core$Maybe$Nothing) ? _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alpha(0)
				]) : _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alpha(1),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
				])),
		function () {
			if (selectedCrewMember.$ === 'Nothing') {
				return $mdgriffith$elm_ui$Element$none;
			} else {
				var crewMember = selectedCrewMember.a;
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$behindContent(
							A2(
								$mdgriffith$elm_ui$Element$Input$button,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$Background$color(
										A2($author$project$Colors$withAlpha, $author$project$Colors$black, 0.6)),
										$author$project$Style$blurredStyle
									]),
								{
									label: $mdgriffith$elm_ui$Element$none,
									onPress: $elm$core$Maybe$Just(
										$author$project$Pages$Crew$CrewMembersPage$SelectedCrewMember($elm$core$Maybe$Nothing))
								})),
							$mdgriffith$elm_ui$Element$inFront(
							A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$white),
										$mdgriffith$elm_ui$Element$Border$rounded(5),
										$author$project$Style$elevated2,
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$centerY,
										$mdgriffith$elm_ui$Element$width(
										A2($mdgriffith$elm_ui$Element$maximum, 600, $mdgriffith$elm_ui$Element$fill)),
										$author$project$Style$animatesNone
									]),
								A2(
									$mdgriffith$elm_ui$Element$column,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$spacing(8),
											A2($mdgriffith$elm_ui$Element$paddingXY, 0, 24),
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
										]),
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
													A2($mdgriffith$elm_ui$Element$paddingXY, 8, 0)
												]),
											_List_fromArray(
												[
													A2(
													$mdgriffith$elm_ui$Element$column,
													_List_fromArray(
														[
															A2($mdgriffith$elm_ui$Element$paddingXY, 20, 0),
															$mdgriffith$elm_ui$Element$spacing(8)
														]),
													_List_fromArray(
														[
															A2(
															$mdgriffith$elm_ui$Element$el,
															_Utils_ap(
																$author$project$Style$header2Style,
																_List_fromArray(
																	[
																		$mdgriffith$elm_ui$Element$padding(0)
																	])),
															$mdgriffith$elm_ui$Element$text(crewMember.name)),
															A2(
															$mdgriffith$elm_ui$Element$el,
															$author$project$Style$captionLabelStyle,
															$mdgriffith$elm_ui$Element$text(
																$author$project$Models$CrewMember$roleToString(crewMember.role)))
														])),
													A2(
													$author$project$StyledElement$button,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$white),
															$mdgriffith$elm_ui$Element$alignRight,
															$mdgriffith$elm_ui$Element$centerY,
															$mdgriffith$elm_ui$Element$mouseOver(
															_List_fromArray(
																[
																	$mdgriffith$elm_ui$Element$Background$color(
																	A2($author$project$Colors$withAlpha, $author$project$Colors$purple, 0.2))
																]))
														]),
													{
														label: A2(
															$mdgriffith$elm_ui$Element$row,
															_List_fromArray(
																[
																	$mdgriffith$elm_ui$Element$spacing(8)
																]),
															_List_fromArray(
																[
																	$author$project$Icons$edit(
																	_List_fromArray(
																		[$author$project$Colors$fillPurple])),
																	A2(
																	$mdgriffith$elm_ui$Element$el,
																	_List_fromArray(
																		[
																			$mdgriffith$elm_ui$Element$centerY,
																			$mdgriffith$elm_ui$Element$Font$color($author$project$Colors$purple)
																		]),
																	$mdgriffith$elm_ui$Element$text('Edit details'))
																])),
														onPress: $elm$core$Maybe$Just(
															$author$project$Pages$Crew$CrewMembersPage$EditCrewMember(crewMember))
													})
												])),
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
													$mdgriffith$elm_ui$Element$height(
													$mdgriffith$elm_ui$Element$px(2)),
													$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$darkness)
												]),
											$mdgriffith$elm_ui$Element$none),
											A2(
											$mdgriffith$elm_ui$Element$column,
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Element$paddingXY, 20, 20),
													$mdgriffith$elm_ui$Element$spacing(16)
												]),
											_List_fromArray(
												[
													A2(
													$mdgriffith$elm_ui$Element$el,
													$author$project$Style$labelStyle,
													$mdgriffith$elm_ui$Element$text(crewMember.phoneNumber)),
													A2(
													$mdgriffith$elm_ui$Element$el,
													$author$project$Style$labelStyle,
													$mdgriffith$elm_ui$Element$text(crewMember.email))
												]))
										]))))
						]),
					$mdgriffith$elm_ui$Element$none);
			}
		}());
};
var $author$project$Pages$Crew$CrewMembersPage$view = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px(model.height)),
				$mdgriffith$elm_ui$Element$spacing(40),
				A2($mdgriffith$elm_ui$Element$paddingXY, 90, 70),
				$mdgriffith$elm_ui$Element$inFront(
				$author$project$Pages$Crew$CrewMembersPage$viewOverlay(model))
			]),
		_List_fromArray(
			[
				$author$project$Pages$Crew$CrewMembersPage$viewHeading(model),
				$author$project$Pages$Crew$CrewMembersPage$viewBody(model)
			]));
};
var $author$project$Pages$Devices$DeviceRegistrationPage$ToggleCamera = {$: 'ToggleCamera'};
var $author$project$Icons$camera = function (attrs) {
	return A2(
		$author$project$Icons$iconNamed,
		'images/camera.svg',
		A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Element$alpha(1),
			attrs));
};
var $author$project$Icons$cameraOff = function (attrs) {
	return A2(
		$author$project$Icons$iconNamed,
		'images/camera_off.svg',
		A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Element$alpha(1),
			attrs));
};
var $author$project$Pages$Devices$DeviceRegistrationPage$SubmitButtonMsg = {$: 'SubmitButtonMsg'};
var $author$project$Pages$Devices$DeviceRegistrationPage$viewButton = function (enabled) {
	return A2(
		$author$project$StyledElement$button,
		A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Element$centerX,
			enabled ? _List_Nil : _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Background$color(
					A2($author$project$Colors$withAlpha, $author$project$Colors$black, 0.5)),
					$mdgriffith$elm_ui$Element$mouseOver(_List_Nil),
					$mdgriffith$elm_ui$Element$pointer
				])),
		{
			label: $mdgriffith$elm_ui$Element$text('Register'),
			onPress: enabled ? $elm$core$Maybe$Just($author$project$Pages$Devices$DeviceRegistrationPage$SubmitButtonMsg) : $elm$core$Maybe$Nothing
		});
};
var $author$project$Pages$Devices$DeviceRegistrationPage$ChangedDeviceSerial = function (a) {
	return {$: 'ChangedDeviceSerial', a: a};
};
var $author$project$Pages$Devices$DeviceRegistrationPage$viewDeviceSerialInput = F2(
	function (serial, problems) {
		var inputError = function (errorText) {
			return $author$project$Errors$InputError(
				_List_fromArray(
					[errorText]));
		};
		var errorMapper = $author$project$Errors$customInputErrorsFor(problems);
		return A2(
			$author$project$StyledElement$textInput,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					A2($mdgriffith$elm_ui$Element$maximum, 300, $mdgriffith$elm_ui$Element$fill)),
					$mdgriffith$elm_ui$Element$alignTop
				]),
			{
				ariaLabel: 'Device Serial',
				caption: $elm$core$Maybe$Just('You can find this on the side of the device'),
				errorCaption: A3(
					errorMapper,
					'imei',
					'serial',
					_List_fromArray(
						[$author$project$Pages$Devices$DeviceRegistrationPage$InvalidSerial, $author$project$Pages$Devices$DeviceRegistrationPage$CameraOpenError])),
				icon: $elm$core$Maybe$Nothing,
				onChange: $author$project$Pages$Devices$DeviceRegistrationPage$ChangedDeviceSerial,
				placeholder: $elm$core$Maybe$Nothing,
				title: 'Device Serial',
				value: serial
			});
	});
var $author$project$Style$animatesAll20Seconds = $author$project$Style$classAttr('animatesAll20Seconds');
var $elm$html$Html$Attributes$autoplay = $elm$html$Html$Attributes$boolProperty('autoplay');
var $elm$html$Html$canvas = _VirtualDom_node('canvas');
var $elm$html$Html$Attributes$height = function (n) {
	return A2(
		_VirtualDom_attribute,
		'height',
		$elm$core$String$fromInt(n));
};
var $mdgriffith$elm_ui$Element$html = $mdgriffith$elm_ui$Internal$Model$unstyled;
var $elm$html$Html$Attributes$width = function (n) {
	return A2(
		_VirtualDom_attribute,
		'width',
		$elm$core$String$fromInt(n));
};
var $author$project$Pages$Devices$DeviceRegistrationPage$viewScanner = function (cameraState) {
	var cameraStyle = (!_Utils_eq(cameraState, $author$project$Pages$Devices$DeviceRegistrationPage$CameraClosed)) ? _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Border$color(
			A3($mdgriffith$elm_ui$Element$rgb255, 97, 165, 145)),
			$mdgriffith$elm_ui$Element$moveUp(2),
			$mdgriffith$elm_ui$Element$Border$shadow(
			{
				blur: 20,
				color: A4($mdgriffith$elm_ui$Element$rgba255, 0, 0, 0, 0.3),
				offset: _Utils_Tuple2(0, 12),
				size: 0
			})
		]) : _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Border$color(
			A4($mdgriffith$elm_ui$Element$rgba255, 197, 197, 197, 0.5))
		]);
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(20)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
							$mdgriffith$elm_ui$Element$Background$color(
							A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0)),
							$mdgriffith$elm_ui$Element$Border$solid,
							$mdgriffith$elm_ui$Element$Border$width(1),
							$mdgriffith$elm_ui$Element$Border$color($author$project$Colors$purple),
							$mdgriffith$elm_ui$Element$inFront(
							_Utils_eq(cameraState, $author$project$Pages$Devices$DeviceRegistrationPage$CameraClosing) ? A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$Background$color(
										A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.7))
									]),
								$author$project$Icons$loading(
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$centerX,
											$mdgriffith$elm_ui$Element$centerY,
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(46)),
											$mdgriffith$elm_ui$Element$height(
											$mdgriffith$elm_ui$Element$px(46))
										]))) : $mdgriffith$elm_ui$Element$none)
						]),
					_Utils_ap(
						(!_Utils_eq(cameraState, $author$project$Pages$Devices$DeviceRegistrationPage$CameraOpening)) ? _List_fromArray(
							[$author$project$Style$animatesAllDelayed]) : _List_Nil,
						cameraStyle)),
				A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink)
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$html(
							A2(
								$elm$html$Html$canvas,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$id('camera-canvas'),
										$elm$html$Html$Attributes$height(0),
										$elm$html$Html$Attributes$width(0),
										$elm$html$Html$Attributes$autoplay(true)
									]),
								_List_Nil)),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_Utils_ap(
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(4)),
										$mdgriffith$elm_ui$Element$alignBottom,
										$mdgriffith$elm_ui$Element$alignLeft,
										$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$teal)
									]),
								_Utils_eq(cameraState, $author$project$Pages$Devices$DeviceRegistrationPage$CameraOpen) ? _List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$author$project$Style$animatesAll20Seconds
									]) : _List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(0)),
										$author$project$Style$animatesAll
									])),
							$mdgriffith$elm_ui$Element$none)
						])))
			]));
};
var $author$project$Pages$Devices$DeviceRegistrationPage$viewForm = function (model) {
	var form = model.form;
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				$mdgriffith$elm_ui$Element$spacing(36)
			]),
		_List_fromArray(
			[
				(!_Utils_eq(model.cameraState, $author$project$Pages$Devices$DeviceRegistrationPage$CameraClosed)) ? $author$project$Pages$Devices$DeviceRegistrationPage$viewScanner(model.cameraState) : $mdgriffith$elm_ui$Element$none,
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(36),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink)
					]),
				_List_fromArray(
					[
						A2($author$project$Pages$Devices$DeviceRegistrationPage$viewDeviceSerialInput, form.serial, form.problems),
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$padding(8),
								$mdgriffith$elm_ui$Element$centerY,
								$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$purple),
								$mdgriffith$elm_ui$Element$Border$rounded(8)
							]),
						{
							label: A2(
								$mdgriffith$elm_ui$Element$el,
								_List_Nil,
								(!_Utils_eq(model.cameraState, $author$project$Pages$Devices$DeviceRegistrationPage$CameraClosed)) ? $author$project$Icons$cameraOff(_List_Nil) : $author$project$Icons$camera(_List_Nil)),
							onPress: $elm$core$Maybe$Just($author$project$Pages$Devices$DeviceRegistrationPage$ToggleCamera)
						})
					])),
				_Utils_eq(model.preselectedBus, $elm$core$Maybe$Nothing) ? $author$project$StyledElement$toDropDownView(
				$author$project$Pages$Devices$DeviceRegistrationPage$busDropdown(model)) : $mdgriffith$elm_ui$Element$none,
				$author$project$Pages$Devices$DeviceRegistrationPage$viewButton(
				!_Utils_eq(model.form.selectedBus, $elm$core$Maybe$Nothing))
			]));
};
var $author$project$Pages$Devices$DeviceRegistrationPage$viewBody = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(40),
				A2($mdgriffith$elm_ui$Element$paddingXY, 24, 8),
				$mdgriffith$elm_ui$Element$alignTop
			]),
		_List_fromArray(
			[
				A2($author$project$Views$Heading$viewHeading, 'Register Your Device', $elm$core$Maybe$Nothing),
				$author$project$Pages$Devices$DeviceRegistrationPage$viewForm(model)
			]));
};
var $author$project$Icons$qrBox = function (attrs) {
	return A2(
		$mdgriffith$elm_ui$Element$image,
		_Utils_ap(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(506)),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(286))
				]),
			attrs),
		{description: '', src: 'images/qrBox.svg'});
};
var $author$project$Pages$Devices$DeviceRegistrationPage$viewScanExplanation = A2(
	$mdgriffith$elm_ui$Element$column,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$padding(24),
			$mdgriffith$elm_ui$Element$spacing(20)
		]),
	_List_fromArray(
		[
			$author$project$Icons$qrBox(_List_Nil),
			A2(
			$mdgriffith$elm_ui$Element$column,
			A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$centerX, $author$project$Style$labelStyle),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					$mdgriffith$elm_ui$Element$text('If you have a webcam,')),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					$mdgriffith$elm_ui$Element$text('you can scan the QR Code on the side of the box'))
				]))
		]));
var $author$project$Pages$Devices$DeviceRegistrationPage$view = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spaceEvenly
			]),
		_List_fromArray(
			[
				$author$project$Pages$Devices$DeviceRegistrationPage$viewBody(model),
				$author$project$Pages$Devices$DeviceRegistrationPage$viewScanExplanation
			]));
};
var $author$project$Style$tableElementStyle = _Utils_ap(
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Region$heading(4),
			$mdgriffith$elm_ui$Element$Font$size(18),
			$mdgriffith$elm_ui$Element$Font$color(
			A3($mdgriffith$elm_ui$Element$rgb255, 96, 96, 96)),
			$mdgriffith$elm_ui$Element$alignLeft
		]),
	$author$project$Style$defaultFontFace);
var $author$project$Pages$Devices$DevicesPage$viewDevicesTable = function (devices) {
	var tableHeader = function (text) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			$author$project$Style$tableHeaderStyle,
			$mdgriffith$elm_ui$Element$text(
				$elm$core$String$toUpper(text)));
	};
	var rowTextStyle = A2(
		$elm$core$List$cons,
		$mdgriffith$elm_ui$Element$width(
			A2($mdgriffith$elm_ui$Element$minimum, 220, $mdgriffith$elm_ui$Element$fill)),
		$author$project$Style$tableElementStyle);
	return A2(
		$mdgriffith$elm_ui$Element$table,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(20)
			]),
		{
			columns: _List_fromArray(
				[
					{
					header: tableHeader('IMEI'),
					view: function (device) {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							rowTextStyle,
							$mdgriffith$elm_ui$Element$text(device.imei));
					},
					width: $mdgriffith$elm_ui$Element$shrink
				},
					{
					header: tableHeader('BUS'),
					view: function (device) {
						var _v0 = device.bus;
						if (_v0.$ === 'Just') {
							var bus = _v0.a;
							return A2(
								$author$project$StyledElement$textLink,
								_List_Nil,
								{
									label: $mdgriffith$elm_ui$Element$text(bus.numberPlate),
									route: A2(
										$author$project$Navigation$Bus,
										bus.id,
										$elm$core$Maybe$Just('Device'))
								});
						} else {
							return $mdgriffith$elm_ui$Element$none;
						}
					},
					width: $mdgriffith$elm_ui$Element$shrink
				}
				]),
			data: devices
		});
};
var $author$project$Pages$Devices$DevicesPage$viewBody = function (model) {
	var _v0 = model.devices;
	switch (_v0.$) {
		case 'Success':
			var devices = _v0.a;
			return $author$project$Pages$Devices$DevicesPage$viewDevicesTable(devices);
		case 'NotAsked':
			return $mdgriffith$elm_ui$Element$text('Initialising.');
		case 'Loading':
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
					]),
				$author$project$Icons$loading(
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY])));
		default:
			var error = _v0.a;
			var _v1 = $author$project$Errors$decodeErrors(error);
			var apiError = _v1.a;
			return $mdgriffith$elm_ui$Element$text(
				$author$project$Errors$errorToString(apiError));
	}
};
var $author$project$Pages$Devices$DevicesPage$view = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(40),
				A2($mdgriffith$elm_ui$Element$paddingXY, 24, 8)
			]),
		_List_fromArray(
			[
				A2(
				$author$project$Views$Heading$viewHeading,
				'*Devices****',
				$elm$core$Maybe$Just('Place this within the bus')),
				A2(
				$mdgriffith$elm_ui$Element$column,
				_List_Nil,
				_List_fromArray(
					[
						A2(
						$author$project$StyledElement$buttonLink,
						_List_Nil,
						{
							label: $mdgriffith$elm_ui$Element$text('Add a device'),
							route: $author$project$Navigation$DeviceRegistration
						}),
						$author$project$Pages$Devices$DevicesPage$viewBody(model)
					]))
			]));
};
var $author$project$Pages$Home$view = A2(
	$mdgriffith$elm_ui$Element$column,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
			$mdgriffith$elm_ui$Element$spacing(40),
			A2($mdgriffith$elm_ui$Element$paddingXY, 24, 8)
		]),
	_List_fromArray(
		[
			A2($author$project$Views$Heading$viewHeading, 'Home', $elm$core$Maybe$Nothing),
			A2(
			$mdgriffith$elm_ui$Element$el,
			_List_Nil,
			$mdgriffith$elm_ui$Element$text('Welcome'))
		]));
var $author$project$Pages$Households$HouseholdRegistrationPage$googleMap_search = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$padding(40),
				$mdgriffith$elm_ui$Element$width(
				A2($mdgriffith$elm_ui$Element$maximum, 400, $mdgriffith$elm_ui$Element$fill))
			]),
		$author$project$StyledElement$toDropDownView(
			$author$project$Pages$Households$HouseholdRegistrationPage$gmapDropDown(model)));
};
var $author$project$Pages$Households$HouseholdRegistrationPage$googleMap = function (model) {
	var hasMapError = A2(
		$elm$core$List$any,
		function (x) {
			if (x.$ === 'ClientSideError') {
				var y = x.a;
				return _Utils_eq(y, $author$project$Pages$Households$HouseholdRegistrationPage$EmptyHomeLocation) || _Utils_eq(y, $author$project$Pages$Households$HouseholdRegistrationPage$EmptyPickupLocation);
			} else {
				return false;
			}
		},
		model.form.problems);
	var mapBorderStyle = hasMapError ? _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Border$color($author$project$Colors$errorRed),
			$mdgriffith$elm_ui$Element$Border$width(2),
			$mdgriffith$elm_ui$Element$padding(2)
		]) : _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Border$color($author$project$Colors$white),
			$mdgriffith$elm_ui$Element$Border$width(2),
			$mdgriffith$elm_ui$Element$padding(2)
		]);
	var mapCaptionStyle = hasMapError ? $author$project$Style$errorStyle : $author$project$Style$captionLabelStyle;
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(8)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(400)),
						$mdgriffith$elm_ui$Element$inFront(
						$author$project$Pages$Households$HouseholdRegistrationPage$googleMap_search(model))
					]),
				$author$project$StyledElement$googleMap(
					_Utils_ap(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Border$width(1)
							]),
						mapBorderStyle))),
				A2(
				$mdgriffith$elm_ui$Element$el,
				mapCaptionStyle,
				$mdgriffith$elm_ui$Element$text('Click on the map to mark the home location'))
			]));
};
var $author$project$Pages$Households$HouseholdRegistrationPage$SubmitButtonMsg = {$: 'SubmitButtonMsg'};
var $author$project$Pages$Households$HouseholdRegistrationPage$viewButton = A2(
	$mdgriffith$elm_ui$Element$el,
	_Utils_ap(
		$author$project$Style$labelStyle,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$paddingEach(
				_Utils_update(
					$author$project$Style$edges,
					{right: 24}))
			])),
	A2(
		$author$project$StyledElement$button,
		_List_fromArray(
			[$mdgriffith$elm_ui$Element$alignRight]),
		{
			label: $mdgriffith$elm_ui$Element$text('Submit'),
			onPress: $elm$core$Maybe$Just($author$project$Pages$Households$HouseholdRegistrationPage$SubmitButtonMsg)
		}));
var $author$project$Pages$Households$HouseholdRegistrationPage$viewDivider = A2(
	$mdgriffith$elm_ui$Element$el,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$width(
			A2($mdgriffith$elm_ui$Element$maximum, 480, $mdgriffith$elm_ui$Element$fill)),
			$mdgriffith$elm_ui$Element$padding(10),
			$mdgriffith$elm_ui$Element$spacing(7),
			$mdgriffith$elm_ui$Element$Border$widthEach(
			{bottom: 2, left: 0, right: 0, top: 0}),
			$mdgriffith$elm_ui$Element$Border$color(
			A3($mdgriffith$elm_ui$Element$rgb255, 243, 243, 243))
		]),
	$mdgriffith$elm_ui$Element$none);
var $author$project$Pages$Households$HouseholdRegistrationPage$Email = function (a) {
	return {$: 'Email', a: a};
};
var $author$project$Pages$Households$HouseholdRegistrationPage$viewEmailInput = F2(
	function (problems, email) {
		return A2(
			$author$project$StyledElement$emailInput,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					A2($mdgriffith$elm_ui$Element$maximum, 300, $mdgriffith$elm_ui$Element$fill))
				]),
			{
				ariaLabel: 'Guardian\'s Email Address',
				caption: $elm$core$Maybe$Just('Used to connect the parent to the mobile app'),
				errorCaption: A3(
					$author$project$Errors$inputErrorsFor,
					problems,
					'guardian_email',
					_List_fromArray(
						[$author$project$Pages$Households$HouseholdRegistrationPage$EmptyGuardianEmail, $author$project$Pages$Households$HouseholdRegistrationPage$InvalidGuardianEmail])),
				icon: $elm$core$Maybe$Just($author$project$Icons$email),
				onChange: A2($elm$core$Basics$composeR, $author$project$Pages$Households$HouseholdRegistrationPage$Email, $author$project$Pages$Households$HouseholdRegistrationPage$Changed),
				placeholder: $elm$core$Maybe$Nothing,
				title: 'Email',
				value: email
			});
	});
var $author$project$Pages$Households$HouseholdRegistrationPage$GuardianName = function (a) {
	return {$: 'GuardianName', a: a};
};
var $author$project$Pages$Households$HouseholdRegistrationPage$viewGuardianNameInput = F2(
	function (problems, name) {
		return A2(
			$author$project$StyledElement$emailInput,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					A2($mdgriffith$elm_ui$Element$maximum, 300, $mdgriffith$elm_ui$Element$fill))
				]),
			{
				ariaLabel: 'Guardian\'s Name',
				caption: $elm$core$Maybe$Nothing,
				errorCaption: A3(
					$author$project$Errors$inputErrorsFor,
					problems,
					'guardian_name',
					_List_fromArray(
						[$author$project$Pages$Households$HouseholdRegistrationPage$EmptyGuardianName])),
				icon: $elm$core$Maybe$Nothing,
				onChange: A2($elm$core$Basics$composeR, $author$project$Pages$Households$HouseholdRegistrationPage$GuardianName, $author$project$Pages$Households$HouseholdRegistrationPage$Changed),
				placeholder: $elm$core$Maybe$Nothing,
				title: 'Name',
				value: name
			});
	});
var $author$project$Pages$Households$HouseholdRegistrationPage$PhoneNumber = function (a) {
	return {$: 'PhoneNumber', a: a};
};
var $author$project$Pages$Households$HouseholdRegistrationPage$viewPhoneInput = F2(
	function (problems, phone_number) {
		return A2(
			$author$project$StyledElement$textInput,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignTop,
					$mdgriffith$elm_ui$Element$width(
					A2($mdgriffith$elm_ui$Element$maximum, 300, $mdgriffith$elm_ui$Element$fill))
				]),
			{
				ariaLabel: 'Guardian\'s Phone Number',
				caption: $elm$core$Maybe$Nothing,
				errorCaption: A3(
					$author$project$Errors$inputErrorsFor,
					problems,
					'guardian_phone_number',
					_List_fromArray(
						[$author$project$Pages$Households$HouseholdRegistrationPage$EmptyGuardianPhoneNumber, $author$project$Pages$Households$HouseholdRegistrationPage$InvalidGuardianPhoneNumber])),
				icon: $elm$core$Maybe$Just($author$project$Icons$phone),
				onChange: A2($elm$core$Basics$composeR, $author$project$Pages$Households$HouseholdRegistrationPage$PhoneNumber, $author$project$Pages$Households$HouseholdRegistrationPage$Changed),
				placeholder: $elm$core$Maybe$Nothing,
				title: 'Phone Number',
				value: phone_number
			});
	});
var $author$project$Pages$Households$HouseholdRegistrationPage$CurrentStudentName = function (a) {
	return {$: 'CurrentStudentName', a: a};
};
var $author$project$Pages$Households$HouseholdRegistrationPage$SaveStudentPressed = {$: 'SaveStudentPressed'};
var $author$project$Pages$Households$HouseholdRegistrationPage$DeleteStudentMsg = function (a) {
	return {$: 'DeleteStudentMsg', a: a};
};
var $author$project$Pages$Households$HouseholdRegistrationPage$TripTime = F3(
	function (a, b, c) {
		return {$: 'TripTime', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Element$Input$onKeyLookup = function (lookup) {
	var decode = function (code) {
		var _v0 = lookup(code);
		if (_v0.$ === 'Nothing') {
			return $elm$json$Json$Decode$fail('No key matched');
		} else {
			var msg = _v0.a;
			return $elm$json$Json$Decode$succeed(msg);
		}
	};
	var isKey = A2(
		$elm$json$Json$Decode$andThen,
		decode,
		A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string));
	return $mdgriffith$elm_ui$Internal$Model$Attr(
		A2($elm$html$Html$Events$on, 'keyup', isKey));
};
var $mdgriffith$elm_ui$Element$Input$space = ' ';
var $mdgriffith$elm_ui$Element$Input$tabindex = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$tabindex);
var $mdgriffith$elm_ui$Element$Input$checkbox = F2(
	function (attrs, _v0) {
		var label = _v0.label;
		var icon = _v0.icon;
		var checked = _v0.checked;
		var onChange = _v0.onChange;
		var attributes = _Utils_ap(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Input$isHiddenLabel(label) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Element$spacing(6),
					$mdgriffith$elm_ui$Internal$Model$Attr(
					$elm$html$Html$Events$onClick(
						onChange(!checked))),
					$mdgriffith$elm_ui$Element$Region$announce,
					$mdgriffith$elm_ui$Element$Input$onKeyLookup(
					function (code) {
						return _Utils_eq(code, $mdgriffith$elm_ui$Element$Input$enter) ? $elm$core$Maybe$Just(
							onChange(!checked)) : (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$space) ? $elm$core$Maybe$Just(
							onChange(!checked)) : $elm$core$Maybe$Nothing);
					}),
					$mdgriffith$elm_ui$Element$Input$tabindex(0),
					$mdgriffith$elm_ui$Element$pointer,
					$mdgriffith$elm_ui$Element$alignLeft,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			attrs);
		return A3(
			$mdgriffith$elm_ui$Element$Input$applyLabel,
			attributes,
			label,
			A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Internal$Model$Attr(
						A2($elm$html$Html$Attributes$attribute, 'role', 'checkbox')),
						$mdgriffith$elm_ui$Internal$Model$Attr(
						A2(
							$elm$html$Html$Attributes$attribute,
							'aria-checked',
							checked ? 'true' : 'false')),
						$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(label),
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink)
					]),
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[
							icon(checked)
						]))));
	});
var $author$project$Icons$check = function (attrs) {
	return A2(
		$author$project$Icons$iconNamed,
		'images/check.svg',
		A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Element$alpha(1),
			attrs));
};
var $mdgriffith$elm_ui$Internal$Flag$fontAlignment = $mdgriffith$elm_ui$Internal$Flag$flag(12);
var $mdgriffith$elm_ui$Element$Font$center = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontAlignment, $mdgriffith$elm_ui$Internal$Style$classes.textCenter);
var $elm$core$Basics$degrees = function (angleInDegrees) {
	return (angleInDegrees * $elm$core$Basics$pi) / 180;
};
var $mdgriffith$elm_ui$Element$Input$defaultCheckbox = function (checked) {
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Internal$Model$htmlClass('focusable'),
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$px(14)),
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px(14)),
				$mdgriffith$elm_ui$Element$Font$color($mdgriffith$elm_ui$Element$Input$white),
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$Font$size(9),
				$mdgriffith$elm_ui$Element$Font$center,
				$mdgriffith$elm_ui$Element$Border$rounded(3),
				$mdgriffith$elm_ui$Element$Border$color(
				checked ? A3($mdgriffith$elm_ui$Element$rgb, 59 / 255, 153 / 255, 252 / 255) : A3($mdgriffith$elm_ui$Element$rgb, 211 / 255, 211 / 255, 211 / 255)),
				$mdgriffith$elm_ui$Element$Border$shadow(
				{
					blur: 1,
					color: checked ? A4($mdgriffith$elm_ui$Element$rgba, 238 / 255, 238 / 255, 238 / 255, 0) : A3($mdgriffith$elm_ui$Element$rgb, 238 / 255, 238 / 255, 238 / 255),
					offset: _Utils_Tuple2(0, 0),
					size: 1
				}),
				$mdgriffith$elm_ui$Element$Background$color(
				checked ? A3($mdgriffith$elm_ui$Element$rgb, 59 / 255, 153 / 255, 252 / 255) : $mdgriffith$elm_ui$Element$Input$white),
				$mdgriffith$elm_ui$Element$Border$width(
				checked ? 0 : 1)
			]),
		checked ? A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Border$color($mdgriffith$elm_ui$Element$Input$white),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(6)),
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(9)),
					$mdgriffith$elm_ui$Element$rotate(
					$elm$core$Basics$degrees(-45)),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$moveUp(1),
					$mdgriffith$elm_ui$Element$Border$widthEach(
					{bottom: 2, left: 2, right: 0, top: 0})
				]),
			$mdgriffith$elm_ui$Element$none) : $mdgriffith$elm_ui$Element$none);
};
var $author$project$StyledElement$checkboxIcon = function (checked) {
	return checked ? $author$project$Icons$check(
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px(14)),
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$px(14))
			])) : $mdgriffith$elm_ui$Element$Input$defaultCheckbox(checked);
};
var $author$project$Pages$Households$HouseholdRegistrationPage$viewStudentsTable = function (students) {
	var tableHeader = function (text) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			$author$project$Style$tableHeaderStyle,
			$mdgriffith$elm_ui$Element$text(text));
	};
	var includesMorningTrip = function (time) {
		return _Utils_eq(time, $author$project$Pages$Households$HouseholdRegistrationPage$Morning) || _Utils_eq(time, $author$project$Pages$Households$HouseholdRegistrationPage$TwoWay);
	};
	var includesEveningTrip = function (time) {
		return _Utils_eq(time, $author$project$Pages$Households$HouseholdRegistrationPage$Evening) || _Utils_eq(time, $author$project$Pages$Households$HouseholdRegistrationPage$TwoWay);
	};
	return A2(
		$mdgriffith$elm_ui$Element$table,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(15)
			]),
		{
			columns: _List_fromArray(
				[
					{
					header: tableHeader('NAME'),
					view: function (person) {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$width(
									A2($mdgriffith$elm_ui$Element$minimum, 220, $mdgriffith$elm_ui$Element$fill)),
								$author$project$Style$tableElementStyle),
							$mdgriffith$elm_ui$Element$text(person.name));
					},
					width: $mdgriffith$elm_ui$Element$fill
				},
					{
					header: tableHeader('MORNING'),
					view: function (student) {
						return A2(
							$mdgriffith$elm_ui$Element$Input$checkbox,
							_List_Nil,
							{
								checked: includesMorningTrip(student.time),
								icon: $author$project$StyledElement$checkboxIcon,
								label: $mdgriffith$elm_ui$Element$Input$labelHidden('Takes morning bus'),
								onChange: A2(
									$elm$core$Basics$composeR,
									A2($author$project$Pages$Households$HouseholdRegistrationPage$TripTime, student, $author$project$Pages$Households$HouseholdRegistrationPage$Morning),
									$author$project$Pages$Households$HouseholdRegistrationPage$Changed)
							});
					},
					width: $mdgriffith$elm_ui$Element$shrink
				},
					{
					header: tableHeader('EVENING'),
					view: function (student) {
						return A2(
							$mdgriffith$elm_ui$Element$Input$checkbox,
							_List_Nil,
							{
								checked: includesEveningTrip(student.time),
								icon: $author$project$StyledElement$checkboxIcon,
								label: $mdgriffith$elm_ui$Element$Input$labelHidden('Takes evening bus'),
								onChange: A2(
									$elm$core$Basics$composeR,
									A2($author$project$Pages$Households$HouseholdRegistrationPage$TripTime, student, $author$project$Pages$Households$HouseholdRegistrationPage$Evening),
									$author$project$Pages$Households$HouseholdRegistrationPage$Changed)
							});
					},
					width: $mdgriffith$elm_ui$Element$shrink
				},
					{
					header: tableHeader(''),
					view: function (student) {
						return A2(
							$mdgriffith$elm_ui$Element$Input$button,
							_List_Nil,
							{
								label: $author$project$Icons$trash(
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$mouseOver(
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$alpha(0.3),
													$mdgriffith$elm_ui$Element$Border$color(
													A3($mdgriffith$elm_ui$Element$rgb, 0, 0.5, 0))
												])),
											$mdgriffith$elm_ui$Element$Font$color(
											A3($mdgriffith$elm_ui$Element$rgb, 0, 0.5, 0))
										])),
								onPress: $elm$core$Maybe$Just(
									$author$project$Pages$Households$HouseholdRegistrationPage$DeleteStudentMsg(student))
							});
					},
					width: $mdgriffith$elm_ui$Element$shrink
				}
				]),
			data: students
		});
};
var $author$project$Pages$Households$HouseholdRegistrationPage$viewStudentsInput = function (_v0) {
	var students = _v0.students;
	var problems = _v0.problems;
	var currentStudent = _v0.currentStudent;
	var onEnter = function (msg) {
		return $mdgriffith$elm_ui$Element$htmlAttribute(
			A2(
				$elm$html$Html$Events$on,
				'keyup',
				A2(
					$elm$json$Json$Decode$andThen,
					function (key) {
						return (key === 'Enter') ? $elm$json$Json$Decode$succeed(msg) : $elm$json$Json$Decode$fail('Not the enter key');
					},
					A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string))));
	};
	var inputFooter = ($elm$core$List$length(students) > 0) ? A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$paddingEach(
				_Utils_update(
					$author$project$Style$edges,
					{top: 20}))
			]),
		$author$project$Pages$Households$HouseholdRegistrationPage$viewStudentsTable(students)) : $mdgriffith$elm_ui$Element$none;
	var errorMapper = $author$project$Errors$inputErrorsFor(problems);
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(10),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(20),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				_List_fromArray(
					[
						A2(
						$author$project$StyledElement$textInput,
						_List_fromArray(
							[
								onEnter($author$project$Pages$Households$HouseholdRegistrationPage$SaveStudentPressed),
								$mdgriffith$elm_ui$Element$width(
								A2($mdgriffith$elm_ui$Element$maximum, 300, $mdgriffith$elm_ui$Element$fill))
							]),
						{
							ariaLabel: 'Student Name',
							caption: $elm$core$Maybe$Nothing,
							errorCaption: A2(
								errorMapper,
								'student',
								_List_fromArray(
									[$author$project$Pages$Households$HouseholdRegistrationPage$EmptyStudentsList])),
							icon: $elm$core$Maybe$Nothing,
							onChange: A2($elm$core$Basics$composeR, $author$project$Pages$Households$HouseholdRegistrationPage$CurrentStudentName, $author$project$Pages$Households$HouseholdRegistrationPage$Changed),
							placeholder: $elm$core$Maybe$Nothing,
							title: 'Student Name',
							value: currentStudent
						}),
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$padding(8),
								$mdgriffith$elm_ui$Element$alignBottom,
								$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$purple),
								$mdgriffith$elm_ui$Element$Border$rounded(8)
							]),
						{
							label: $author$project$Icons$add(
								_List_fromArray(
									[$author$project$Colors$fillWhite])),
							onPress: $elm$core$Maybe$Just($author$project$Pages$Households$HouseholdRegistrationPage$SaveStudentPressed)
						})
					])),
				inputFooter
			]));
};
var $author$project$Pages$Households$HouseholdRegistrationPage$viewForm = function (model) {
	var household = model.form;
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$fillPortion(1)),
				$mdgriffith$elm_ui$Element$spacing(26)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						A2($mdgriffith$elm_ui$Element$maximum, 300, $mdgriffith$elm_ui$Element$fill))
					]),
				$author$project$StyledElement$toDropDownView(
					$author$project$Pages$Households$HouseholdRegistrationPage$routeDropDown(model))),
				$author$project$Pages$Households$HouseholdRegistrationPage$viewDivider,
				A2(
				$mdgriffith$elm_ui$Element$el,
				$author$project$Style$header2Style,
				$mdgriffith$elm_ui$Element$text('Students')),
				$author$project$Pages$Households$HouseholdRegistrationPage$viewStudentsInput(model.form),
				$author$project$Pages$Households$HouseholdRegistrationPage$viewDivider,
				A2(
				$mdgriffith$elm_ui$Element$el,
				$author$project$Style$header2Style,
				$mdgriffith$elm_ui$Element$text('Guardian\'s contacts')),
				A2($author$project$Pages$Households$HouseholdRegistrationPage$viewGuardianNameInput, model.form.problems, household.guardian.name),
				A2($author$project$Pages$Households$HouseholdRegistrationPage$viewEmailInput, model.form.problems, household.guardian.email),
				A2($author$project$Pages$Households$HouseholdRegistrationPage$viewPhoneInput, model.form.problems, household.guardian.phoneNumber),
				$author$project$Pages$Households$HouseholdRegistrationPage$viewButton
			]));
};
var $author$project$Pages$Households$HouseholdRegistrationPage$viewBody = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(40),
				$mdgriffith$elm_ui$Element$alignTop
			]),
		_List_fromArray(
			[
				$author$project$Pages$Households$HouseholdRegistrationPage$viewForm(model)
			]));
};
var $author$project$Pages$Households$HouseholdRegistrationPage$view = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(24),
				$mdgriffith$elm_ui$Element$padding(24)
			]),
		_List_fromArray(
			[
				A2($author$project$Views$Heading$viewHeading, 'Register Household', $elm$core$Maybe$Nothing),
				$author$project$Pages$Households$HouseholdRegistrationPage$googleMap(model),
				$author$project$Pages$Households$HouseholdRegistrationPage$viewBody(model)
			]));
};
var $author$project$Pages$Households$HouseholdsPage$Evening = {$: 'Evening'};
var $author$project$Pages$Households$HouseholdsPage$Morning = {$: 'Morning'};
var $author$project$Pages$Households$HouseholdsPage$NoOp = {$: 'NoOp'};
var $author$project$Pages$Households$HouseholdsPage$TwoWay = {$: 'TwoWay'};
var $author$project$Pages$Households$HouseholdsPage$viewHouseholdsTable = function (households) {
	var tableHeader = function (text) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			$author$project$Style$tableHeaderStyle,
			$mdgriffith$elm_ui$Element$text(
				$elm$core$String$toUpper(text)));
	};
	var rowTextStyle = A2(
		$elm$core$List$cons,
		$mdgriffith$elm_ui$Element$width(
			A2($mdgriffith$elm_ui$Element$minimum, 220, $mdgriffith$elm_ui$Element$fill)),
		$author$project$Style$tableElementStyle);
	var includesMorningTrip = function (time) {
		return _Utils_eq(time, $author$project$Pages$Households$HouseholdsPage$Morning) || _Utils_eq(time, $author$project$Pages$Households$HouseholdsPage$TwoWay);
	};
	var includesEveningTrip = function (time) {
		return _Utils_eq(time, $author$project$Pages$Households$HouseholdsPage$Evening) || _Utils_eq(time, $author$project$Pages$Households$HouseholdsPage$TwoWay);
	};
	return A2(
		$mdgriffith$elm_ui$Element$table,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(15)
			]),
		{
			columns: _List_fromArray(
				[
					{
					header: tableHeader('NAME'),
					view: function (household) {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							rowTextStyle,
							$mdgriffith$elm_ui$Element$text(household.guardian.name));
					},
					width: $mdgriffith$elm_ui$Element$fill
				},
					{
					header: tableHeader('MORNING'),
					view: function (student) {
						return A2(
							$mdgriffith$elm_ui$Element$Input$checkbox,
							_List_Nil,
							{
								checked: true,
								icon: $author$project$StyledElement$checkboxIcon,
								label: $mdgriffith$elm_ui$Element$Input$labelHidden('Takes morning bus'),
								onChange: $elm$core$Basics$always($author$project$Pages$Households$HouseholdsPage$NoOp)
							});
					},
					width: $mdgriffith$elm_ui$Element$fill
				},
					{
					header: tableHeader('EVENING'),
					view: function (student) {
						return A2(
							$mdgriffith$elm_ui$Element$Input$checkbox,
							_List_Nil,
							{
								checked: true,
								icon: $author$project$StyledElement$checkboxIcon,
								label: $mdgriffith$elm_ui$Element$Input$labelHidden('Takes evening bus'),
								onChange: $elm$core$Basics$always($author$project$Pages$Households$HouseholdsPage$NoOp)
							});
					},
					width: $mdgriffith$elm_ui$Element$fill
				}
				]),
			data: households
		});
};
var $author$project$Pages$Households$HouseholdsPage$viewBody = function (model) {
	switch (model.$) {
		case 'NotAsked':
			return $mdgriffith$elm_ui$Element$text('Initialising.');
		case 'Loading':
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
					]),
				$author$project$Icons$loading(
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY])));
		case 'Failure':
			var error = model.a;
			var _v1 = $author$project$Errors$decodeErrors(error);
			var apiError = _v1.a;
			return $mdgriffith$elm_ui$Element$text(
				$author$project$Errors$errorToString(apiError));
		default:
			var households = model.a;
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(40)
					]),
				_List_fromArray(
					[
						$author$project$Pages$Households$HouseholdsPage$viewHouseholdsTable(households)
					]));
	}
};
var $author$project$Pages$Households$HouseholdsPage$viewHeading = F2(
	function (title, subLine) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(16)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							$author$project$Style$headerStyle,
							$mdgriffith$elm_ui$Element$text(title)),
							function () {
							if (subLine.$ === 'Nothing') {
								return $mdgriffith$elm_ui$Element$none;
							} else {
								var caption = subLine.a;
								return A2(
									$mdgriffith$elm_ui$Element$el,
									$author$project$Style$captionLabelStyle,
									$mdgriffith$elm_ui$Element$text(caption));
							}
						}()
						])),
					A2(
					$author$project$StyledElement$iconButton,
					_List_Nil,
					{
						icon: $author$project$Icons$add,
						iconAttrs: _List_fromArray(
							[$author$project$Colors$fillWhite]),
						onPress: $elm$core$Maybe$Nothing
					})
				]));
	});
var $author$project$Pages$Households$HouseholdsPage$view = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(40),
				A2($mdgriffith$elm_ui$Element$paddingXY, 24, 8)
			]),
		_List_fromArray(
			[
				A2($author$project$Pages$Households$HouseholdsPage$viewHeading, 'All Households', $elm$core$Maybe$Nothing),
				$author$project$Pages$Households$HouseholdsPage$viewBody(model.households)
			]));
};
var $author$project$Pages$Login$UpdatedEmail = function (a) {
	return {$: 'UpdatedEmail', a: a};
};
var $author$project$Pages$Login$UpdatedPassword = function (a) {
	return {$: 'UpdatedPassword', a: a};
};
var $mdgriffith$elm_ui$Element$Input$currentPassword = F2(
	function (attrs, pass) {
		return A3(
			$mdgriffith$elm_ui$Element$Input$textHelper,
			{
				autofill: $elm$core$Maybe$Just('current-password'),
				spellchecked: false,
				type_: $mdgriffith$elm_ui$Element$Input$TextInputNode(
					pass.show ? 'text' : 'password')
			},
			attrs,
			{label: pass.label, onChange: pass.onChange, placeholder: pass.placeholder, text: pass.text});
	});
var $mdgriffith$elm_ui$Element$Input$newPassword = F2(
	function (attrs, pass) {
		return A3(
			$mdgriffith$elm_ui$Element$Input$textHelper,
			{
				autofill: $elm$core$Maybe$Just('new-password'),
				spellchecked: false,
				type_: $mdgriffith$elm_ui$Element$Input$TextInputNode(
					pass.show ? 'text' : 'password')
			},
			attrs,
			{label: pass.label, onChange: pass.onChange, placeholder: pass.placeholder, text: pass.text});
	});
var $author$project$StyledElement$passwordInput = F2(
	function (attributes, _v0) {
		var title = _v0.title;
		var caption = _v0.caption;
		var errorCaption = _v0.errorCaption;
		var value = _v0.value;
		var onChange = _v0.onChange;
		var placeholder = _v0.placeholder;
		var ariaLabel = _v0.ariaLabel;
		var icon = _v0.icon;
		var newPassword = _v0.newPassword;
		var passwordBoxBuilder = newPassword ? $mdgriffith$elm_ui$Element$Input$newPassword : $mdgriffith$elm_ui$Element$Input$currentPassword;
		var input = A2(
			passwordBoxBuilder,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Border$width(0),
						$mdgriffith$elm_ui$Element$Background$color(
						A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0))
					]),
				$author$project$Style$labelStyle),
			{
				label: $mdgriffith$elm_ui$Element$Input$labelHidden(ariaLabel),
				onChange: onChange,
				placeholder: placeholder,
				show: false,
				text: value
			});
		return A7($author$project$StyledElement$wrappedInput, input, title, caption, errorCaption, icon, attributes, _List_Nil);
	});
var $author$project$Pages$Login$SubmittedForm = {$: 'SubmittedForm'};
var $author$project$Pages$Login$viewButton = function (_v0) {
	var status = _v0.status;
	if (status.$ === 'Loading') {
		return $author$project$Icons$loading(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignRight,
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(46)),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(46))
				]));
	} else {
		return A2(
			$author$project$StyledElement$button,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$alignRight]),
			{
				label: $mdgriffith$elm_ui$Element$text('Done'),
				onPress: $elm$core$Maybe$Just($author$project$Pages$Login$SubmittedForm)
			});
	}
};
var $author$project$Pages$Login$viewDivider = A2(
	$mdgriffith$elm_ui$Element$el,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$width(
			A2($mdgriffith$elm_ui$Element$maximum, 480, $mdgriffith$elm_ui$Element$fill)),
			$mdgriffith$elm_ui$Element$padding(10),
			$mdgriffith$elm_ui$Element$spacing(7),
			$mdgriffith$elm_ui$Element$Border$widthEach(
			{bottom: 2, left: 0, right: 0, top: 0}),
			$mdgriffith$elm_ui$Element$Border$color(
			A3($mdgriffith$elm_ui$Element$rgb255, 243, 243, 243))
		]),
	$mdgriffith$elm_ui$Element$none);
var $author$project$Pages$Login$viewError = function (error) {
	if (error.$ === 'Nothing') {
		return $mdgriffith$elm_ui$Element$none;
	} else {
		var errorStr = error.a;
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$padding(10),
						$mdgriffith$elm_ui$Element$Background$color(
						A2($author$project$Colors$withAlpha, $author$project$Colors$errorRed, 0.5))
					]),
				$author$project$Style$labelStyle),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_Nil,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text(errorStr)
						]))
				]));
	}
};
var $author$project$Pages$Login$viewFooter = A2(
	$mdgriffith$elm_ui$Element$column,
	_List_Nil,
	_List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Element$wrappedRow,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(8)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$Font$size(15),
						$author$project$Style$labelStyle),
					$mdgriffith$elm_ui$Element$text('Don’t have an account?')),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(8)
						]),
					_List_fromArray(
						[
							A2(
							$author$project$StyledElement$textLink,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$color($author$project$Colors$darkGreen),
									$mdgriffith$elm_ui$Element$Font$size(15)
								]),
							{
								label: $mdgriffith$elm_ui$Element$text('Sign up with Flotilla'),
								route: $author$project$Navigation$Signup
							}),
							$author$project$Icons$chevronDown(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$rotate((-$elm$core$Basics$pi) / 2)
								]))
						]))
				]))
		]));
var $author$project$Pages$Login$viewMessage = function (message) {
	if (message.$ === 'Nothing') {
		return $mdgriffith$elm_ui$Element$none;
	} else {
		var messageStr = message.a;
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$padding(10),
						$mdgriffith$elm_ui$Element$Background$color(
						A2($author$project$Colors$withAlpha, $author$project$Colors$teal, 0.5))
					]),
				$author$project$Style$labelStyle),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_Nil,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text(messageStr)
						]))
				]));
	}
};
var $author$project$Pages$Login$view = function (model) {
	var spacer = A2($mdgriffith$elm_ui$Element$el, _List_Nil, $mdgriffith$elm_ui$Element$none);
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$width(
				A2($mdgriffith$elm_ui$Element$maximum, 500, $mdgriffith$elm_ui$Element$fill)),
				$mdgriffith$elm_ui$Element$spacing(10),
				A2($mdgriffith$elm_ui$Element$paddingXY, 30, 0)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$alignLeft, $author$project$Style$headerStyle),
				$mdgriffith$elm_ui$Element$text(
					_Utils_eq(model.message, $elm$core$Maybe$Nothing) ? 'Welcome back!' : 'Welcome!')),
				$author$project$Pages$Login$viewMessage(model.message),
				A2(
				$author$project$StyledElement$textInput,
				_List_fromArray(
					[$mdgriffith$elm_ui$Element$centerX]),
				{ariaLabel: 'Email input', caption: $elm$core$Maybe$Nothing, errorCaption: $elm$core$Maybe$Nothing, icon: $elm$core$Maybe$Nothing, onChange: $author$project$Pages$Login$UpdatedEmail, placeholder: $elm$core$Maybe$Nothing, title: 'Email', value: model.form.email}),
				spacer,
				A2(
				$author$project$StyledElement$passwordInput,
				_List_fromArray(
					[$mdgriffith$elm_ui$Element$centerX]),
				{ariaLabel: 'Password input', caption: $elm$core$Maybe$Nothing, errorCaption: $elm$core$Maybe$Nothing, icon: $elm$core$Maybe$Nothing, newPassword: false, onChange: $author$project$Pages$Login$UpdatedPassword, placeholder: $elm$core$Maybe$Nothing, title: 'Password', value: model.form.password}),
				$author$project$Pages$Login$viewError(model.error),
				spacer,
				$author$project$Pages$Login$viewButton(model),
				$author$project$Pages$Login$viewDivider,
				$author$project$Pages$Login$viewFooter,
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$height(
						A2($mdgriffith$elm_ui$Element$minimum, 100, $mdgriffith$elm_ui$Element$fill))
					]),
				$mdgriffith$elm_ui$Element$none)
			]));
};
var $mdgriffith$elm_ui$Element$Font$heavy = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontWeight, $mdgriffith$elm_ui$Internal$Style$classes.textHeavy);
var $author$project$Pages$NotFound$view404 = A2(
	$mdgriffith$elm_ui$Element$el,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$width(
			$mdgriffith$elm_ui$Element$fillPortion(8)),
			$mdgriffith$elm_ui$Element$centerX,
			$mdgriffith$elm_ui$Element$centerY,
			$mdgriffith$elm_ui$Element$Font$size(100),
			$mdgriffith$elm_ui$Element$Font$center,
			$mdgriffith$elm_ui$Element$Font$heavy,
			$mdgriffith$elm_ui$Element$alpha(0.4)
		]),
	$mdgriffith$elm_ui$Element$text('404'));
var $author$project$Pages$NotFound$view = A2(
	$mdgriffith$elm_ui$Element$row,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
			$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
			$mdgriffith$elm_ui$Element$spaceEvenly
		]),
	_List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$fillPortion(1))
				]),
			$mdgriffith$elm_ui$Element$none),
			$author$project$Pages$NotFound$view404,
			A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$fillPortion(1))
				]),
			$mdgriffith$elm_ui$Element$none)
		]));
var $author$project$Pages$Routes$Routes$googleMap = A2(
	$mdgriffith$elm_ui$Element$column,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
			$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
		]),
	_List_fromArray(
		[
			$author$project$StyledElement$googleMap(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height(
					A2($mdgriffith$elm_ui$Element$minimum, 500, $mdgriffith$elm_ui$Element$fill))
				])),
			A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(2)),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$darkness)
				]),
			$mdgriffith$elm_ui$Element$none)
		]));
var $author$project$Pages$Routes$Routes$Add = {$: 'Add'};
var $author$project$Pages$Routes$Routes$viewHeading = F2(
	function (title, subLine) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(16),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							$author$project$Style$headerStyle,
							$mdgriffith$elm_ui$Element$text(title)),
							function () {
							if (subLine.$ === 'Nothing') {
								return $mdgriffith$elm_ui$Element$none;
							} else {
								var caption = subLine.a;
								return A2(
									$mdgriffith$elm_ui$Element$el,
									$author$project$Style$captionLabelStyle,
									$mdgriffith$elm_ui$Element$text(caption));
							}
						}()
						])),
					A2(
					$author$project$StyledElement$textInput,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$alignRight,
							$mdgriffith$elm_ui$Element$width(
							A2($mdgriffith$elm_ui$Element$maximum, 300, $mdgriffith$elm_ui$Element$fill)),
							$mdgriffith$elm_ui$Element$centerY
						]),
					{
						ariaLabel: 'Filter buses',
						caption: $elm$core$Maybe$Nothing,
						errorCaption: $elm$core$Maybe$Nothing,
						icon: $elm$core$Maybe$Just($author$project$Icons$search),
						onChange: $elm$core$Basics$always($author$project$Pages$Routes$Routes$Add),
						placeholder: $elm$core$Maybe$Just(
							A2(
								$mdgriffith$elm_ui$Element$Input$placeholder,
								_List_Nil,
								$mdgriffith$elm_ui$Element$text('Search'))),
						title: '',
						value: ''
					}),
					A2(
					$author$project$StyledElement$iconButton,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerY, $mdgriffith$elm_ui$Element$alignRight]),
					{
						icon: $author$project$Icons$add,
						iconAttrs: _List_fromArray(
							[$author$project$Colors$fillWhite]),
						onPress: $elm$core$Maybe$Nothing
					})
				]));
	});
var $author$project$Pages$Routes$Routes$view = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Element$paddingXY, 90, 60),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(16)
			]),
		_List_fromArray(
			[
				$author$project$Pages$Routes$Routes$googleMap,
				A2($author$project$Pages$Routes$Routes$viewHeading, 'All Routes', $elm$core$Maybe$Nothing)
			]));
};
var $author$project$Pages$Signup$spacer = A2($mdgriffith$elm_ui$Element$el, _List_Nil, $mdgriffith$elm_ui$Element$none);
var $author$project$Pages$Signup$SubmittedForm = {$: 'SubmittedForm'};
var $author$project$Pages$Signup$ToManagerForm = {$: 'ToManagerForm'};
var $author$project$Pages$Signup$ToSchoolForm = {$: 'ToSchoolForm'};
var $author$project$Errors$containsErrorFor = F2(
	function (fields, problems) {
		return A2(
			$elm$core$List$any,
			function (field) {
				return A2(
					$author$project$Errors$contains,
					A2($author$project$Errors$ServerSideError, field, _List_Nil),
					problems);
			},
			fields);
	});
var $author$project$Pages$Signup$viewButtons = function (model) {
	var _v0 = model.status;
	if (_v0.$ === 'Loading') {
		return $author$project$Icons$loading(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignRight,
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(46)),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(46))
				]));
	} else {
		var _v1 = A2(
			$author$project$Errors$containsErrorFor,
			_List_fromArray(
				['manager_name', 'manager_email', 'manager_password']),
			model.form.problems) ? _Utils_Tuple2(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Border$color($author$project$Colors$errorRed),
					$mdgriffith$elm_ui$Element$Border$width(2)
				]),
			A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(4)
					]),
				_List_fromArray(
					[
						$author$project$Icons$chevronDown(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$rotate($elm$core$Basics$pi / 2),
								$author$project$Colors$fillErrorRed,
								$mdgriffith$elm_ui$Element$alpha(1)
							])),
						$mdgriffith$elm_ui$Element$text('Back')
					]))) : _Utils_Tuple2(
			_List_Nil,
			$mdgriffith$elm_ui$Element$text('Back'));
		var borderStyle = _v1.a;
		var label = _v1.b;
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					_Utils_eq(model.form.page, $author$project$Pages$Signup$SchoolDetails) ? A2(
					$author$project$StyledElement$button,
					_Utils_ap(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$alignLeft,
								$mdgriffith$elm_ui$Element$Background$color(
								A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0)),
								$mdgriffith$elm_ui$Element$Font$color($author$project$Colors$darkText)
							]),
						borderStyle),
					{
						label: label,
						onPress: $elm$core$Maybe$Just($author$project$Pages$Signup$ToManagerForm)
					}) : $mdgriffith$elm_ui$Element$none,
					A2(
					$author$project$StyledElement$button,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$alignRight]),
					{
						label: $mdgriffith$elm_ui$Element$text(
							_Utils_eq(model.form.page, $author$project$Pages$Signup$SchoolDetails) ? 'Done' : 'Next'),
						onPress: $elm$core$Maybe$Just(
							_Utils_eq(model.form.page, $author$project$Pages$Signup$SchoolDetails) ? $author$project$Pages$Signup$SubmittedForm : $author$project$Pages$Signup$ToSchoolForm)
					})
				]));
	}
};
var $author$project$Pages$Signup$viewDivider = A2(
	$mdgriffith$elm_ui$Element$el,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$width(
			A2($mdgriffith$elm_ui$Element$maximum, 480, $mdgriffith$elm_ui$Element$fill)),
			$mdgriffith$elm_ui$Element$padding(10),
			$mdgriffith$elm_ui$Element$spacing(7),
			$mdgriffith$elm_ui$Element$Border$widthEach(
			{bottom: 2, left: 0, right: 0, top: 0}),
			$mdgriffith$elm_ui$Element$Border$color(
			A3($mdgriffith$elm_ui$Element$rgb255, 243, 243, 243))
		]),
	$mdgriffith$elm_ui$Element$none);
var $author$project$Pages$Signup$viewFooter = A2(
	$mdgriffith$elm_ui$Element$column,
	_List_Nil,
	_List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Element$wrappedRow,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(8)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$Font$size(15),
						$author$project$Style$labelStyle),
					$mdgriffith$elm_ui$Element$text('Already have an account?')),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(8)
						]),
					_List_fromArray(
						[
							A2(
							$author$project$StyledElement$textLink,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$color($author$project$Colors$darkGreen),
									$mdgriffith$elm_ui$Element$Font$size(15),
									$mdgriffith$elm_ui$Element$Font$bold
								]),
							{
								label: $mdgriffith$elm_ui$Element$text('Login'),
								route: $author$project$Navigation$Login($elm$core$Maybe$Nothing)
							}),
							$author$project$Icons$chevronDown(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$rotate((-$elm$core$Basics$pi) / 2)
								]))
						]))
				]))
		]));
var $author$project$Pages$Signup$UpdatedEmail = function (a) {
	return {$: 'UpdatedEmail', a: a};
};
var $author$project$Pages$Signup$UpdatedFirstName = function (a) {
	return {$: 'UpdatedFirstName', a: a};
};
var $author$project$Pages$Signup$UpdatedLastName = function (a) {
	return {$: 'UpdatedLastName', a: a};
};
var $author$project$Pages$Signup$UpdatedPassword = function (a) {
	return {$: 'UpdatedPassword', a: a};
};
var $author$project$Pages$Signup$formPageHeader = F2(
	function (name, pageNumber) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$alignLeft, $author$project$Style$header2Style),
			A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(10)
					]),
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$text(name),
						A2(
						$mdgriffith$elm_ui$Element$el,
						A2(
							$elm$core$List$cons,
							A2($mdgriffith$elm_ui$Element$paddingXY, 10, 0),
							$author$project$Style$captionLabelStyle),
						$mdgriffith$elm_ui$Element$text(pageNumber))
					])));
	});
var $author$project$Pages$Signup$viewManagerForm = function (model) {
	var form = model.form;
	var errorMapper = $author$project$Errors$inputErrorsFor(form.problems);
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$alignTop,
				$mdgriffith$elm_ui$Element$width(
				A2($mdgriffith$elm_ui$Element$maximum, 500, $mdgriffith$elm_ui$Element$fill)),
				$mdgriffith$elm_ui$Element$spacing(10)
			]),
		_List_fromArray(
			[
				A2($author$project$Pages$Signup$formPageHeader, 'Your Details', '(1/2)'),
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(10),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				_List_fromArray(
					[
						A2(
						$author$project$StyledElement$textInput,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$alignTop]),
						{
							ariaLabel: 'First name input',
							caption: $elm$core$Maybe$Nothing,
							errorCaption: A2(
								errorMapper,
								'manager_name',
								_List_fromArray(
									[$author$project$Pages$Signup$EmptyFirstName])),
							icon: $elm$core$Maybe$Nothing,
							onChange: A2($elm$core$Basics$composeR, $author$project$Pages$Signup$Name, $author$project$Pages$Signup$UpdatedFirstName),
							placeholder: $elm$core$Maybe$Nothing,
							title: 'First Name',
							value: $author$project$Pages$Signup$nameString(form.manager.firstName)
						}),
						A2(
						$author$project$StyledElement$textInput,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$alignTop]),
						{
							ariaLabel: 'Last name input',
							caption: $elm$core$Maybe$Nothing,
							errorCaption: A2(
								errorMapper,
								'manager_name',
								_List_fromArray(
									[$author$project$Pages$Signup$EmptyLastName])),
							icon: $elm$core$Maybe$Nothing,
							onChange: A2($elm$core$Basics$composeR, $author$project$Pages$Signup$Name, $author$project$Pages$Signup$UpdatedLastName),
							placeholder: $elm$core$Maybe$Nothing,
							title: 'Last Name',
							value: $author$project$Pages$Signup$nameString(form.manager.lastName)
						})
					])),
				A2(
				$mdgriffith$elm_ui$Element$el,
				$author$project$Style$captionLabelStyle,
				$mdgriffith$elm_ui$Element$text('Your official name')),
				$author$project$Pages$Signup$spacer,
				A2(
				$author$project$StyledElement$emailInput,
				_List_fromArray(
					[$mdgriffith$elm_ui$Element$centerX]),
				{
					ariaLabel: 'Email input',
					caption: $elm$core$Maybe$Just('Your official email address'),
					errorCaption: A2(
						errorMapper,
						'manager_email',
						_List_fromArray(
							[$author$project$Pages$Signup$InvalidEmail])),
					icon: $elm$core$Maybe$Nothing,
					onChange: A2($elm$core$Basics$composeR, $author$project$Pages$Signup$Email, $author$project$Pages$Signup$UpdatedEmail),
					placeholder: $elm$core$Maybe$Nothing,
					title: 'Email Address',
					value: $author$project$Pages$Signup$emailString(form.manager.email)
				}),
				$author$project$Pages$Signup$spacer,
				A2(
				$author$project$StyledElement$passwordInput,
				_List_fromArray(
					[$mdgriffith$elm_ui$Element$centerX]),
				{
					ariaLabel: 'Password input',
					caption: $elm$core$Maybe$Nothing,
					errorCaption: A2(
						errorMapper,
						'manager_password',
						_List_fromArray(
							[$author$project$Pages$Signup$PasswordIsEmpty, $author$project$Pages$Signup$PasswordIsTooShort])),
					icon: $elm$core$Maybe$Nothing,
					newPassword: true,
					onChange: A2($elm$core$Basics$composeR, $author$project$Pages$Signup$Password, $author$project$Pages$Signup$UpdatedPassword),
					placeholder: $elm$core$Maybe$Nothing,
					title: 'New Password',
					value: $author$project$Pages$Signup$passwordString(form.manager.password)
				})
			]));
};
var $author$project$Pages$Signup$UpdatedSchoolName = function (a) {
	return {$: 'UpdatedSchoolName', a: a};
};
var $author$project$Icons$help = $author$project$Icons$iconNamed('images/help.svg');
var $mdgriffith$elm_ui$Element$moveDown = function (y) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveY,
		$mdgriffith$elm_ui$Internal$Model$MoveY(y));
};
var $author$project$Pages$Signup$RequestGeoLocation = {$: 'RequestGeoLocation'};
var $author$project$Pages$Signup$viewMap = function (isLoading) {
	var loadingView = isLoading ? $author$project$Icons$loading(
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$alignRight,
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$px(46)),
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px(46))
			])) : A2(
		$author$project$StyledElement$button,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$teal),
				$mdgriffith$elm_ui$Element$Font$color($author$project$Colors$darkText),
				$mdgriffith$elm_ui$Element$padding(50)
			]),
		{
			label: $mdgriffith$elm_ui$Element$text('Use my location'),
			onPress: $elm$core$Maybe$Just($author$project$Pages$Signup$RequestGeoLocation)
		});
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$inFront(
				A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$padding(20),
							$mdgriffith$elm_ui$Element$alignBottom,
							$mdgriffith$elm_ui$Element$alignRight
						]),
					loadingView))
			]),
		$author$project$StyledElement$googleMap(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(400)),
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(600)),
					$mdgriffith$elm_ui$Element$Background$color(
					A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 1))
				])));
};
var $author$project$Pages$Signup$viewSchoolForm = function (model) {
	var form = model.form;
	var hasMapError = A2(
		$elm$core$List$any,
		function (x) {
			if (x.$ === 'ClientSideError') {
				var y = x.a;
				return _Utils_eq(y, $author$project$Pages$Signup$EmptySchoolLocation);
			} else {
				return false;
			}
		},
		form.problems);
	var mapBorderStyle = hasMapError ? _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Border$color($author$project$Colors$errorRed),
			$mdgriffith$elm_ui$Element$Border$width(2),
			$mdgriffith$elm_ui$Element$padding(2)
		]) : _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Border$color($author$project$Colors$white),
			$mdgriffith$elm_ui$Element$Border$width(2),
			$mdgriffith$elm_ui$Element$padding(2)
		]);
	var mapCaptionStyle = hasMapError ? $author$project$Style$errorStyle : $author$project$Style$captionLabelStyle;
	var errorMapper = $author$project$Errors$inputErrorsFor(form.problems);
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$alignTop,
				$mdgriffith$elm_ui$Element$width(
				A2($mdgriffith$elm_ui$Element$maximum, 600, $mdgriffith$elm_ui$Element$fill)),
				$mdgriffith$elm_ui$Element$spacing(10)
			]),
		_List_fromArray(
			[
				A2($author$project$Pages$Signup$formPageHeader, 'School Details', '(2/2)'),
				A2(
				$author$project$StyledElement$textInput,
				_List_fromArray(
					[$mdgriffith$elm_ui$Element$centerX]),
				{
					ariaLabel: 'School name input',
					caption: $elm$core$Maybe$Just('This is the name that will be visible to parents and students'),
					errorCaption: A2(
						errorMapper,
						'school_name',
						_List_fromArray(
							[$author$project$Pages$Signup$EmptySchoolName])),
					icon: $elm$core$Maybe$Nothing,
					onChange: A2($elm$core$Basics$composeR, $author$project$Pages$Signup$Name, $author$project$Pages$Signup$UpdatedSchoolName),
					placeholder: $elm$core$Maybe$Nothing,
					title: 'School Name',
					value: $author$project$Pages$Signup$nameString(form.school.schoolName)
				}),
				$author$project$Pages$Signup$spacer,
				A2(
				$mdgriffith$elm_ui$Element$el,
				mapBorderStyle,
				$author$project$Pages$Signup$viewMap(model.loadingGeocode)),
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(8)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						mapCaptionStyle,
						$mdgriffith$elm_ui$Element$text('Click on your school to mark its location')),
						$author$project$Icons$help(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(16)),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(16)),
								$mdgriffith$elm_ui$Element$alpha(1),
								$mdgriffith$elm_ui$Element$pointer,
								$mdgriffith$elm_ui$Element$inFront(
								A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$centerX,
											$mdgriffith$elm_ui$Element$alpha(0),
											$mdgriffith$elm_ui$Element$mouseOver(
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$alpha(1)
												]))
										]),
									A2(
										$mdgriffith$elm_ui$Element$el,
										_Utils_ap(
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$moveDown(24),
													$mdgriffith$elm_ui$Element$Background$color($author$project$Colors$white),
													$author$project$Style$elevated2,
													$mdgriffith$elm_ui$Element$padding(8),
													$mdgriffith$elm_ui$Element$mouseOver(
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$alpha(0)
														]))
												]),
											$author$project$Style$captionLabelStyle),
										$mdgriffith$elm_ui$Element$text('This allows us to know when your vehicle has left or arrived at the school compound'))))
							]))
					])),
				$author$project$Pages$Signup$spacer
			]));
};
var $author$project$Pages$Signup$view = function (model) {
	var formPage = function () {
		var _v0 = model.form.page;
		if (_v0.$ === 'ManagerDetails') {
			return $author$project$Pages$Signup$viewManagerForm;
		} else {
			return $author$project$Pages$Signup$viewSchoolForm;
		}
	}();
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$spacing(10),
				A2($mdgriffith$elm_ui$Element$paddingXY, 30, 0)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$alignLeft, $author$project$Style$headerStyle),
				$mdgriffith$elm_ui$Element$text('Sign Up')),
				formPage(model),
				$author$project$Pages$Signup$spacer,
				$author$project$Pages$Signup$spacer,
				$author$project$Pages$Signup$viewButtons(model),
				$author$project$Pages$Signup$viewDivider,
				$author$project$Pages$Signup$viewFooter,
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$height(
						A2($mdgriffith$elm_ui$Element$minimum, 100, $mdgriffith$elm_ui$Element$fill))
					]),
				$mdgriffith$elm_ui$Element$none)
			]));
};
var $author$project$Main$view = function (_v0) {
	var page = _v0.page;
	var route = _v0.route;
	var navState = _v0.navState;
	var windowHeight = _v0.windowHeight;
	var viewPage = F2(
		function (pageContents, toMsg) {
			return A7(
				$author$project$Page$frame,
				route,
				pageContents,
				$author$project$Main$toSession(page),
				toMsg,
				navState,
				$author$project$Main$GotNavBarMsg,
				windowHeight);
		});
	var viewEmptyPage = function (pageContents) {
		return A2(viewPage, pageContents, $author$project$Main$GotHomeMsg);
	};
	var renderedView = function () {
		switch (page.$) {
			case 'Home':
				return viewEmptyPage($author$project$Pages$Home$view);
			case 'Login':
				var model = page.a;
				return A2(
					viewPage,
					$author$project$Pages$Login$view(model),
					$author$project$Main$GotLoginMsg);
			case 'Signup':
				var model = page.a;
				return A2(
					viewPage,
					$author$project$Pages$Signup$view(model),
					$author$project$Main$GotSignupMsg);
			case 'Redirect':
				return viewEmptyPage($author$project$Pages$Blank$view);
			case 'Logout':
				return viewEmptyPage($author$project$Pages$Blank$view);
			case 'NotFound':
				return viewEmptyPage($author$project$Pages$NotFound$view);
			case 'HouseholdList':
				var model = page.a;
				return A2(
					viewPage,
					$author$project$Pages$Households$HouseholdsPage$view(model),
					$author$project$Main$GotHouseholdListMsg);
			case 'StudentRegistration':
				var model = page.a;
				return A2(
					viewPage,
					$author$project$Pages$Households$HouseholdRegistrationPage$view(model),
					$author$project$Main$GotStudentRegistrationMsg);
			case 'BusesList':
				var model = page.a;
				return A2(
					viewPage,
					$author$project$Pages$Buses$BusesPage$view(model),
					$author$project$Main$GotBusesListMsg);
			case 'BusRegistration':
				var model = page.a;
				return A2(
					viewPage,
					$author$project$Pages$Buses$CreateBusPage$view(model),
					$author$project$Main$GotBusRegistrationMsg);
			case 'BusDetailsPage':
				var model = page.a;
				return A2(
					viewPage,
					$author$project$Pages$Buses$BusPage$view(model),
					$author$project$Main$GotBusDetailsPageMsg);
			case 'CreateBusRepair':
				var model = page.a;
				return A2(
					viewPage,
					$author$project$Pages$Buses$CreateBusRepairPage$view(model),
					$author$project$Main$GotCreateBusRepairMsg);
			case 'DevicesList':
				var model = page.a;
				return A2(
					viewPage,
					$author$project$Pages$Devices$DevicesPage$view(model),
					$author$project$Main$GotDevicesListMsg);
			case 'DeviceRegistration':
				var model = page.a;
				return A2(
					viewPage,
					$author$project$Pages$Devices$DeviceRegistrationPage$view(model),
					$author$project$Main$GotDeviceRegistrationMsg);
			case 'RoutesList':
				var model = page.a;
				return A2(
					viewPage,
					$author$project$Pages$Routes$Routes$view(model),
					$author$project$Main$GotRoutesListMsg);
			case 'CrewMembers':
				var model = page.a;
				return A2(
					viewPage,
					$author$project$Pages$Crew$CrewMembersPage$view(model),
					$author$project$Main$GotCrewMembersMsg);
			default:
				var model = page.a;
				return A2(
					viewPage,
					$author$project$Pages$Crew$CrewMemberRegistrationPage$view(model),
					$author$project$Main$GotCrewMemberRegistrationMsg);
		}
	}();
	var layoutOptions = {
		options: _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$focusStyle(
				{backgroundColor: $elm$core$Maybe$Nothing, borderColor: $elm$core$Maybe$Nothing, shadow: $elm$core$Maybe$Nothing})
			])
	};
	return {
		body: _List_fromArray(
			[
				A3($mdgriffith$elm_ui$Element$layoutWith, layoutOptions, $author$project$Style$labelStyle, renderedView)
			]),
		title: 'Uchukuzi'
	};
};
var $author$project$Main$main = $elm$browser$Browser$application(
	{init: $author$project$Main$init, onUrlChange: $author$project$Main$UrlChanged, onUrlRequest: $author$project$Main$UrlRequested, subscriptions: $author$project$Main$subscriptions, update: $author$project$Main$update, view: $author$project$Main$view});
_Platform_export({'Main':{'init':$author$project$Main$main(
	$elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				$elm$json$Json$Decode$null($elm$core$Maybe$Nothing),
				A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, $elm$json$Json$Decode$value)
			])))({"versions":{"elm":"0.19.1"},"types":{"message":"Main.Msg","aliases":{"Session.Cred":{"args":[],"type":"{ name : String.String, email : String.String, token : String.String, school_id : Basics.Int }"},"Models.Location.Location":{"args":[],"type":"{ lng : Basics.Float, lat : Basics.Float }"},"Models.Bus.LocationUpdate":{"args":[],"type":"{ bus : Basics.Int, location : Models.Location.Location, speed : Basics.Float, bearing : Basics.Float }"},"Url.Url":{"args":[],"type":"{ protocol : Url.Protocol, host : String.String, port_ : Maybe.Maybe Basics.Int, path : String.String, query : Maybe.Maybe String.String, fragment : Maybe.Maybe String.String }"},"Element.Attribute":{"args":["msg"],"type":"Internal.Model.Attribute () msg"},"Models.Bus.Bus":{"args":[],"type":"{ id : Basics.Int, numberPlate : String.String, seats_available : Basics.Int, vehicleType : Models.Bus.VehicleType, stated_milage : Basics.Float, route : Maybe.Maybe Models.Bus.Route, device : Maybe.Maybe Models.Bus.Device, repairs : List.List Models.Bus.Repair, last_seen : Maybe.Maybe Models.Bus.LocationUpdate }"},"Pages.Devices.DeviceRegistrationPage.Bus":{"args":[],"type":"{ id : Basics.Int, numberPlate : String.String, hasDevice : Basics.Bool }"},"Pages.Devices.DevicesPage.Bus":{"args":[],"type":"{ id : Basics.Int, numberPlate : String.String }"},"Pages.Buses.BusPage.BusData":{"args":[],"type":"{ bus : Models.Bus.Bus, currentPage : Pages.Buses.BusPage.Page, pages : List.List ( Pages.Buses.BusPage.Icon, ( Pages.Buses.BusPage.Page, Platform.Cmd.Cmd Pages.Buses.BusPage.Msg ) ), pageIndex : Basics.Int, pendingAction : Platform.Cmd.Cmd Pages.Buses.BusPage.Msg }"},"Models.CrewMember.CrewMember":{"args":[],"type":"{ id : Basics.Int, name : String.String, role : Models.CrewMember.Role, email : String.String, phoneNumber : String.String, bus : Maybe.Maybe Basics.Int }"},"Pages.Crew.CrewMembersPage.Data":{"args":[],"type":"{ crew : List.List Models.CrewMember.CrewMember, buses : List.List Models.Bus.Bus }"},"Models.Bus.Device":{"args":[],"type":"String.String"},"Pages.Devices.DevicesPage.Device":{"args":[],"type":"{ imei : String.String, bus : Maybe.Maybe Pages.Devices.DevicesPage.Bus }"},"Element.Element":{"args":["msg"],"type":"Internal.Model.Element msg"},"Time.Era":{"args":[],"type":"{ start : Basics.Int, offset : Basics.Int }"},"Models.Household.Guardian":{"args":[],"type":"{ id : Basics.Int, name : String.String, phoneNumber : String.String, email : String.String }"},"Models.Household.Household":{"args":[],"type":"{ id : Basics.Int, guardian : Models.Household.Guardian, students : List.List Models.Household.Student }"},"Pages.Buses.BusPage.Icon":{"args":[],"type":"List.List (Element.Attribute Pages.Buses.BusPage.Msg) -> Element.Element Pages.Buses.BusPage.Msg"},"Models.Household.Location":{"args":[],"type":"{ lng : Basics.Float, lat : Basics.Float }"},"Pages.Households.HouseholdRegistrationPage.Location":{"args":[],"type":"{ longitude : Basics.Float, latitude : Basics.Float }"},"Pages.Signup.Location":{"args":[],"type":"{ lat : Basics.Float, lng : Basics.Float, radius : Basics.Float }"},"Models.Bus.Repair":{"args":[],"type":"{ id : Basics.Int, part : Models.Bus.Part, description : String.String, cost : Basics.Int, dateTime : Time.Posix }"},"Models.Bus.Route":{"args":[],"type":"{ id : String.String, name : String.String }"},"Models.Household.Student":{"args":[],"type":"{ name : String.String, travel_time : String.String, homeLocation : Models.Household.Location, pickupLocation : Models.Household.Location, route : String.String }"},"Pages.Households.HouseholdRegistrationPage.Student":{"args":[],"type":"{ name : String.String, time : Pages.Households.HouseholdRegistrationPage.TripTime }"},"Api.SuccessfulLogin":{"args":[],"type":"{ location : Models.Location.Location, creds : Session.Cred }"},"Pages.Devices.DeviceRegistrationPage.ValidForm":{"args":[],"type":"{ serial : String.String, bus_id : Maybe.Maybe Basics.Int }"},"RemoteData.WebData":{"args":["a"],"type":"RemoteData.RemoteData Http.Error a"},"Pages.Buses.BusRepairsPage.GroupedRepairs":{"args":[],"type":"( String.String, List.List Models.Bus.Repair )"},"Pages.Buses.TripsHistoryPage.GroupedTrips":{"args":[],"type":"( String.String, List.List Models.Trip.Trip )"},"Pages.Buses.AboutBus.Model":{"args":[],"type":"{ showGeofence : Basics.Bool, bus : Models.Bus.Bus, session : Session.Session, currentPage : Pages.Buses.AboutBus.Page }"},"Pages.Buses.BusDevicePage.Model":{"args":[],"type":"{ currentPage : Pages.Buses.BusDevicePage.Page, session : Session.Session, bus : Models.Bus.Bus }"},"Pages.Buses.BusRepairsPage.Model":{"args":[],"type":"{ busID : Basics.Int, repairs : List.List Models.Bus.Repair, timezone : Time.Zone, groupedRepairs : List.List Pages.Buses.BusRepairsPage.GroupedRepairs, currentPage : Pages.Buses.BusRepairsPage.Page, highlightedRepair : Maybe.Maybe Models.Bus.Repair }"},"Pages.Buses.FuelHistoryPage.Model":{"args":[],"type":"{ currentPage : Pages.Buses.FuelHistoryPage.Page }"},"Pages.Buses.TripsHistoryPage.Model":{"args":[],"type":"{ sliderValue : Basics.Int, showGeofence : Basics.Bool, showStops : Basics.Bool, trips : RemoteData.WebData (List.List Models.Trip.Trip), groupedTrips : List.List Pages.Buses.TripsHistoryPage.GroupedTrips, selectedGroup : Maybe.Maybe Pages.Buses.TripsHistoryPage.GroupedTrips, selectedTrip : Maybe.Maybe Models.Trip.Trip, timezone : Time.Zone }"},"Models.Trip.Report":{"args":[],"type":"{ location : Models.Location.Location, time : Time.Posix }"},"Http.Response":{"args":["body"],"type":"{ url : String.String, status : { code : Basics.Int, message : String.String }, headers : Dict.Dict String.String String.String, body : body }"},"Models.Trip.StudentActivity":{"args":[],"type":"{ location : Models.Location.Location, time : Time.Posix, activity : String.String, student : Basics.Int, studentName : String.String }"},"Models.Trip.Trip":{"args":[],"type":"{ startTime : Time.Posix, endTime : Time.Posix, reports : List.List Models.Trip.Report, studentActivities : List.List Models.Trip.StudentActivity, distanceCovered : Basics.Float }"},"Internal.Model.FocusStyle":{"args":[],"type":"{ borderColor : Maybe.Maybe Internal.Model.Color, shadow : Maybe.Maybe Internal.Model.Shadow, backgroundColor : Maybe.Maybe Internal.Model.Color }"},"Internal.Model.OptionRecord":{"args":[],"type":"{ hover : Internal.Model.HoverSetting, focus : Internal.Model.FocusStyle, mode : Internal.Model.RenderMode }"},"Internal.Model.Shadow":{"args":[],"type":"{ color : Internal.Model.Color, offset : ( Basics.Int, Basics.Int ), blur : Basics.Int, size : Basics.Int }"},"Internal.Model.XYZ":{"args":[],"type":"( Basics.Float, Basics.Float, Basics.Float )"},"Internal.Model.Adjustment":{"args":[],"type":"{ capital : Basics.Float, lowercase : Basics.Float, baseline : Basics.Float, descender : Basics.Float }"},"Internal.Model.Angle":{"args":[],"type":"Basics.Float"}},"unions":{"Main.Msg":{"args":[],"tags":{"UrlRequested":["Browser.UrlRequest"],"UrlChanged":["Url.Url"],"ReceivedCreds":["Maybe.Maybe Session.Cred"],"UpdatedTimeZone":["Time.Zone"],"WindowResized":["Basics.Int","Basics.Int"],"GotNavBarMsg":["Template.NavBar.Msg"],"GotHouseholdListMsg":["Pages.Households.HouseholdsPage.Msg"],"GotHomeMsg":["()"],"GotLoginMsg":["Pages.Login.Msg"],"GotLogoutMsg":["()"],"GotSignupMsg":["Pages.Signup.Msg"],"GotRoutesListMsg":["Pages.Routes.Routes.Msg"],"GotBusesListMsg":["Pages.Buses.BusesPage.Msg"],"GotBusDetailsPageMsg":["Pages.Buses.BusPage.Msg"],"GotBusRegistrationMsg":["Pages.Buses.CreateBusPage.Msg"],"GotCreateBusRepairMsg":["Pages.Buses.CreateBusRepairPage.Msg"],"GotStudentRegistrationMsg":["Pages.Households.HouseholdRegistrationPage.Msg"],"GotDevicesListMsg":["Pages.Devices.DevicesPage.Msg"],"GotDeviceRegistrationMsg":["Pages.Devices.DeviceRegistrationPage.Msg"],"GotCrewMembersMsg":["Pages.Crew.CrewMembersPage.Msg"],"GotCrewMemberRegistrationMsg":["Pages.Crew.CrewMemberRegistrationPage.Msg"],"BusMoved":["Models.Bus.LocationUpdate"]}},"Basics.Float":{"args":[],"tags":{"Float":[]}},"Basics.Int":{"args":[],"tags":{"Int":[]}},"Maybe.Maybe":{"args":["a"],"tags":{"Just":["a"],"Nothing":[]}},"Pages.Buses.BusPage.Msg":{"args":[],"tags":{"GotAboutMsg":["Pages.Buses.AboutBus.Msg"],"GotRouteHistoryMsg":["Pages.Buses.TripsHistoryPage.Msg"],"GotFuelHistoryMsg":["Pages.Buses.FuelHistoryPage.Msg"],"GotBusDeviceMsg":["Pages.Buses.BusDevicePage.Msg"],"GotBusRepairsMsg":["Pages.Buses.BusRepairsPage.Msg"],"SelectedPage":["Basics.Int"],"ServerResponse":["RemoteData.WebData Pages.Buses.BusPage.BusData"],"LocationUpdate":["Models.Bus.LocationUpdate"],"MapReady":["Basics.Bool"]}},"Pages.Buses.BusesPage.Msg":{"args":[],"tags":{"SelectedBus":["Models.Bus.Bus"],"CreateBus":[],"ChangedFilterText":["String.String"],"ServerResponse":["RemoteData.WebData (List.List Models.Bus.Bus)"],"LocationUpdate":["Dict.Dict Basics.Int Models.Bus.LocationUpdate"],"MapReady":["Basics.Bool"],"PreviewBus":["Maybe.Maybe Models.Bus.Bus"]}},"Pages.Buses.CreateBusPage.Msg":{"args":[],"tags":{"Changed":["Pages.Buses.CreateBusPage.Field"],"SubmitButtonMsg":[],"ServerResponse":["RemoteData.WebData Basics.Int"],"RouteDropdownMsg":["StyledElement.DropDown.Msg String.String"],"FuelDropdownMsg":["StyledElement.DropDown.Msg Pages.Buses.CreateBusPage.FuelType"],"ConsumptionDropdownMsg":["StyledElement.DropDown.Msg Pages.Buses.CreateBusPage.ConsumptionType"]}},"Pages.Buses.CreateBusRepairPage.Msg":{"args":[],"tags":{"Submit":[],"ServerResponse":["RemoteData.WebData ()"],"NoOp":[],"StartedDragging":["Pages.Buses.CreateBusRepairPage.Draggable"],"StoppedDragging":[],"DropOn":[],"DraggedOver":[],"Delete":["Basics.Int"],"ChangedDescription":["Basics.Int","String.String"],"ChangedCost":["Basics.Int","String.String"]}},"Pages.Crew.CrewMemberRegistrationPage.Msg":{"args":[],"tags":{"Changed":["Pages.Crew.CrewMemberRegistrationPage.Field"],"SubmitButtonMsg":[],"ServerResponse":["RemoteData.WebData ()"],"CrewMemberResponse":["RemoteData.WebData Models.CrewMember.CrewMember"],"RoleDropdownMsg":["StyledElement.DropDown.Msg Models.CrewMember.Role"]}},"Pages.Crew.CrewMembersPage.Msg":{"args":[],"tags":{"ServerResponse":["RemoteData.WebData Pages.Crew.CrewMembersPage.Data"],"StartEditing":[],"CancelEdits":[],"SaveChanges":[],"SelectedCrewMember":["Maybe.Maybe Models.CrewMember.CrewMember"],"EditCrewMember":["Models.CrewMember.CrewMember"],"StartedDragging":["Models.CrewMember.CrewMember"],"StoppedDragging":["Models.CrewMember.CrewMember"],"DroppedCrewMemberOnto":["Models.Bus.Bus"],"DraggedCrewMemberAbove":["Basics.Int"],"DroppedCrewMemberOntoUnassigned":[],"DraggedCrewMemberAboveUnassigned":[]}},"Pages.Devices.DeviceRegistrationPage.Msg":{"args":[],"tags":{"ChangedDeviceSerial":["String.String"],"SubmitButtonMsg":[],"BusesServerResponse":["RemoteData.WebData (List.List Pages.Devices.DeviceRegistrationPage.Bus)"],"RegisterResponse":["RemoteData.WebData Pages.Devices.DeviceRegistrationPage.ValidForm"],"ToggleCamera":[],"CameraOpened":["Basics.Bool"],"GotCameraNotFoundError":[],"ReceivedCode":["String.String"],"BusPicked":["Maybe.Maybe Pages.Devices.DeviceRegistrationPage.Bus"],"DropdownMsg":["StyledElement.DropDown.Msg Pages.Devices.DeviceRegistrationPage.Bus"]}},"Pages.Devices.DevicesPage.Msg":{"args":[],"tags":{"ServerResponse":["RemoteData.WebData (List.List Pages.Devices.DevicesPage.Device)"]}},"Pages.Households.HouseholdRegistrationPage.Msg":{"args":[],"tags":{"Changed":["Pages.Households.HouseholdRegistrationPage.Field"],"DropdownMsg":["StyledElement.DropDown.Msg String.String"],"SearchDropdownMsg":["StyledElement.DropDown.Msg Pages.Households.HouseholdRegistrationPage.Location"],"SaveStudentPressed":[],"DeleteStudentMsg":["Pages.Households.HouseholdRegistrationPage.Student"],"SubmitButtonMsg":[],"ServerResponse":["RemoteData.WebData Basics.Int"]}},"Pages.Households.HouseholdsPage.Msg":{"args":[],"tags":{"SelectedHousehold":[],"SelectedStudent":["Models.Household.Student"],"StudentsResponse":["RemoteData.WebData (List.List Models.Household.Household)"],"NoOp":[]}},"Pages.Login.Msg":{"args":[],"tags":{"UpdatedEmail":["String.String"],"UpdatedPassword":["String.String"],"SubmittedForm":[],"LoginResponse":["RemoteData.WebData Api.SuccessfulLogin"]}},"Pages.Routes.Routes.Msg":{"args":[],"tags":{"Add":[]}},"Pages.Signup.Msg":{"args":[],"tags":{"UpdatedFirstName":["Pages.Signup.Name"],"UpdatedLastName":["Pages.Signup.Name"],"UpdatedSchoolName":["Pages.Signup.Name"],"UpdatedEmail":["Pages.Signup.Email"],"UpdatedPassword":["Pages.Signup.Password"],"RequestGeoLocation":[],"LocationSelected":["Maybe.Maybe Pages.Signup.Location"],"ToManagerForm":[],"ToSchoolForm":[],"SubmittedForm":[],"SignupResponse":["RemoteData.WebData Api.SuccessfulLogin"]}},"Template.NavBar.Msg":{"args":[],"tags":{"Logout":[],"ToggleDropDown":[],"HideDropDown":[]}},"Url.Protocol":{"args":[],"tags":{"Http":[],"Https":[]}},"String.String":{"args":[],"tags":{"String":[]}},"Browser.UrlRequest":{"args":[],"tags":{"Internal":["Url.Url"],"External":["String.String"]}},"Time.Zone":{"args":[],"tags":{"Zone":["Basics.Int","List.List Time.Era"]}},"Internal.Model.Attribute":{"args":["aligned","msg"],"tags":{"NoAttribute":[],"Attr":["VirtualDom.Attribute msg"],"Describe":["Internal.Model.Description"],"Class":["Internal.Flag.Flag","String.String"],"StyleClass":["Internal.Flag.Flag","Internal.Model.Style"],"AlignY":["Internal.Model.VAlign"],"AlignX":["Internal.Model.HAlign"],"Width":["Internal.Model.Length"],"Height":["Internal.Model.Length"],"Nearby":["Internal.Model.Location","Internal.Model.Element msg"],"TransformComponent":["Internal.Flag.Flag","Internal.Model.TransformComponent"]}},"Basics.Bool":{"args":[],"tags":{"True":[],"False":[]}},"Platform.Cmd.Cmd":{"args":["msg"],"tags":{"Cmd":[]}},"Pages.Buses.CreateBusPage.ConsumptionType":{"args":[],"tags":{"Custom":[],"Default":[]}},"Dict.Dict":{"args":["k","v"],"tags":{"RBNode_elm_builtin":["Dict.NColor","k","v","Dict.Dict k v","Dict.Dict k v"],"RBEmpty_elm_builtin":[]}},"Pages.Buses.CreateBusRepairPage.Draggable":{"args":[],"tags":{"Part":["Models.Bus.Part"],"Record":["Basics.Int"]}},"Internal.Model.Element":{"args":["msg"],"tags":{"Unstyled":["Internal.Model.LayoutContext -> VirtualDom.Node msg"],"Styled":["{ styles : List.List Internal.Model.Style, html : Internal.Model.EmbedStyle -> Internal.Model.LayoutContext -> VirtualDom.Node msg }"],"Text":["String.String"],"Empty":[]}},"Pages.Signup.Email":{"args":[],"tags":{"Email":["String.String"]}},"Http.Error":{"args":[],"tags":{"BadUrl":["String.String"],"Timeout":[],"NetworkError":[],"BadStatus":["Http.Response String.String"],"BadPayload":["String.String","Http.Response String.String"]}},"Pages.Buses.CreateBusPage.Field":{"args":[],"tags":{"VehicleType":["Models.Bus.VehicleType"],"FuelType":["Pages.Buses.CreateBusPage.FuelType"],"NumberPlate":["String.String"],"SeatsAvailable":["Basics.Int"],"Route":["Maybe.Maybe String.String"],"FuelConsumptionType":["Pages.Buses.CreateBusPage.ConsumptionType"],"FuelConsumptionAmount":["StyledElement.FloatInput.FloatInput"]}},"Pages.Crew.CrewMemberRegistrationPage.Field":{"args":[],"tags":{"Name":["String.String"],"Email":["String.String"],"PhoneNumber":["String.String"],"Role":["Maybe.Maybe Models.CrewMember.Role"]}},"Pages.Households.HouseholdRegistrationPage.Field":{"args":[],"tags":{"CurrentStudentName":["String.String"],"GuardianName":["String.String"],"HomeLocation":["Maybe.Maybe Pages.Households.HouseholdRegistrationPage.Location"],"Email":["String.String"],"PhoneNumber":["String.String"],"Route":["Maybe.Maybe String.String"],"CanTrack":["Basics.Bool"],"TripTime":["Pages.Households.HouseholdRegistrationPage.Student","Pages.Households.HouseholdRegistrationPage.TripTime","Basics.Bool"]}},"Pages.Buses.CreateBusPage.FuelType":{"args":[],"tags":{"Gasoline":[],"Diesel":[]}},"List.List":{"args":["a"],"tags":{}},"Pages.Buses.AboutBus.Msg":{"args":[],"tags":{"ClickedStatisticsPage":[],"ClickedStudentsPage":[],"SelectedStudent":["Basics.Int"],"ClickedRoute":[],"ClickedCrewPage":[],"LocationUpdate":["Models.Bus.LocationUpdate"]}},"Pages.Buses.BusDevicePage.Msg":{"args":[],"tags":{"AddDevice":[],"RemoveDevice":[],"ClickedAboutPage":[],"ClickedFeaturesPage":[]}},"Pages.Buses.BusRepairsPage.Msg":{"args":[],"tags":{"ClickedSummaryPage":[],"ClickedPastRepairsPage":[],"HoveredOver":["Maybe.Maybe Models.Bus.Repair"]}},"Pages.Buses.FuelHistoryPage.Msg":{"args":[],"tags":{"ClickedSummaryPage":[],"ClickedConsumptionSpikesPage":[]}},"Pages.Buses.TripsHistoryPage.Msg":{"args":[],"tags":{"AdjustedValue":["Basics.Int"],"ToggledShowGeofence":["Basics.Bool"],"ToggledShowStops":["Basics.Bool"],"TripsResponse":["RemoteData.WebData (List.List Models.Trip.Trip)"],"ClickedOn":["Models.Trip.Trip"],"SelectedGroup":["Pages.Buses.TripsHistoryPage.GroupedTrips"]}},"StyledElement.DropDown.Msg":{"args":["item"],"tags":{"NoOp":[],"OnBlur":[],"OnClickPrompt":[],"OnSelect":["item"],"OnFilterTyped":["String.String"],"OnKeyDown":["StyledElement.DropDown.Key"]}},"Pages.Signup.Name":{"args":[],"tags":{"Name":["String.String"]}},"Pages.Buses.BusPage.Page":{"args":[],"tags":{"About":["Pages.Buses.AboutBus.Model"],"RouteHistory":["Pages.Buses.TripsHistoryPage.Model"],"FuelHistory":["Pages.Buses.FuelHistoryPage.Model"],"BusDevice":["Pages.Buses.BusDevicePage.Model"],"BusRepairs":["Pages.Buses.BusRepairsPage.Model"]}},"Models.Bus.Part":{"args":[],"tags":{"FrontLeftTire":[],"FrontRightTire":[],"RearLeftTire":[],"RearRightTire":[],"Engine":[],"FrontCrossAxis":[],"RearCrossAxis":[],"VerticalAxis":[]}},"Pages.Signup.Password":{"args":[],"tags":{"Password":["String.String"]}},"Time.Posix":{"args":[],"tags":{"Posix":["Basics.Int"]}},"RemoteData.RemoteData":{"args":["e","a"],"tags":{"NotAsked":[],"Loading":[],"Failure":["e"],"Success":["a"]}},"Models.CrewMember.Role":{"args":[],"tags":{"Driver":[],"Assistant":[]}},"Pages.Households.HouseholdRegistrationPage.TripTime":{"args":[],"tags":{"TwoWay":[],"Morning":[],"Evening":[]}},"Models.Bus.VehicleType":{"args":[],"tags":{"Van":[],"Shuttle":[],"SchoolBus":[]}},"VirtualDom.Attribute":{"args":["msg"],"tags":{"Attribute":[]}},"Internal.Model.Description":{"args":[],"tags":{"Main":[],"Navigation":[],"ContentInfo":[],"Complementary":[],"Heading":["Basics.Int"],"Label":["String.String"],"LivePolite":[],"LiveAssertive":[],"Button":[],"Paragraph":[]}},"Internal.Model.EmbedStyle":{"args":[],"tags":{"NoStyleSheet":[],"StaticRootAndDynamic":["Internal.Model.OptionRecord","List.List Internal.Model.Style"],"OnlyDynamic":["Internal.Model.OptionRecord","List.List Internal.Model.Style"]}},"Internal.Flag.Flag":{"args":[],"tags":{"Flag":["Basics.Int"],"Second":["Basics.Int"]}},"StyledElement.FloatInput.FloatInput":{"args":[],"tags":{"FloatInput":["Basics.Float","String.String"]}},"Internal.Model.HAlign":{"args":[],"tags":{"Left":[],"CenterX":[],"Right":[]}},"StyledElement.DropDown.Key":{"args":[],"tags":{"ArrowDown":[],"ArrowUp":[],"Enter":[],"Esc":[]}},"Internal.Model.LayoutContext":{"args":[],"tags":{"AsRow":[],"AsColumn":[],"AsEl":[],"AsGrid":[],"AsParagraph":[],"AsTextColumn":[]}},"Internal.Model.Length":{"args":[],"tags":{"Px":["Basics.Int"],"Content":[],"Fill":["Basics.Int"],"Min":["Basics.Int","Internal.Model.Length"],"Max":["Basics.Int","Internal.Model.Length"]}},"Internal.Model.Location":{"args":[],"tags":{"Above":[],"Below":[],"OnRight":[],"OnLeft":[],"InFront":[],"Behind":[]}},"Dict.NColor":{"args":[],"tags":{"Red":[],"Black":[]}},"VirtualDom.Node":{"args":["msg"],"tags":{"Node":[]}},"Pages.Buses.AboutBus.Page":{"args":[],"tags":{"Statistics":[],"Students":["Maybe.Maybe Basics.Int"],"Route":[],"Crew":[]}},"Pages.Buses.BusDevicePage.Page":{"args":[],"tags":{"About":[],"Features":[]}},"Pages.Buses.BusRepairsPage.Page":{"args":[],"tags":{"Summary":[],"PastRepairs":[]}},"Pages.Buses.FuelHistoryPage.Page":{"args":[],"tags":{"Summary":[],"ConsumptionSpikes":[]}},"Session.Session":{"args":[],"tags":{"LoggedIn":["Browser.Navigation.Key","Time.Zone","Session.Cred"],"Guest":["Browser.Navigation.Key","Time.Zone"]}},"Internal.Model.Style":{"args":[],"tags":{"Style":["String.String","List.List Internal.Model.Property"],"FontFamily":["String.String","List.List Internal.Model.Font"],"FontSize":["Basics.Int"],"Single":["String.String","String.String","String.String"],"Colored":["String.String","String.String","Internal.Model.Color"],"SpacingStyle":["String.String","Basics.Int","Basics.Int"],"BorderWidth":["String.String","Basics.Int","Basics.Int","Basics.Int","Basics.Int"],"PaddingStyle":["String.String","Basics.Int","Basics.Int","Basics.Int","Basics.Int"],"GridTemplateStyle":["{ spacing : ( Internal.Model.Length, Internal.Model.Length ), columns : List.List Internal.Model.Length, rows : List.List Internal.Model.Length }"],"GridPosition":["{ row : Basics.Int, col : Basics.Int, width : Basics.Int, height : Basics.Int }"],"Transform":["Internal.Model.Transformation"],"PseudoSelector":["Internal.Model.PseudoClass","List.List Internal.Model.Style"],"Transparency":["String.String","Basics.Float"],"Shadows":["String.String","String.String"]}},"Internal.Model.TransformComponent":{"args":[],"tags":{"MoveX":["Basics.Float"],"MoveY":["Basics.Float"],"MoveZ":["Basics.Float"],"MoveXYZ":["Internal.Model.XYZ"],"Rotate":["Internal.Model.XYZ","Basics.Float"],"Scale":["Internal.Model.XYZ"]}},"Internal.Model.VAlign":{"args":[],"tags":{"Top":[],"CenterY":[],"Bottom":[]}},"Internal.Model.Color":{"args":[],"tags":{"Rgba":["Basics.Float","Basics.Float","Basics.Float","Basics.Float"]}},"Internal.Model.Font":{"args":[],"tags":{"Serif":[],"SansSerif":[],"Monospace":[],"Typeface":["String.String"],"ImportFont":["String.String","String.String"],"FontWith":["{ name : String.String, adjustment : Maybe.Maybe Internal.Model.Adjustment, variants : List.List Internal.Model.Variant }"]}},"Internal.Model.HoverSetting":{"args":[],"tags":{"NoHover":[],"AllowHover":[],"ForceHover":[]}},"Browser.Navigation.Key":{"args":[],"tags":{"Key":[]}},"Internal.Model.Property":{"args":[],"tags":{"Property":["String.String","String.String"]}},"Internal.Model.PseudoClass":{"args":[],"tags":{"Focus":[],"Hover":[],"Active":[]}},"Internal.Model.RenderMode":{"args":[],"tags":{"Layout":[],"NoStaticStyleSheet":[],"WithVirtualCss":[]}},"Internal.Model.Transformation":{"args":[],"tags":{"Untransformed":[],"Moved":["Internal.Model.XYZ"],"FullTransform":["Internal.Model.XYZ","Internal.Model.XYZ","Internal.Model.XYZ","Internal.Model.Angle"]}},"Internal.Model.Variant":{"args":[],"tags":{"VariantActive":["String.String"],"VariantOff":["String.String"],"VariantIndexed":["String.String","Basics.Int"]}}}}})}});

//////////////////// HMR BEGIN ////////////////////

/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Original Author: Flux Xu @fluxxu
*/

/*
    A note about the environment that this code runs in...

    assumed globals:
        - `module` (from Node.js module system and webpack)

    assumed in scope after injection into the Elm IIFE:
        - `scope` (has an 'Elm' property which contains the public Elm API)
        - various functions defined by Elm which we have to hook such as `_Platform_initialize` and `_Scheduler_binding`
 */

if (module.hot) {
    (function () {
        "use strict";

        //polyfill for IE: https://github.com/fluxxu/elm-hot-loader/issues/16
        if (typeof Object.assign != 'function') {
            Object.assign = function (target) {
                'use strict';
                if (target == null) {
                    throw new TypeError('Cannot convert undefined or null to object');
                }

                target = Object(target);
                for (var index = 1; index < arguments.length; index++) {
                    var source = arguments[index];
                    if (source != null) {
                        for (var key in source) {
                            if (Object.prototype.hasOwnProperty.call(source, key)) {
                                target[key] = source[key];
                            }
                        }
                    }
                }
                return target;
            };
        }

        // Elm 0.19.1 introduced a '$' prefix at the beginning of the symbols it emits,
        // and we check for `Maybe.Just` because we expect it to be present in all Elm programs.
        var elmVersion;
        if (typeof elm$core$Maybe$Just !== 'undefined')
            elmVersion = '0.19.0';
        else if (typeof $elm$core$Maybe$Just !== 'undefined')
            elmVersion = '0.19.1';
        else
            throw new Error("Could not determine Elm version");

        function elmSymbol(symbol) {
            try {
                switch (elmVersion) {
                    case '0.19.0':
                        return eval(symbol);
                    case '0.19.1':
                        return eval('$' + symbol);
                    default:
                        throw new Error('Cannot resolve ' + symbol + '. Elm version unknown!')
                }
            } catch (e) {
                if (e instanceof ReferenceError) {
                    return undefined;
                } else {
                    throw e;
                }
            }
        }

        var instances = module.hot.data
            ? module.hot.data.instances || {}
            : {};
        var uid = module.hot.data
            ? module.hot.data.uid || 0
            : 0;

        if (Object.keys(instances).length === 0) {
            log("[elm-hot] Enabled");
        }

        var cancellers = [];

        // These 2 variables act as dynamically-scoped variables which are set only when the
        // Elm module's hooked init function is called.
        var initializingInstance = null;
        var swappingInstance = null;

        module.hot.accept();
        module.hot.dispose(function (data) {
            data.instances = instances;
            data.uid = uid;

            // Cleanup pending async tasks

            // First, make sure that no new tasks can be started until we finish replacing the code
            _Scheduler_binding = function () {
                return _Scheduler_fail(new Error('[elm-hot] Inactive Elm instance.'))
            };

            // Second, kill pending tasks belonging to the old instance
            if (cancellers.length) {
                log('[elm-hot] Killing ' + cancellers.length + ' running processes...');
                try {
                    cancellers.forEach(function (cancel) {
                        cancel();
                    });
                } catch (e) {
                    console.warn('[elm-hot] Kill process error: ' + e.message);
                }
            }
        });

        function log(message) {
            if (module.hot.verbose) {
                console.log(message)
            }
        }

        function getId() {
            return ++uid;
        }

        function findPublicModules(parent, path) {
            var modules = [];
            for (var key in parent) {
                var child = parent[key];
                var currentPath = path ? path + '.' + key : key;
                if ('init' in child) {
                    modules.push({
                        path: currentPath,
                        module: child
                    });
                } else {
                    modules = modules.concat(findPublicModules(child, currentPath));
                }
            }
            return modules;
        }

        function registerInstance(domNode, flags, path, portSubscribes, portSends) {
            var id = getId();

            var instance = {
                id: id,
                path: path,
                domNode: domNode,
                flags: flags,
                portSubscribes: portSubscribes,
                portSends: portSends,
                lastState: null // last Elm app state (root model)
            };

            return instances[id] = instance
        }

        function isFullscreenApp() {
            // Returns true if the Elm app will take over the entire DOM body.
            return typeof elmSymbol("elm$browser$Browser$application") !== 'undefined'
                || typeof elmSymbol("elm$browser$Browser$document") !== 'undefined';
        }

        function wrapDomNode(node) {
            // When embedding an Elm app into a specific DOM node, Elm will replace the provided
            // DOM node with the Elm app's content. When the Elm app is compiled normally, the
            // original DOM node is reused (its attributes and content changes, but the object
            // in memory remains the same). But when compiled using `--debug`, Elm will completely
            // destroy the original DOM node and instead replace it with 2 brand new nodes: one
            // for your Elm app's content and the other for the Elm debugger UI. In this case,
            // if you held a reference to the DOM node provided for embedding, it would be orphaned
            // after Elm module initialization.
            //
            // So in order to make both cases consistent and isolate us from changes in how Elm
            // does this, we will insert a dummy node to wrap the node for embedding and hold
            // a reference to the dummy node.
            //
            // We will also put a tag on the dummy node so that the Elm developer knows who went
            // behind their back and rudely put stuff in their DOM.
            var dummyNode = document.createElement("div");
            dummyNode.setAttribute("data-elm-hot", "true");
            dummyNode.style.height = "inherit";
            var parentNode = node.parentNode;
            parentNode.replaceChild(dummyNode, node);
            dummyNode.appendChild(node);
            return dummyNode;
        }

        function wrapPublicModule(path, module) {
            var originalInit = module.init;
            if (originalInit) {
                module.init = function (args) {
                    var elm;
                    var portSubscribes = {};
                    var portSends = {};
                    var domNode = null;
                    var flags = null;
                    if (typeof args !== 'undefined') {
                        // normal case
                        domNode = args['node'] && !isFullscreenApp()
                            ? wrapDomNode(args['node'])
                            : document.body;
                        flags = args['flags'];
                    } else {
                        // rare case: Elm allows init to be called without any arguments at all
                        domNode = document.body;
                        flags = undefined
                    }
                    initializingInstance = registerInstance(domNode, flags, path, portSubscribes, portSends);
                    elm = originalInit(args);
                    wrapPorts(elm, portSubscribes, portSends);
                    initializingInstance = null;
                    return elm;
                };
            } else {
                console.error("Could not find a public module to wrap at path " + path)
            }
        }

        function swap(Elm, instance) {
            log('[elm-hot] Hot-swapping module: ' + instance.path);

            swappingInstance = instance;

            // remove from the DOM everything that had been created by the old Elm app
            var containerNode = instance.domNode;
            while (containerNode.lastChild) {
                containerNode.removeChild(containerNode.lastChild);
            }

            var m = getAt(instance.path.split('.'), Elm);
            var elm;
            if (m) {
                // prepare to initialize the new Elm module
                var args = {flags: instance.flags};
                if (containerNode === document.body) {
                    // fullscreen case: no additional args needed
                } else {
                    // embed case: provide a new node for Elm to use
                    var nodeForEmbed = document.createElement("div");
                    containerNode.appendChild(nodeForEmbed);
                    args['node'] = nodeForEmbed;
                }

                elm = m.init(args);

                Object.keys(instance.portSubscribes).forEach(function (portName) {
                    if (portName in elm.ports && 'subscribe' in elm.ports[portName]) {
                        var handlers = instance.portSubscribes[portName];
                        if (!handlers.length) {
                            return;
                        }
                        log('[elm-hot] Reconnect ' + handlers.length + ' handler(s) to port \''
                            + portName + '\' (' + instance.path + ').');
                        handlers.forEach(function (handler) {
                            elm.ports[portName].subscribe(handler);
                        });
                    } else {
                        delete instance.portSubscribes[portName];
                        log('[elm-hot] Port was removed: ' + portName);
                    }
                });

                Object.keys(instance.portSends).forEach(function (portName) {
                    if (portName in elm.ports && 'send' in elm.ports[portName]) {
                        log('[elm-hot] Replace old port send with the new send');
                        instance.portSends[portName] = elm.ports[portName].send;
                    } else {
                        delete instance.portSends[portName];
                        log('[elm-hot] Port was removed: ' + portName);
                    }
                });
            } else {
                log('[elm-hot] Module was removed: ' + instance.path);
            }

            swappingInstance = null;
        }

        function wrapPorts(elm, portSubscribes, portSends) {
            var portNames = Object.keys(elm.ports || {});
            //hook ports
            if (portNames.length) {
                // hook outgoing ports
                portNames
                    .filter(function (name) {
                        return 'subscribe' in elm.ports[name];
                    })
                    .forEach(function (portName) {
                        var port = elm.ports[portName];
                        var subscribe = port.subscribe;
                        var unsubscribe = port.unsubscribe;
                        elm.ports[portName] = Object.assign(port, {
                            subscribe: function (handler) {
                                log('[elm-hot] ports.' + portName + '.subscribe called.');
                                if (!portSubscribes[portName]) {
                                    portSubscribes[portName] = [handler];
                                } else {
                                    //TODO handle subscribing to single handler more than once?
                                    portSubscribes[portName].push(handler);
                                }
                                return subscribe.call(port, handler);
                            },
                            unsubscribe: function (handler) {
                                log('[elm-hot] ports.' + portName + '.unsubscribe called.');
                                var list = portSubscribes[portName];
                                if (list && list.indexOf(handler) !== -1) {
                                    list.splice(list.lastIndexOf(handler), 1);
                                } else {
                                    console.warn('[elm-hot] ports.' + portName + '.unsubscribe: handler not subscribed');
                                }
                                return unsubscribe.call(port, handler);
                            }
                        });
                    });

                // hook incoming ports
                portNames
                    .filter(function (name) {
                        return 'send' in elm.ports[name];
                    })
                    .forEach(function (portName) {
                        var port = elm.ports[portName];
                        portSends[portName] = port.send;
                        elm.ports[portName] = Object.assign(port, {
                            send: function (val) {
                                return portSends[portName].call(port, val);
                            }
                        });
                    });
            }
            return portSubscribes;
        }

        /*
        Breadth-first search for a `Browser.Navigation.Key` in the user's app model.
        Returns the key and keypath or null if not found.
        */
        function findNavKey(rootModel) {
            var queue = [];
            if (isDebuggerModel(rootModel)) {
                /*
                 Extract the user's app model from the Elm Debugger's model. The Elm debugger
                 can hold multiple references to the user's model (e.g. in its "history"). So
                 we must be careful to only search within the "state" part of the Debugger.
                */
                queue.push({value: rootModel['state'], keypath: ['state']});
            } else {
                queue.push({value: rootModel, keypath: []});
            }

            while (queue.length !== 0) {
                var item = queue.shift();

                if (typeof item.value === "undefined" || item.value === null) {
                    continue;
                }

                // The nav key is identified by a runtime tag added by the elm-hot injector.
                if (item.value.hasOwnProperty("elm-hot-nav-key")) {
                    // found it!
                    return item;
                }

                if (typeof item.value !== "object") {
                    continue;
                }

                for (var propName in item.value) {
                    if (!item.value.hasOwnProperty(propName)) continue;
                    var newKeypath = item.keypath.slice();
                    newKeypath.push(propName);
                    queue.push({value: item.value[propName], keypath: newKeypath})
                }
            }

            return null;
        }


        function isDebuggerModel(model) {
            // Up until elm/browser 1.0.2, the Elm debugger could be identified by a
            // property named "expando". But in version 1.0.2 that was renamed to "expandoModel"
            return model
                && (model.hasOwnProperty("expando") || model.hasOwnProperty("expandoModel"))
                && model.hasOwnProperty("state");
        }

        function getAt(keyPath, obj) {
            return keyPath.reduce(function (xs, x) {
                return (xs && xs[x]) ? xs[x] : null
            }, obj)
        }

        function removeNavKeyListeners(navKey) {
            window.removeEventListener('popstate', navKey.value);
            window.navigator.userAgent.indexOf('Trident') < 0 || window.removeEventListener('hashchange', navKey.value);
        }

        // hook program creation
        var initialize = _Platform_initialize;
        _Platform_initialize = function (flagDecoder, args, init, update, subscriptions, stepperBuilder) {
            var instance = initializingInstance || swappingInstance;
            var tryFirstRender = !!swappingInstance;

            var hookedInit = function (args) {
                var initialStateTuple = init(args);
                if (swappingInstance) {
                    var oldModel = swappingInstance.lastState;
                    var newModel = initialStateTuple.a;

                    if (typeof elmSymbol("elm$browser$Browser$application") !== 'undefined') {
                        var oldKeyLoc = findNavKey(oldModel);

                        // attempt to find the Browser.Navigation.Key in the newly-constructed model
                        // and bring it along with the rest of the old data.
                        var newKeyLoc = findNavKey(newModel);
                        var error = null;
                        if (newKeyLoc === null) {
                            error = "could not find Browser.Navigation.Key in the new app model";
                        } else if (oldKeyLoc === null) {
                            error = "could not find Browser.Navigation.Key in the old app model.";
                        } else if (newKeyLoc.keypath.toString() !== oldKeyLoc.keypath.toString()) {
                            error = "the location of the Browser.Navigation.Key in the model has changed.";
                        } else {
                            // remove event listeners attached to the old nav key
                            removeNavKeyListeners(oldKeyLoc.value);

                            // insert the new nav key into the old model in the exact same location
                            var parentKeyPath = oldKeyLoc.keypath.slice(0, -1);
                            var lastSegment = oldKeyLoc.keypath.slice(-1)[0];
                            var oldParent = getAt(parentKeyPath, oldModel);
                            oldParent[lastSegment] = newKeyLoc.value;
                        }

                        if (error !== null) {
                            console.error("[elm-hot] Hot-swapping " + instance.path + " not possible: " + error);
                            oldModel = newModel;
                        }
                    }

                    // the heart of the app state hot-swap
                    initialStateTuple.a = oldModel;

                    // ignore any Cmds returned by the init during hot-swap
                    initialStateTuple.b = elmSymbol("elm$core$Platform$Cmd$none");
                } else {
                    // capture the initial state for later
                    initializingInstance.lastState = initialStateTuple.a;
                }

                return initialStateTuple
            };

            var hookedStepperBuilder = function (sendToApp, model) {
                var result;
                // first render may fail if shape of model changed too much
                if (tryFirstRender) {
                    tryFirstRender = false;
                    try {
                        result = stepperBuilder(sendToApp, model)
                    } catch (e) {
                        throw new Error('[elm-hot] Hot-swapping ' + instance.path +
                            ' is not possible, please reload page. Error: ' + e.message)
                    }
                } else {
                    result = stepperBuilder(sendToApp, model)
                }

                return function (nextModel, isSync) {
                    if (instance) {
                        // capture the state after every step so that later we can restore from it during a hot-swap
                        instance.lastState = nextModel
                    }
                    return result(nextModel, isSync)
                }
            };

            return initialize(flagDecoder, args, hookedInit, update, subscriptions, hookedStepperBuilder)
        };

        // hook process creation
        var originalBinding = _Scheduler_binding;
        _Scheduler_binding = function (originalCallback) {
            return originalBinding(function () {
                // start the scheduled process, which may return a cancellation function.
                var cancel = originalCallback.apply(this, arguments);
                if (cancel) {
                    cancellers.push(cancel);
                    return function () {
                        cancellers.splice(cancellers.indexOf(cancel), 1);
                        return cancel();
                    };
                }
                return cancel;
            });
        };

        scope['_elm_hot_loader_init'] = function (Elm) {
            // swap instances
            var removedInstances = [];
            for (var id in instances) {
                var instance = instances[id];
                if (instance.domNode.parentNode) {
                    swap(Elm, instance);
                } else {
                    removedInstances.push(id);
                }
            }

            removedInstances.forEach(function (id) {
                delete instance[id];
            });

            // wrap all public modules
            var publicModules = findPublicModules(Elm);
            publicModules.forEach(function (m) {
                wrapPublicModule(m.path, m.module);
            });
        }
    })();

    scope['_elm_hot_loader_init'](scope['Elm']);
}
//////////////////// HMR END ////////////////////


}(this));
},{}],"js/mapStyles.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var mapStyle = [{
  "featureType": "administrative",
  "elementType": "all",
  "stylers": [{
    "saturation": "-100"
  }]
}, {
  "featureType": "administrative.province",
  "elementType": "all",
  "stylers": [{
    "visibility": "off"
  }]
}, {
  "featureType": "landscape",
  "elementType": "all",
  "stylers": [{
    "saturation": -100
  }, {
    "lightness": 65
  }, {
    "visibility": "on"
  }]
}, {
  "featureType": "poi",
  "elementType": "all",
  "stylers": [{
    "saturation": -100
  }, {
    "lightness": "50"
  }, {
    "visibility": "simplified"
  }]
}, {
  "featureType": "road",
  "elementType": "all",
  "stylers": [{
    "saturation": "-100"
  }]
}, {
  "featureType": "road.highway",
  "elementType": "all",
  "stylers": [{
    "visibility": "simplified"
  }]
}, {
  "featureType": "road.arterial",
  "elementType": "all",
  "stylers": [{
    "lightness": "30"
  }]
}, {
  "featureType": "road.local",
  "elementType": "all",
  "stylers": [{
    "lightness": "40"
  }]
}, {
  "featureType": "transit",
  "elementType": "all",
  "stylers": [{
    "saturation": -100
  }, {
    "visibility": "simplified"
  }]
}, {
  "featureType": "water",
  "elementType": "geometry",
  "stylers": [{
    "hue": "#ffff00"
  }, {
    "lightness": -25
  }, {
    "saturation": -97
  }]
}, {
  "featureType": "water",
  "elementType": "labels",
  "stylers": [{
    "lightness": -25
  }, {
    "saturation": -100
  }]
}];
var _default = mapStyle;
exports.default = _default;
},{}],"js/env.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var isDevelopment = "development" !== 'production';
console.log("isDevelopment", isDevelopment);
var _default = {
  isDevelopment: isDevelopment
};
exports.default = _default;
},{}],"js/gmaps.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initializeMaps = initializeMaps;
exports.requestGeoLocation = requestGeoLocation;

var _mapStyles = _interopRequireDefault(require("./mapStyles"));

var _env = require("./env");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// Prevent duplicate loads
var runningRequest = null;
var initializingMapsChain = null;

function initializeMaps(app, _clickable, numberOfRetries, schoolLocation) {
  if (schoolLocation) {
    defaultLocation = {
      center: schoolLocation,
      zoom: 10
    };
    console.log(defaultLocation);
  } // Piggyback on existing request if necessary


  var scriptRequest = runningRequest ? function () {
    return runningRequest;
  } : loadMapAPI;

  if (_env.isDevelopment) {
    console.log("initializeMaps");
  }

  initializingMapsChain = scriptRequest().then(createMapDom).then(cleanMap).then(insertMap).then(setupMapCallbacks(app, _clickable)).then(addDrawTools(app)).catch(function () {
    runningRequest = null;
  }).then(function () {
    initializingMapsChain = null;
  });
}
/**
 * Loads the Google Maps API script (or loads a local version)
 */


function loadMapAPI() {
  // only load if google has not loaded
  if ((typeof google === "undefined" ? "undefined" : _typeof(google)) !== (typeof undefined === "undefined" ? "undefined" : _typeof(undefined))) {
    return sleep(300).then(function () {
      return Promise.resolve(google);
    });
  }

  runningRequest = new Promise(function (resolve, reject) {
    var script = document.createElement('script');
    script.type = 'text/javascript';

    script.onload = function () {
      resolve(google);
    };

    script.onerror = reject;
    document.getElementsByTagName('head')[0].appendChild(script);
    script.src = "https://maps.googleapis.com/maps/api/js?key=AIzaSyB6wUhsk2tL7ihoORGBfeqc8UCRA3XRVsw&libraries=drawing";
  });
  return runningRequest;
}

var MapLibraryInstance = null;
var MapDomElement = null;
var defaultLocation = {
  center: {
    lat: -1.2921,
    lng: 36.8219
  },
  zoom: 10
};

function createMapDom(google) {
  runningRequest = null;

  if (MapDomElement && MapLibraryInstance) {
    // Reset location
    MapLibraryInstance.panTo(new google.maps.LatLng(defaultLocation.center));
    MapLibraryInstance.setZoom(defaultLocation.zoom);
    return Promise.resolve({
      dom: MapDomElement,
      map: MapLibraryInstance
    });
  }

  var mapOptions = _objectSpread({
    panControl: false,
    zoomControl: true,
    zoomControlOptions: {
      style: google.maps.ZoomControlStyle.SMALL,
      position: google.maps.ControlPosition.RIGHT
    },
    mapTypeControl: false,
    streetViewControl: false,
    overviewMapControl: false
  }, defaultLocation, {
    styles: _mapStyles.default // gestureHandling: 'cooperative'

  });

  var newElement = document.createElement('google-map-cached');
  MapLibraryInstance = new google.maps.Map(newElement, mapOptions);
  MapDomElement = newElement;
  return Promise.resolve({
    dom: MapDomElement,
    map: MapLibraryInstance
  });
}

var markers = [];
var drawingManager = null;
var schoolCircle = null;

function cleanMap(data) {
  var dom = data.dom,
      map = data.map;
  markers.forEach(function (x) {
    x.setMap(null);
  });
  markers = [];

  if (schoolCircle) {
    schoolCircle.setMap(null);
  }

  return Promise.resolve(data);
}

function insertMap(data) {
  var dom = data.dom,
      map = data.map;
  var mapDiv = document.getElementById('google-map');

  if (dom.parentNode) {
    dom.parentNode.removeChild(dom);
  }

  mapDiv.prepend(dom);
  return Promise.resolve(data);
}

var hasSetup = false;
var clickListener = null;

var setupMapCallbacks = function setupMapCallbacks(app, clickable) {
  return function (data) {
    var dom = data.dom,
        map = data.map;

    if (!hasSetup) {
      // One time actions, we don't want too many subscriptions
      var updateMarker = function updateMarker(update) {
        if (_env.isDevelopment) {
          console.log("updateMarker");
        }

        var bus = update.bus,
            location = update.location;
        var marker = markers.find(function (value, _indx, _list) {
          return value.id == bus;
        });
        var image = {
          url: "/images/buses/".concat(getCardinalDirection(update.bearing), ".svg"),
          size: new google.maps.Size(90, 90),
          // origin: new google.maps.Point(0, 0),
          anchor: new google.maps.Point(45, 45),
          scaledSize: new google.maps.Size(90, 90)
        }; // var image = {
        //     url: `/images/buses/${getCardinalDirection(update.bearing)}.png`,
        //   } 

        if (marker === undefined) {
          marker = new google.maps.Marker({
            id: bus,
            map: map,
            title: "Bus"
          });
          markers.push(marker);
        }

        marker.setPosition(location);
        marker.setIcon(image);
      };

      app.ports.updateBusMap.subscribe(function (update) {
        sleep(100).then(function () {
          if (initializingMapsChain) {
            initializingMapsChain.then(function () {
              updateMarker(update);
            });
          } else {
            updateMarker(update);
          }
        });
      });
      app.ports.bulkUpdateBusMap.subscribe(function (updates) {
        sleep(100).then(function () {
          if (initializingMapsChain) {
            initializingMapsChain.then(function () {
              updates.forEach(updateMarker);
            });
          } else {
            updates.forEach(updateMarker);
          }
        });
      }); // Trips Map Callbacks

      app.ports.deselectPoint.subscribe(function () {
        markers.forEach(function (x) {
          x.setMap(null);
        });
        markers = [];
      });
      app.ports.selectPoint.subscribe(function (gmPos) {
        markers.forEach(function (marker, i, a) {
          marker.setMap(null);
        });
        markers = [];
        var image = {
          url: "/images/map_bus.svg",
          size: new google.maps.Size(64, 64),
          // origin: new google.maps.Point(0, 0),
          anchor: new google.maps.Point(32, 32) // scaledSize: new google.maps.Size(64, 64)

        };
        var marker = new google.maps.Marker({
          position: gmPos,
          map: map,
          icon: image
        });
        map.setZoom(16);
        markers.push(marker);
        map.panTo(gmPos);
      });
    }

    if (clickable) {
      if (!google.maps.event.hasListeners(map, 'click')) {
        google.maps.event.addListener(map, 'click', function (args) {
          var pos = {
            lat: args.latLng.lat(),
            lng: args.latLng.lng()
          }; // insertCircle(pos, app)
        });
      }
    } else {
      if (clickListener) {
        google.maps.event.removeListener(clickListener);
      }
    }

    hasSetup = true;
    app.ports.mapReady.send(true);
    return Promise.resolve(data);
  };
};

function getCardinalDirection(angle) {
  var directions = ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW'];
  return directions[Math.round(angle / 45) % 8];
}

function insertCircle(pos, app) {
  var radius = 50;

  if (schoolCircle) {
    radius = schoolCircle.getRadius();
    schoolCircle.setMap(null);
  }

  getMapElement().then(function () {
    schoolCircle = new google.maps.Circle({
      strokeColor: '#61A591',
      strokeOpacity: 0.8,
      strokeWeight: 2,
      fillColor: '#61A591',
      fillOpacity: 0.35,
      map: MapInstance,
      draggable: true,
      geodesic: true,
      editable: true,
      center: pos,
      radius: radius // metres

    });

    function sendSchoolCircle(schoolCircle) {
      app.ports.receivedMapClickLocation.send({
        lat: schoolCircle.center.lat(),
        lng: schoolCircle.center.lng(),
        radius: schoolCircle.getRadius()
      });
    }

    if (!google.maps.event.hasListeners(schoolCircle, 'radius_changed')) {
      google.maps.event.addListener(schoolCircle, 'radius_changed', function () {
        sendSchoolCircle(schoolCircle);
      });
      google.maps.event.addListener(schoolCircle, 'center_changed', function () {
        sendSchoolCircle(schoolCircle);
      });
    }

    MapInstance.panTo(schoolCircle.center);
    MapInstance.setZoom(16);
    sendSchoolCircle(schoolCircle);
  });
}

var polylineListener = null;

var addDrawTools = function addDrawTools(app) {
  return function (data) {
    var dom = data.dom,
        map = data.map;

    if (!drawingManager) {
      drawingManager = new google.maps.drawing.DrawingManager({
        drawingControl: true,
        drawingControlOptions: {
          position: google.maps.ControlPosition.TOP_CENTER,
          drawingModes: ['polyline']
        }
      });
    } else {
      drawingManager.setMap(null);
      google.maps.event.removeListener(polylineListener);
    }

    polylineListener = google.maps.event.addListener(drawingControl, 'polylinecomplete', function (polyline) {
      polylines.push(polyline);
    });
    console.log("drawingManager", drawingManager);
    drawingManager.setMap(map);
    return Promise.resolve();
  };
};

function requestGeoLocation(app) {
  if ("development" !== 'production') {
    app.ports.receivedMapClickLocation.send({
      lat: -1.2921,
      lng: 36.8219,
      radius: 50
    });
    return;
  }

  function handleLocationError(error) {
    switch (error.code) {
      case error.PERMISSION_DENIED:
        alert("Request for geolocation permissions denied.");
        break;

      case error.POSITION_UNAVAILABLE:
        alert("Your location information is unavailable.");
        break;

      case error.TIMEOUT:
        alert("The request to get your location timed out.");
        break;

      case error.UNKNOWN_ERROR:
        alert("An unknown error occurred.");
        break;
    }
  }

  var options = {
    enableHighAccuracy: true,
    timeout: 5000
  };

  var success = function success(data) {
    var pos = {
      lat: data.coords.latitude,
      lng: data.coords.longitude
    };
    insertCircle(pos, app);
  };

  var failure = function failure(error) {
    handleLocationError(error);
    app.ports.receivedMapClickLocation.send(null);
  };

  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(success, failure, options);
  } else {
    alert("Your browser doesn't support geolocation.");
    app.ports.receivedMapClickLocation.send(null);
  }
}

function sleep(time) {
  return new Promise(function (resolve) {
    return setTimeout(resolve, time);
  });
}
},{"./mapStyles":"js/mapStyles.js","./env":"js/env.js"}],"js/camera.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initializeCamera = initializeCamera;
exports.stopCamera = stopCamera;
exports.setFrameFrozen = setFrameFrozen;

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var canvas;
var canvasElement;
var video;
var freezeFrame = false;

var loadQRLib = function loadQRLib() {
  if ((typeof QrCode === "undefined" ? "undefined" : _typeof(QrCode)) !== (typeof undefined === "undefined" ? "undefined" : _typeof(undefined))) {
    return Promise.resolve();
  }

  freezeFrame = false;
  return new Promise(function (resolve, reject) {
    var script = document.createElement('script');
    script.type = 'text/javascript';
    script.onload = resolve;
    script.onerror = reject;
    document.getElementsByTagName('head')[0].appendChild(script); // script.src = "https://cdn.jsdelivr.net/npm/jsqr@1.0.4/dist/jsQR.min.js"

    script.src = "/js/jsQR.min.js";
  });
};

function initializeCamera(app) {
  loadQRLib().then(function () {
    app.ports.disableCamera.subscribe(function (after) {
      sleep(after).then(function () {
        stopCamera(app);
      });
    });
    app.ports.setFrameFrozen.subscribe(function (isFrozen) {
      setFrameFrozen(isFrozen);
    });
    video = document.createElement("video");
    canvasElement = document.getElementById('camera-canvas');
    canvas = canvasElement.getContext("2d"); // Use facingMode: environment to attemt to get the front camera on phones

    navigator.mediaDevices.getUserMedia({
      video: {
        facingMode: "environment"
      }
    }).then(function (stream) {
      video.srcObject = stream;
      video.setAttribute("playsinline", true); // required to tell iOS safari we don't want fullscreen

      video.play();
      app.ports.receiveCameraActive.send(true);
      sleep(20000).then(function () {
        stopCamera(app);
      });
      requestAnimationFrame(tick);
    }).catch(function (e) {
      console.log(e);

      if (e.message.match("not found")) {
        app.ports.noCameraFoundError.send(true);
      }

      app.ports.receiveCameraActive.send(false);
    });

    function tick() {
      if (!video) {
        return;
      }

      if (freezeFrame) {
        sleep(0).then(function () {
          requestAnimationFrame(tick);
        });
        return;
      }

      if (video.readyState === video.HAVE_ENOUGH_DATA) {
        canvasElement.height = video.videoHeight;
        canvasElement.width = video.videoWidth;
        canvas.drawImage(video, 0, 0, canvasElement.width, canvasElement.height);
        var imageData = canvas.getImageData(0, 0, canvasElement.width, canvasElement.height);
        var code = jsQR(imageData.data, imageData.width, imageData.height, {
          inversionAttempts: 'dontInvert'
        });

        if (code) {
          drawBox(code.location.topLeftCorner, code.location.topRightCorner, code.location.bottomRightCorner, code.location.bottomLeftCorner, "#594FEE");
          freezeFrame = true;
          app.ports.scannedDeviceCode.send(code.data);
        }
      }

      sleep(0).then(function () {
        requestAnimationFrame(tick);
      });
    }
  }).catch(function (e) {
    app.ports.receiveCameraActive.send(false);
  });
}

function drawBox(begin, b, c, d, color) {
  canvas.beginPath();
  canvas.moveTo(begin.x, begin.y);
  canvas.lineTo(b.x, b.y);
  canvas.lineTo(c.x, c.y);
  canvas.lineTo(d.x, d.y);
  canvas.lineTo(begin.x, begin.y);
  canvas.lineWidth = 4;
  canvas.strokeStyle = color;
  canvas.stroke();
}

function stopCamera(app) {
  if (!video) {
    return;
  }

  var stream = video.srcObject;
  stream.getTracks().forEach(function (track) {
    track.stop();
  });
  video.srcObject = null;
  video.pause();
  app.ports.receiveCameraActive.send(false);
  canvas.clearRect(0, 0, canvasElement.width, canvasElement.height);
  canvasElement.height = 0;
  canvasElement.width = 0;
  canvas = null;
  canvasElement = null;
  video = null;
}

function sleep(time) {
  return new Promise(function (resolve) {
    return setTimeout(resolve, time);
  });
}

function setFrameFrozen(isFrozen) {
  freezeFrame = isFrozen;
}
},{}],"node_modules/phoenix/priv/static/phoenix.js":[function(require,module,exports) {
var define;
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Phoenix=t():e.Phoenix=t()}(this,function(){return function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(i,o,function(t){return e[t]}.bind(null,o));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){(function(t){e.exports=t.Phoenix=n(2)}).call(this,n(1))},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";function i(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],i=!0,o=!1,r=void 0;try{for(var s,a=e[Symbol.iterator]();!(i=(s=a.next()).done)&&(n.push(s.value),!t||n.length!==t);i=!0);}catch(e){o=!0,r=e}finally{try{i||null==a.return||a.return()}finally{if(o)throw r}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function c(e,t,n){return t&&a(e.prototype,t),n&&a(e,n),e}n.r(t),n.d(t,"Channel",function(){return j}),n.d(t,"Serializer",function(){return C}),n.d(t,"Socket",function(){return R}),n.d(t,"LongPoll",function(){return T}),n.d(t,"Ajax",function(){return w}),n.d(t,"Presence",function(){return E});var u="undefined"!=typeof self?self:null,h="undefined"!=typeof window?window:null,l=u||h||void 0,f="2.0.0",d={connecting:0,open:1,closing:2,closed:3},p=1e4,v={closed:"closed",errored:"errored",joined:"joined",joining:"joining",leaving:"leaving"},y={close:"phx_close",error:"phx_error",join:"phx_join",reply:"phx_reply",leave:"phx_leave"},g=[y.close,y.error,y.join,y.reply,y.leave],m={longpoll:"longpoll",websocket:"websocket"},k=function(e){if("function"==typeof e)return e;return function(){return e}},b=function(){function e(t,n,i,o){s(this,e),this.channel=t,this.event=n,this.payload=i||function(){return{}},this.receivedResp=null,this.timeout=o,this.timeoutTimer=null,this.recHooks=[],this.sent=!1}return c(e,[{key:"resend",value:function(e){this.timeout=e,this.reset(),this.send()}},{key:"send",value:function(){this.hasReceived("timeout")||(this.startTimeout(),this.sent=!0,this.channel.socket.push({topic:this.channel.topic,event:this.event,payload:this.payload(),ref:this.ref,join_ref:this.channel.joinRef()}))}},{key:"receive",value:function(e,t){return this.hasReceived(e)&&t(this.receivedResp.response),this.recHooks.push({status:e,callback:t}),this}},{key:"reset",value:function(){this.cancelRefEvent(),this.ref=null,this.refEvent=null,this.receivedResp=null,this.sent=!1}},{key:"matchReceive",value:function(e){var t=e.status,n=e.response;e.ref;this.recHooks.filter(function(e){return e.status===t}).forEach(function(e){return e.callback(n)})}},{key:"cancelRefEvent",value:function(){this.refEvent&&this.channel.off(this.refEvent)}},{key:"cancelTimeout",value:function(){clearTimeout(this.timeoutTimer),this.timeoutTimer=null}},{key:"startTimeout",value:function(){var e=this;this.timeoutTimer&&this.cancelTimeout(),this.ref=this.channel.socket.makeRef(),this.refEvent=this.channel.replyEventName(this.ref),this.channel.on(this.refEvent,function(t){e.cancelRefEvent(),e.cancelTimeout(),e.receivedResp=t,e.matchReceive(t)}),this.timeoutTimer=setTimeout(function(){e.trigger("timeout",{})},this.timeout)}},{key:"hasReceived",value:function(e){return this.receivedResp&&this.receivedResp.status===e}},{key:"trigger",value:function(e,t){this.channel.trigger(this.refEvent,{status:e,response:t})}}]),e}(),j=function(){function e(t,n,i){var o=this;s(this,e),this.state=v.closed,this.topic=t,this.params=k(n||{}),this.socket=i,this.bindings=[],this.bindingRef=0,this.timeout=this.socket.timeout,this.joinedOnce=!1,this.joinPush=new b(this,y.join,this.params,this.timeout),this.pushBuffer=[],this.stateChangeRefs=[],this.rejoinTimer=new S(function(){o.socket.isConnected()&&o.rejoin()},this.socket.rejoinAfterMs),this.stateChangeRefs.push(this.socket.onError(function(){return o.rejoinTimer.reset()})),this.stateChangeRefs.push(this.socket.onOpen(function(){o.rejoinTimer.reset(),o.isErrored()&&o.rejoin()})),this.joinPush.receive("ok",function(){o.state=v.joined,o.rejoinTimer.reset(),o.pushBuffer.forEach(function(e){return e.send()}),o.pushBuffer=[]}),this.joinPush.receive("error",function(){o.state=v.errored,o.socket.isConnected()&&o.rejoinTimer.scheduleTimeout()}),this.onClose(function(){o.rejoinTimer.reset(),o.socket.hasLogger()&&o.socket.log("channel","close ".concat(o.topic," ").concat(o.joinRef())),o.state=v.closed,o.socket.remove(o)}),this.onError(function(e){o.socket.hasLogger()&&o.socket.log("channel","error ".concat(o.topic),e),o.isJoining()&&o.joinPush.reset(),o.state=v.errored,o.socket.isConnected()&&o.rejoinTimer.scheduleTimeout()}),this.joinPush.receive("timeout",function(){o.socket.hasLogger()&&o.socket.log("channel","timeout ".concat(o.topic," (").concat(o.joinRef(),")"),o.joinPush.timeout),new b(o,y.leave,k({}),o.timeout).send(),o.state=v.errored,o.joinPush.reset(),o.socket.isConnected()&&o.rejoinTimer.scheduleTimeout()}),this.on(y.reply,function(e,t){o.trigger(o.replyEventName(t),e)})}return c(e,[{key:"join",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.timeout;if(this.joinedOnce)throw new Error("tried to join multiple times. 'join' can only be called a single time per channel instance");return this.timeout=e,this.joinedOnce=!0,this.rejoin(),this.joinPush}},{key:"onClose",value:function(e){this.on(y.close,e)}},{key:"onError",value:function(e){return this.on(y.error,function(t){return e(t)})}},{key:"on",value:function(e,t){var n=this.bindingRef++;return this.bindings.push({event:e,ref:n,callback:t}),n}},{key:"off",value:function(e,t){this.bindings=this.bindings.filter(function(n){return!(n.event===e&&(void 0===t||t===n.ref))})}},{key:"canPush",value:function(){return this.socket.isConnected()&&this.isJoined()}},{key:"push",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.timeout;if(!this.joinedOnce)throw new Error("tried to push '".concat(e,"' to '").concat(this.topic,"' before joining. Use channel.join() before pushing events"));var i=new b(this,e,function(){return t},n);return this.canPush()?i.send():(i.startTimeout(),this.pushBuffer.push(i)),i}},{key:"leave",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.timeout;this.rejoinTimer.reset(),this.joinPush.cancelTimeout(),this.state=v.leaving;var n=function(){e.socket.hasLogger()&&e.socket.log("channel","leave ".concat(e.topic)),e.trigger(y.close,"leave")},i=new b(this,y.leave,k({}),t);return i.receive("ok",function(){return n()}).receive("timeout",function(){return n()}),i.send(),this.canPush()||i.trigger("ok",{}),i}},{key:"onMessage",value:function(e,t,n){return t}},{key:"isLifecycleEvent",value:function(e){return g.indexOf(e)>=0}},{key:"isMember",value:function(e,t,n,i){return this.topic===e&&(!i||i===this.joinRef()||!this.isLifecycleEvent(t)||(this.socket.hasLogger()&&this.socket.log("channel","dropping outdated message",{topic:e,event:t,payload:n,joinRef:i}),!1))}},{key:"joinRef",value:function(){return this.joinPush.ref}},{key:"sendJoin",value:function(e){this.state=v.joining,this.joinPush.resend(e)}},{key:"rejoin",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.timeout;this.isLeaving()||this.sendJoin(e)}},{key:"trigger",value:function(e,t,n,i){var o=this.onMessage(e,t,n,i);if(t&&!o)throw new Error("channel onMessage callbacks must return the payload, modified or unmodified");for(var r=0;r<this.bindings.length;r++){var s=this.bindings[r];s.event===e&&s.callback(o,n,i||this.joinRef())}}},{key:"replyEventName",value:function(e){return"chan_reply_".concat(e)}},{key:"isClosed",value:function(){return this.state===v.closed}},{key:"isErrored",value:function(){return this.state===v.errored}},{key:"isJoined",value:function(){return this.state===v.joined}},{key:"isJoining",value:function(){return this.state===v.joining}},{key:"isLeaving",value:function(){return this.state===v.leaving}}]),e}(),C={encode:function(e,t){var n=[e.join_ref,e.ref,e.topic,e.event,e.payload];return t(JSON.stringify(n))},decode:function(e,t){var n=r(JSON.parse(e),5);return t({join_ref:n[0],ref:n[1],topic:n[2],event:n[3],payload:n[4]})}},R=function(){function e(t){var n=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};s(this,e),this.stateChangeCallbacks={open:[],close:[],error:[],message:[]},this.channels=[],this.sendBuffer=[],this.ref=0,this.timeout=i.timeout||p,this.transport=i.transport||l.WebSocket||T,this.defaultEncoder=C.encode,this.defaultDecoder=C.decode,this.closeWasClean=!1,this.unloaded=!1,this.binaryType=i.binaryType||"arraybuffer",this.transport!==T?(this.encode=i.encode||this.defaultEncoder,this.decode=i.decode||this.defaultDecoder):(this.encode=this.defaultEncoder,this.decode=this.defaultDecoder),h&&h.addEventListener&&h.addEventListener("unload",function(e){n.conn&&(n.unloaded=!0,n.abnormalClose("unloaded"))}),this.heartbeatIntervalMs=i.heartbeatIntervalMs||3e4,this.rejoinAfterMs=function(e){return i.rejoinAfterMs?i.rejoinAfterMs(e):[1e3,2e3,5e3][e-1]||1e4},this.reconnectAfterMs=function(e){return n.unloaded?100:i.reconnectAfterMs?i.reconnectAfterMs(e):[10,50,100,150,200,250,500,1e3,2e3][e-1]||5e3},this.logger=i.logger||null,this.longpollerTimeout=i.longpollerTimeout||2e4,this.params=k(i.params||{}),this.endPoint="".concat(t,"/").concat(m.websocket),this.vsn=i.vsn||f,this.heartbeatTimer=null,this.pendingHeartbeatRef=null,this.reconnectTimer=new S(function(){n.teardown(function(){return n.connect()})},this.reconnectAfterMs)}return c(e,[{key:"protocol",value:function(){return location.protocol.match(/^https/)?"wss":"ws"}},{key:"endPointURL",value:function(){var e=w.appendParams(w.appendParams(this.endPoint,this.params()),{vsn:this.vsn});return"/"!==e.charAt(0)?e:"/"===e.charAt(1)?"".concat(this.protocol(),":").concat(e):"".concat(this.protocol(),"://").concat(location.host).concat(e)}},{key:"disconnect",value:function(e,t,n){this.closeWasClean=!0,this.reconnectTimer.reset(),this.teardown(e,t,n)}},{key:"connect",value:function(e){var t=this;e&&(console&&console.log("passing params to connect is deprecated. Instead pass :params to the Socket constructor"),this.params=k(e)),this.conn||(this.closeWasClean=!1,this.conn=new this.transport(this.endPointURL()),this.conn.binaryType=this.binaryType,this.conn.timeout=this.longpollerTimeout,this.conn.onopen=function(){return t.onConnOpen()},this.conn.onerror=function(e){return t.onConnError(e)},this.conn.onmessage=function(e){return t.onConnMessage(e)},this.conn.onclose=function(e){return t.onConnClose(e)})}},{key:"log",value:function(e,t,n){this.logger(e,t,n)}},{key:"hasLogger",value:function(){return null!==this.logger}},{key:"onOpen",value:function(e){var t=this.makeRef();return this.stateChangeCallbacks.open.push([t,e]),t}},{key:"onClose",value:function(e){var t=this.makeRef();return this.stateChangeCallbacks.close.push([t,e]),t}},{key:"onError",value:function(e){var t=this.makeRef();return this.stateChangeCallbacks.error.push([t,e]),t}},{key:"onMessage",value:function(e){var t=this.makeRef();return this.stateChangeCallbacks.message.push([t,e]),t}},{key:"onConnOpen",value:function(){this.hasLogger()&&this.log("transport","connected to ".concat(this.endPointURL())),this.unloaded=!1,this.closeWasClean=!1,this.flushSendBuffer(),this.reconnectTimer.reset(),this.resetHeartbeat(),this.stateChangeCallbacks.open.forEach(function(e){return(0,r(e,2)[1])()})}},{key:"resetHeartbeat",value:function(){var e=this;this.conn&&this.conn.skipHeartbeat||(this.pendingHeartbeatRef=null,clearInterval(this.heartbeatTimer),this.heartbeatTimer=setInterval(function(){return e.sendHeartbeat()},this.heartbeatIntervalMs))}},{key:"teardown",value:function(e,t,n){this.conn&&(this.conn.onclose=function(){},t?this.conn.close(t,n||""):this.conn.close(),this.conn=null),e&&e()}},{key:"onConnClose",value:function(e){this.hasLogger()&&this.log("transport","close",e),this.triggerChanError(),clearInterval(this.heartbeatTimer),this.closeWasClean||this.reconnectTimer.scheduleTimeout(),this.stateChangeCallbacks.close.forEach(function(t){return(0,r(t,2)[1])(e)})}},{key:"onConnError",value:function(e){this.hasLogger()&&this.log("transport",e),this.triggerChanError(),this.stateChangeCallbacks.error.forEach(function(t){return(0,r(t,2)[1])(e)})}},{key:"triggerChanError",value:function(){this.channels.forEach(function(e){e.isErrored()||e.isLeaving()||e.isClosed()||e.trigger(y.error)})}},{key:"connectionState",value:function(){switch(this.conn&&this.conn.readyState){case d.connecting:return"connecting";case d.open:return"open";case d.closing:return"closing";default:return"closed"}}},{key:"isConnected",value:function(){return"open"===this.connectionState()}},{key:"remove",value:function(e){this.off(e.stateChangeRefs),this.channels=this.channels.filter(function(t){return t.joinRef()!==e.joinRef()})}},{key:"off",value:function(e){for(var t in this.stateChangeCallbacks)this.stateChangeCallbacks[t]=this.stateChangeCallbacks[t].filter(function(t){var n=r(t,1)[0];return!e.includes(n)})}},{key:"channel",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=new j(e,t,this);return this.channels.push(n),n}},{key:"push",value:function(e){var t=this;if(this.hasLogger()){var n=e.topic,i=e.event,o=e.payload,r=e.ref,s=e.join_ref;this.log("push","".concat(n," ").concat(i," (").concat(s,", ").concat(r,")"),o)}this.isConnected()?this.encode(e,function(e){return t.conn.send(e)}):this.sendBuffer.push(function(){return t.encode(e,function(e){return t.conn.send(e)})})}},{key:"makeRef",value:function(){var e=this.ref+1;return e===this.ref?this.ref=0:this.ref=e,this.ref.toString()}},{key:"sendHeartbeat",value:function(){if(this.isConnected()){if(this.pendingHeartbeatRef)return this.pendingHeartbeatRef=null,this.hasLogger()&&this.log("transport","heartbeat timeout. Attempting to re-establish connection"),void this.abnormalClose("heartbeat timeout");this.pendingHeartbeatRef=this.makeRef(),this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:this.pendingHeartbeatRef})}}},{key:"abnormalClose",value:function(e){this.closeWasClean=!1,this.conn.close(1e3,e)}},{key:"flushSendBuffer",value:function(){this.isConnected()&&this.sendBuffer.length>0&&(this.sendBuffer.forEach(function(e){return e()}),this.sendBuffer=[])}},{key:"onConnMessage",value:function(e){var t=this;this.decode(e.data,function(e){var n=e.topic,i=e.event,o=e.payload,s=e.ref,a=e.join_ref;s&&s===t.pendingHeartbeatRef&&(t.pendingHeartbeatRef=null),t.hasLogger()&&t.log("receive","".concat(o.status||""," ").concat(n," ").concat(i," ").concat(s&&"("+s+")"||""),o);for(var c=0;c<t.channels.length;c++){var u=t.channels[c];u.isMember(n,i,o,a)&&u.trigger(i,o,s,a)}for(var h=0;h<t.stateChangeCallbacks.message.length;h++){(0,r(t.stateChangeCallbacks.message[h],2)[1])(e)}})}}]),e}(),T=function(){function e(t){s(this,e),this.endPoint=null,this.token=null,this.skipHeartbeat=!0,this.onopen=function(){},this.onerror=function(){},this.onmessage=function(){},this.onclose=function(){},this.pollEndpoint=this.normalizeEndpoint(t),this.readyState=d.connecting,this.poll()}return c(e,[{key:"normalizeEndpoint",value:function(e){return e.replace("ws://","http://").replace("wss://","https://").replace(new RegExp("(.*)/"+m.websocket),"$1/"+m.longpoll)}},{key:"endpointURL",value:function(){return w.appendParams(this.pollEndpoint,{token:this.token})}},{key:"closeAndRetry",value:function(){this.close(),this.readyState=d.connecting}},{key:"ontimeout",value:function(){this.onerror("timeout"),this.closeAndRetry()}},{key:"poll",value:function(){var e=this;this.readyState!==d.open&&this.readyState!==d.connecting||w.request("GET",this.endpointURL(),"application/json",null,this.timeout,this.ontimeout.bind(this),function(t){if(t){var n=t.status,i=t.token,o=t.messages;e.token=i}else n=0;switch(n){case 200:o.forEach(function(t){return e.onmessage({data:t})}),e.poll();break;case 204:e.poll();break;case 410:e.readyState=d.open,e.onopen(),e.poll();break;case 0:case 500:e.onerror(),e.closeAndRetry();break;default:throw new Error("unhandled poll status ".concat(n))}})}},{key:"send",value:function(e){var t=this;w.request("POST",this.endpointURL(),"application/json",e,this.timeout,this.onerror.bind(this,"timeout"),function(e){e&&200===e.status||(t.onerror(e&&e.status),t.closeAndRetry())})}},{key:"close",value:function(e,t){this.readyState=d.closed,this.onclose()}}]),e}(),w=function(){function e(){s(this,e)}return c(e,null,[{key:"request",value:function(e,t,n,i,o,r,s){if(l.XDomainRequest){var a=new XDomainRequest;this.xdomainRequest(a,e,t,i,o,r,s)}else{var c=l.XMLHttpRequest?new l.XMLHttpRequest:new ActiveXObject("Microsoft.XMLHTTP");this.xhrRequest(c,e,t,n,i,o,r,s)}}},{key:"xdomainRequest",value:function(e,t,n,i,o,r,s){var a=this;e.timeout=o,e.open(t,n),e.onload=function(){var t=a.parseJSON(e.responseText);s&&s(t)},r&&(e.ontimeout=r),e.onprogress=function(){},e.send(i)}},{key:"xhrRequest",value:function(e,t,n,i,o,r,s,a){var c=this;e.open(t,n,!0),e.timeout=r,e.setRequestHeader("Content-Type",i),e.onerror=function(){a&&a(null)},e.onreadystatechange=function(){if(e.readyState===c.states.complete&&a){var t=c.parseJSON(e.responseText);a(t)}},s&&(e.ontimeout=s),e.send(o)}},{key:"parseJSON",value:function(e){if(!e||""===e)return null;try{return JSON.parse(e)}catch(t){return console&&console.log("failed to parse JSON response",e),null}}},{key:"serialize",value:function(e,t){var n=[];for(var i in e)if(e.hasOwnProperty(i)){var r=t?"".concat(t,"[").concat(i,"]"):i,s=e[i];"object"===o(s)?n.push(this.serialize(s,r)):n.push(encodeURIComponent(r)+"="+encodeURIComponent(s))}return n.join("&")}},{key:"appendParams",value:function(e,t){if(0===Object.keys(t).length)return e;var n=e.match(/\?/)?"&":"?";return"".concat(e).concat(n).concat(this.serialize(t))}}]),e}();w.states={complete:4};var E=function(){function e(t){var n=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};s(this,e);var o=i.events||{state:"presence_state",diff:"presence_diff"};this.state={},this.pendingDiffs=[],this.channel=t,this.joinRef=null,this.caller={onJoin:function(){},onLeave:function(){},onSync:function(){}},this.channel.on(o.state,function(t){var i=n.caller,o=i.onJoin,r=i.onLeave,s=i.onSync;n.joinRef=n.channel.joinRef(),n.state=e.syncState(n.state,t,o,r),n.pendingDiffs.forEach(function(t){n.state=e.syncDiff(n.state,t,o,r)}),n.pendingDiffs=[],s()}),this.channel.on(o.diff,function(t){var i=n.caller,o=i.onJoin,r=i.onLeave,s=i.onSync;n.inPendingSyncState()?n.pendingDiffs.push(t):(n.state=e.syncDiff(n.state,t,o,r),s())})}return c(e,[{key:"onJoin",value:function(e){this.caller.onJoin=e}},{key:"onLeave",value:function(e){this.caller.onLeave=e}},{key:"onSync",value:function(e){this.caller.onSync=e}},{key:"list",value:function(t){return e.list(this.state,t)}},{key:"inPendingSyncState",value:function(){return!this.joinRef||this.joinRef!==this.channel.joinRef()}}],[{key:"syncState",value:function(e,t,n,i){var o=this,r=this.clone(e),s={},a={};return this.map(r,function(e,n){t[e]||(a[e]=n)}),this.map(t,function(e,t){var n=r[e];if(n){var i=t.metas.map(function(e){return e.phx_ref}),c=n.metas.map(function(e){return e.phx_ref}),u=t.metas.filter(function(e){return c.indexOf(e.phx_ref)<0}),h=n.metas.filter(function(e){return i.indexOf(e.phx_ref)<0});u.length>0&&(s[e]=t,s[e].metas=u),h.length>0&&(a[e]=o.clone(n),a[e].metas=h)}else s[e]=t}),this.syncDiff(r,{joins:s,leaves:a},n,i)}},{key:"syncDiff",value:function(e,t,n,o){var r=t.joins,s=t.leaves,a=this.clone(e);return n||(n=function(){}),o||(o=function(){}),this.map(r,function(e,t){var o=a[e];if(a[e]=t,o){var r,s=a[e].metas.map(function(e){return e.phx_ref}),c=o.metas.filter(function(e){return s.indexOf(e.phx_ref)<0});(r=a[e].metas).unshift.apply(r,i(c))}n(e,o,t)}),this.map(s,function(e,t){var n=a[e];if(n){var i=t.metas.map(function(e){return e.phx_ref});n.metas=n.metas.filter(function(e){return i.indexOf(e.phx_ref)<0}),o(e,n,t),0===n.metas.length&&delete a[e]}}),a}},{key:"list",value:function(e,t){return t||(t=function(e,t){return t}),this.map(e,function(e,n){return t(e,n)})}},{key:"map",value:function(e,t){return Object.getOwnPropertyNames(e).map(function(n){return t(n,e[n])})}},{key:"clone",value:function(e){return JSON.parse(JSON.stringify(e))}}]),e}(),S=function(){function e(t,n){s(this,e),this.callback=t,this.timerCalc=n,this.timer=null,this.tries=0}return c(e,[{key:"reset",value:function(){this.tries=0,clearTimeout(this.timer)}},{key:"scheduleTimeout",value:function(){var e=this;clearTimeout(this.timer),this.timer=setTimeout(function(){e.tries=e.tries+1,e.callback()},this.timerCalc(this.tries+1))}}]),e}()}])});
},{}],"js/liveView.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initializeLiveView = initializeLiveView;
exports.killLiveView = killLiveView;

var _phoenix = require("phoenix");

// console.log(localStorage.getItem('credentials'))
// let { token } = JSON.parse(localStorage.getItem('credentials'))
// console.log(token)
// let socket = new Socket("/socket/manager", { params: { token: token } })
// socket.connect()
// let channel = socket.channel("school:8", {})
// channel.join()
//     .receive("ok", resp => { console.log("Joined successfully", resp) })
//     .receive("error", resp => { console.log("Unable to join", resp) })
var socket;

function initializeLiveView(app) {
  var _JSON$parse = JSON.parse(localStorage.getItem('credentials')),
      token = _JSON$parse.token,
      school_id = _JSON$parse.school_id;

  if (token && !socket) {
    socket = new _phoenix.Socket("/socket/manager", {
      params: {
        token: token
      }
    });
    socket.connect();
    var channel = socket.channel("school:".concat(school_id), {});
    channel.join().receive("ok", on_join(channel, app)).receive("error", function (resp) {
      console.log("Unable to join", resp);
    });
  }
}

function on_join(channel, app) {
  console.log(app);
  return function (resp) {
    console.log("Joined successfully", resp);
    channel.on("bus_moved", function (response) {
      console.log("Returned Greeting:", response);
      app.ports.onBusMove.send(response);
    });
  };
}

function killLiveView(app) {
  if (socket) {
    socket.disconnect();
    socket = undefined;
  }
}
},{"phoenix":"node_modules/phoenix/priv/static/phoenix.js"}],"js/app.js":[function(require,module,exports) {
"use strict";

var _Main = require("../src/Main.elm");

var _gmaps = require("./gmaps");

var _camera = require("./camera");

var _liveView = require("./liveView");

function parse(string) {
  try {
    return string ? JSON.parse(string) : null;
  } catch (e) {
    localStorage.setItem(credentialsStorageKey, null);
    return null;
  }
}

var schoolLocationStorageKey = 'schoolLocation';
var credentialsStorageKey = 'credentials';
var storedCredentials = parse(localStorage.getItem(credentialsStorageKey));
var windowSize = {
  width: window.innerWidth,
  height: window.innerHeight
};

function sleep(time) {
  return new Promise(function (resolve) {
    return setTimeout(resolve, time);
  });
}

var app = _Main.Elm.Main.init({
  flags: {
    credentials: storedCredentials,
    window: windowSize
  },
  node: document.getElementById("elm")
});

app.ports.initializeMaps.subscribe(function (clickable) {
  var numberOfRetries = 5;
  var schoolLocation = parse(localStorage.getItem(schoolLocationStorageKey));
  (0, _gmaps.initializeMaps)(app, clickable, numberOfRetries, schoolLocation);
});
app.ports.requestGeoLocation.subscribe(function () {
  (0, _gmaps.requestGeoLocation)(app);
});
app.ports.setSchoolLocation.subscribe(function (schoolLocation) {
  localStorage.setItem(schoolLocationStorageKey, JSON.stringify(schoolLocation));
});
app.ports.initializeCamera.subscribe(function () {
  // Give the canvas time to render
  sleep(500).then(function () {
    (0, _camera.initializeCamera)(app);
  });
});
app.ports.initializeLiveView.subscribe(function () {
  var _parse = parse(localStorage.getItem(credentialsStorageKey)),
      token = _parse.token;

  if (token) {
    (0, _liveView.initializeLiveView)(app, token);
  }
});
app.ports.storeCache.subscribe(function (credentials) {
  localStorage.setItem(credentialsStorageKey, JSON.stringify(credentials));
  credentialsUpdated(credentials);
});
window.addEventListener("storage", function (event) {
  if (event.storageArea === storedCredentials && event.key === credentialsStorageKey) {
    var state = parse(event.value);
    credentialsUpdated(state);
  }
}, false);

function credentialsUpdated(credentials) {
  app.ports.onStoreChange.send(credentials);

  if (credentials === null) {
    (0, _liveView.killLiveView)(app);
  } else {
    (0, _liveView.initializeLiveView)(app);
  }
}
},{"../src/Main.elm":"src/Main.elm","./gmaps":"js/gmaps.js","./camera":"js/camera.js","./liveView":"js/liveView.js"}],"node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "64532" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}]},{},["node_modules/parcel-bundler/src/builtins/hmr-runtime.js","js/app.js"], null)